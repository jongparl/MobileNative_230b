<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
 <head> 
  <script type="text/javascript" src="../../snippet.js"></script> 
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
  <link href="../../styles.css" rel="StyleSheet" type="text/css" /> 
  <link href="../../snippet.css" rel="StyleSheet" type="text/css" /> 
  <title>Account Tutorial</title> 
 </head> 
 <body onload="prettyPrint()"> 
  <!--<div id="banner">
Tizen</div>--> 
  <h1>Account Tutorial</h1> 

  <p>This tutorial demonstrates how you can connect to and disconnect from the Account Service, create, delete, and update accounts in the account database, and manage account information, such as user name, display name, domain name, and email address.</p>
  
<p>API functions and data types are defined in the <span style="font-family: Courier New,Courier,monospace;">&lt;account.h&gt;</span> header file, which has to be included in all applications that use the <a href="../../../../org.tizen.mobile.native.apireference/group__CAPI__ACCOUNT__MANAGER__MODULE.html">Account Manager API</a>.</p>

<p>To learn about the Account Manager API features, see the <a href="../../guide/social/account.htm">Account Management Programming Guide</a>.</p>

<p>This tutorial consists of the following parts:</p>
	<ul>
		<li><a href="#init">Initialization and Prerequisites</a></li>
		<li><a href="#add">Creating and Managing an Account</a>
		<p>Create an account, set its properties, and and insert it to the database.</p></li>
		<li><a href="#get">Getting Account Information</a>
		<p>Retrieve information for each existing account and implement a callback function.</p></li>
		<li><a href="#retrieve">Retrieving Accounts by Account Provider</a>
		<p>Retrieve accounts based on a specific provider.</p></li>
		<li><a href="#capability">Retrieving Account Providers by Capability</a>
		<p>Retrieve accounts providers based on a specific capability.</p></li>
		<li><a href="#remove">Removing an Account</a>
		<p>Remove an account from the database.</p></li>
		<li><a href="#disconnect">Disconnecting from the Account Service</a>
		<p>Destroy the account handle and disconnect from the service.</p></li>
		<li><a href="#screen">Adding an Application on the Account Screen</a>
		<p>Display your application on the Add account screen of a Tizen device.</p>
		</li>
   </ul>
 
 <h2 id="init" name="init">Initialization and Prerequisites</h2>
 <p>Declare the necessary global variables. To know, whether a function has been executed properly, see that the return is equal to <span style="font-family: Courier New,Courier,monospace;">ACCOUNT_ERROR_NONE</span>.</p>
 
<pre class="prettyprint">
#include &lt;account.h&gt;
#include &lt;stdio.h&gt;
#include &lt;time.h&gt;

static account_h account = NULL;
static int account_id = 0;
int ret = 0;
</pre>

<h2 id="add" name="add">Creating and Managing an Account</h2>
<p>This part of the tutorial demonstrates how you can connect to the Account Service, create an account, set it properties, and add it to the account database:</p>

<ol>
<li>To operate on the account database, connect the application with the Account Service using the <span style="font-family: Courier New,Courier,monospace;">account_connect()</span> function:

<pre class="prettyprint">
ret = account_connect();
</pre>
</li>
 
<li>Create an account using the <span style="font-family: Courier New,Courier,monospace;">account_create()</span> function and the previously defined account handle:

<pre class="prettyprint">
ret = account_create(&amp;account);
</pre>
</li>
<li>When the account is created, you can set account properties, such as name, display name, domain name, and email address:

<pre class="prettyprint">
char* account_name = &quot;Marcus&quot;;
char* display_name = &quot;Marcus_display&quot;;
char* domain_name = &quot;Marcus_domain&quot;;
char* email_address = &quot;marcus@example.com&quot;;
ret = account_set_user_name(account, account_name);

ret = account_set_display_name(account, display_name);

ret = account_set_domain_name(account, domain_name);

ret = account_set_email_address(account, email_address);
</pre>
</li>

<li>When the account is configured, use the <span style="font-family: Courier New,Courier,monospace;">account_insert_to_db()</span> function to insert the account to the account database. Use the account ID as the second parameter (<span style="font-family: Courier New,Courier,monospace;">account_id</span>):

 <pre class="prettyprint">
ret = account_insert_to_db(account, &amp;account_id);
</pre>
</li>
</ol>

<h2 id="get" name="get">Getting Account Information</h2>

<p>This part of the tutorial demonstrates how you can get account information, such as user name, display name, domain name, and email address:</p>

<ol>
<li>Use the <span style="font-family: Courier New,Courier,monospace;">account_get_total_count_from_db()</span> function to get the total number of inserted records.</p>
<p>To get individual records, use the <span style="font-family: Courier New,Courier,monospace;">account_foreach_account_from_db()</span> function, which iterates through all the records and invokes a callback function for each account:</p>
<pre class="prettyprint">account_foreach_account_from_db (account_cb callback, void *user_data)</pre>
 
<p>The function takes the following parameters:</p>
<ul>
    <li><span style="font-family: Courier New,Courier,monospace;">callback</span>: Callback function to be invoked</li>
	<li><span style="font-family: Courier New,Courier,monospace;">user_data</span>: User data to be passed to the callback function</li>
</ul>	
 
<pre class="prettyprint">
int total_count = -1;
ret = account_get_total_count_from_db(&amp;total_count);

ret = account_foreach_account_from_db(on_account_read, account);
</pre>  
</li>

<li>Define the callback function:
<pre class="prettyprint">typedef bool(* account_cb)(account_h account, void *user_data)</pre>
 
<p>The callback function takes the following parameters:</p>
<ul>
    <li><span style="font-family: Courier New,Courier,monospace;">account</span>: Account handle</li>
	<li><span style="font-family: Courier New,Courier,monospace;">user_data</span>: User data passed from the <span style="font-family: Courier New,Courier,monospace;">account_foreach_account_from_db()</span> function</li>
</ul>

<p>This function retrieves information for each account.</p>
</li>
<li>To get more details, use the <span style="font-family: Courier New,Courier,monospace;">account_get_account_id()</span>, <span style="font-family: Courier New,Courier,monospace;">account_get_user_name()</span>, <span style="font-family: Courier New,Courier,monospace;">account_get_display_name()</span>, and <span style="font-family: Courier New,Courier,monospace;">account_get_icon_path()</span> functions:

<pre class="prettyprint">
static bool on_account_read(account_h account, void *user_data)
{
&nbsp;&nbsp;&nbsp;char *name = NULL;
&nbsp;&nbsp;&nbsp;char *display_name = NULL;
&nbsp;&nbsp;&nbsp;char *icon_path = NULL;
&nbsp;&nbsp;&nbsp;// Get the account ID
&nbsp;&nbsp;&nbsp;ret = account_get_account_id(account, &amp;account_id);
&nbsp;&nbsp;&nbsp;if (ret != ACCOUNT_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;// Get the user name
&nbsp;&nbsp;&nbsp;ret = account_get_user_name(account, &amp;name);
&nbsp;&nbsp;&nbsp;if (ret != ACCOUNT_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;fprintf(stderr, &quot;name: %s&quot;, name);
&nbsp;&nbsp;&nbsp;// Get the display name
&nbsp;&nbsp;&nbsp;ret = account_get_display_name(account, &amp;display_name);
&nbsp;&nbsp;&nbsp;if (ret != ACCOUNT_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;fprintf(stderr, &quot;display_name: %s&quot;, display_name);
&nbsp;&nbsp;&nbsp;// Get the icon path
&nbsp;&nbsp;&nbsp;ret = account_get_icon_path(account, &amp;icon_path);
&nbsp;&nbsp;&nbsp;if (ret != ACCOUNT_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;fprintf(stderr, &quot;icon_path: %s&quot;, icon_path);

&nbsp;&nbsp;&nbsp;free(name);
&nbsp;&nbsp;&nbsp;free(display_name);
&nbsp;&nbsp;&nbsp;free(icon_path);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
</ol>

<h2 id="retrieve" name="retrieve">Retrieving Accounts by Account Provider</h2> 
  <p>By learning how to retrieve accounts by a specific account provider, you bring accounts into your application:</p> 
  <ol> 
  <li>Connect with the Account Service using the <span style="font-family: Courier New,Courier,monospace">account_connect()</span> function.</li> 
   <li>Define the <span style="font-family: Courier New,Courier,monospace">account_cb()</span> callback for getting data of accounts as a parameter of the <span style="font-family: Courier New,Courier,monospace">account_query_account_by_package_name()</span> function.
   <pre class="prettyprint">
static bool account_callback(account_h account, void* user_data) // account_cb() callback
{
&nbsp;&nbsp;&nbsp;// Called once for each account in the database
}
</pre></li> 
   <li>Retrieve the accounts of a specific account provider using the <span style="font-family: Courier New,Courier,monospace">account_query_account_by_package_name()</span> function, and specifying the package name of the account provider:
<pre class="prettyprint">int ret = -1;
char* package_name = &quot;package_name&quot;;
ret = account_query_account_by_package_name(account_callback, package_name, account);
</pre></li> 
  </ol>  
  
    
 <h2 id="capability" name="capability">Retrieving Account Providers by Capability</h2> 
  <p>By learning how to retrieve account providers by a specific capability, you bring accounts into your application:</p> 
  <ol> 
  <li>Connect with the Account Service using the <span style="font-family: Courier New,Courier,monospace">account_connect()</span> function.</li> 
   <li>Define <span style="font-family: Courier New,Courier,monospace">account_type_cb()</span> callback for getting account providers as a parameter of the <span style="font-family: Courier New,Courier,monospace">account_type_query_by_provider_feature()</span> function.
<pre class="prettyprint">
static bool account_type_callback(account_type_h account_type, void* user_data) // account_type_cb() callback
{
&nbsp;&nbsp;&nbsp;// Called once for each account type in the database
}
</pre></li>
   
   <li>Retrieve the account providers of a specific capability by using the <span style="font-family: Courier New,Courier,monospace">account_type_query_by_provider_feature()</span> function:
<pre class="prettyprint">
account_type_h account_type = NULL;
int ret = -1;
char* capability = &quot;http://tizen.org/account/capability/contact&quot;;

ret = account_type_create(&amp;account_type);

ret = account_type_query_by_provider_feature(account_type_callback, capability, account_type);
</pre></li> 
  </ol>  

<h2 id="remove" name="remove">Removing an Account</h2>
<p>To remove an account, use the <span style="font-family: Courier New,Courier,monospace;">account_delete_from_db_by_id()</span>, <span style="font-family: Courier New,Courier,monospace;">account_delete_from_db_by_user_name()</span>, or <span style="font-family: Courier New,Courier,monospace;">account_delete_from_db_by_package_name()</span> function. They all remove a given account record.</p>

 <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">To get the ID needed as an argument of the <span style="font-family: Courier New,Courier,monospace;">account_delete_from_db_by_id()</span> function, use the <span style="font-family: Courier New,Courier,monospace;">account_get_account_id()</span> function.</td> 
    </tr> 
   </tbody> 
  </table> 

<pre class="prettyprint">
ret = account_delete_from_db_by_id(account_id);
</pre>

<h2 id="disconnect" name="disconnect">Disconnecting from the Account Service</h2>
<p>This part of the tutorial demonstrates how you can disconnect from the Account Service:</p>

<ol>
<li>To destroy the account handle, use the <span style="font-family: Courier New,Courier,monospace;">account_destroy()</span> function:
<pre class="prettyprint">
ret = account_destroy(account);
</pre>
</li>
<li>To disconnect from the Account Service, use the <span style="font-family: Courier New,Courier,monospace;">account_disconnect()</span> function:</p>
<pre class="prettyprint">
ret = account_disconnect();
</pre>
</li>
</ol>

<h2 id="screen" name="screen">Adding an Application on the Account Screen</h2>
<p>This part of the tutorial demonstrates how you can add your application on the Add account screen of the device:</p>

<ol>
<li>Add the required information in the manifest file:
<pre class="prettyprint">&lt;account&gt;
&nbsp;&nbsp;&nbsp;&lt;account-provider appid=&quot;app-id name&quot; providerid=&quot;url style string&quot; multiple-accounts-support=&quot;true or false&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;icon section=&quot;account&quot;&gt;application normal icon name&lt;/icon&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;icon section=&quot;account-small&quot;&gt;application small icon name&lt;/icon&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;label xml:lang=&quot;nl-nl&quot;&gt;Application name&lt;/label&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&gt;Application name&lt;/label&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;label xml:lang=&quot;en-gb&quot;&gt;Application name&lt;/label&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;label xml:lang=&quot;jp-jp&quot;&gt;アプリケーション名&lt;/label&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;label xml:lang=&quot;ko-kr&quot;&gt;어플리케이션 이름&lt;/label&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;capability&gt;http://tizen.org/account/capability/contact&lt;/capability&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;capability&gt;http://tizen.org/account/capability/calendar&lt;/capability&gt;
&nbsp;&nbsp;&nbsp;&lt;/account-provider&gt;
&lt;/account&gt;</pre>

<p>The required information includes:</p>
<ul><li><span style="font-family: Courier New,Courier,monospace">appid=&quot;app-id name&quot;</span>
<p>Application ID (for example, <span style="font-family: Courier New,Courier,monospace">appid=&quot;com.samsung.account&quot;</span>).</p></li>
<li><span style="font-family: Courier New,Courier,monospace">providerid=&quot;url style string&quot;</span>
<p>Provider identification string (for example, <span style="font-family: Courier New,Courier,monospace">providerid=&quot;http://www.tizen.org&quot;</span>).</p></li>
<li><span style="font-family: Courier New,Courier,monospace">multiple-accounts-support=&quot;true or false&quot;</span>
<p>Multiple account support (if your application can manage 2 or more accounts, set to <span style="font-family: Courier New,Courier,monospace">true</span>; otherwise set to <span style="font-family: Courier New,Courier,monospace">false</span>)</p></li>
<li><span style="font-family: Courier New,Courier,monospace">&lt;icon section=&quot;account&quot;&gt;application normal icon path&lt;/icon&gt;</span>
<p>Icon displayed on the Add account screen. The icon size must be 72x72 px and the icon file must be in the <span style="font-family: Courier New,Courier,monospace">{app-root}\shared\res\</span> directory.</p></li>
<li><span style="font-family: Courier New,Courier,monospace">&lt;icon section=&quot;account-small&quot;&gt;application small icon path&lt;/icon&gt;</span>
<p>Small icon displayed on the Other application screen to represent the account provider. The icon file must be in the <span style="font-family: Courier New,Courier,monospace">{app-root}\shared\res\</span> directory.</p></li>
<li><span style="font-family: Courier New,Courier,monospace">&lt;label xml:lang=&quot;en-gb&quot;&gt;Application name&lt;/label&gt;</span>
<p>Application name displayed on the Add account screen, according to the selected language.</p></li>
<li><span style="font-family: Courier New,Courier,monospace">&lt;capability&gt;http://tizen.org/account/capability/contact&lt;/capability&gt;</span>
<p>For more information, see the <a href="../../guide/social/account.htm">Account Programming Guide</a>.</p></li></ul>
</li>

<li>Create the sign-in screen UI.
<p>When the user selects your application on the Add account screen, the Account Service launches your application with a specific operation ID (<span style="font-family: Courier New,Courier,monospace">ACCOUNT_OPERATION_SIGNIN</span>) defined in the <span style="font-family: Courier New,Courier,monospace">account-types.h</span> header file, so the sign-in screen must be displayed.</p>

    <p class="figure">Figure: Sign-in screen</p> 
  <p style="text-align:center;"><img alt="Sign-in screen" src="../../images/account_signin.png" /></p> 
</li>
</ol>
<p>The following code snippet shows the full application code:</p>

<pre class="prettyprint">int ret;
int account_id = -1;
account_h account;

// Call before using the Account API
account_connect();
char* capability = &quot;http://tizen.org/account/capability/contact&quot;;

// Insert the test
account_create(&amp;account);
account_set_user_name(account, &quot;urusa77@gmail.com&quot;);
account_set_email_address(account, &quot;urusa77@gmail.com&quot;);
account_set_custom(account, &quot;key1&quot;, &quot;value1&quot;);
account_set_custom(account, &quot;key2&quot;, &quot;value2&quot;);
account_set_custom(account, &quot;key3&quot;, &quot;value3&quot;);
account_set_custom(account, &quot;key4&quot;, &quot;value4&quot;);
account_set_capability(account, capability, ACCOUNT_CAPABILITY_ENABLED);
ret = account_insert_to_db(account, &amp;account_id);

// Insert the account to the database
printf(&quot;account_insert_to_db : ret is %d\n&quot;, ret);

// Destroy the handle
account_destroy(account);</pre>



 <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">For more information on operations and events, see the <a href="../../guide/social/account.htm">Account Management Programming Guide</a>.</td> 
    </tr> 
   </tbody> 
  </table> 


  <h2>Where to Go Next</h2> 
  <ul> 
	<li><a href="social_tutorial.htm">Social Tutorials</a></li>
	<li><a href="../../guide/social/account.htm">Account Management Programming Guide</a></li> 
	<li><a href="../../../../org.tizen.mobile.native.apireference/group__CAPI__ACCOUNT__MANAGER__MODULE.html">Account Manager API Reference</a></li>    
  </ul> 
 
  <div id="footer"> 
   <hr size="1" /> 
   <font size="1">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</font> 
  </div> 

  <script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script> 
 
 </body>
</html>