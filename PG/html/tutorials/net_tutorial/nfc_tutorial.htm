<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
 <head> 
  <script type="text/javascript" src="../../snippet.js"></script> 
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
  <link href="../../styles.css" rel="StyleSheet" type="text/css" /> 
  <link href="../../snippet.css" rel="StyleSheet" type="text/css" /> 
  <title>NFC Tutorial</title> 
 </head> 
 <body onload="prettyPrint()"> 
 
 <h1>NFC Tutorial</h1>

<p>This tutorial demonstrates how to use the NFC API. Functions contained in this module provide access for manipulating NFC connections. </p>

<p>Near Field Communication (NFC) is an international standard (<a href="http://www.iso.org/iso/catalogue_detail.htm?csnumber=38578" target="blank">ISO/IEC 18092</a>) that specifies an interface and a protocol for simple wireless interconnection of closely coupled devices. There are 3 groups of application scenarios for NFC:</p>

<ul><li>Device close to a wireless tag</li>
<li>Device close to another device (target)</li>
<li>Device close to a point of sales terminal</li></ul>

<p>In this tutorial, the NFC API is used to write an application which initializes the NFC adapter and registers callbacks called in case of each connection scenario, so the user is able to work with NFC manually. By connecting your device to the other NFC point (tag, device, or sales terminal), you can invoke the specified callback registered earlier. The second scenario of this tutorial shows how to get the message cached by NFC.</p>

<p>API functions and data types are defined in the <span style="font-family: Courier New,Courier,monospace">&lt;nfc.h&gt;</span> header. This header file has to be included in all applications that use the NFC API.</p>

<p>To learn about the NFC API features, see the <a href="../../guide/net/network.htm">Network Programming Guide</a>.</p>

<p>This tutorial consists of the following parts:</p>

<ul><li><a href="#init">Initialization and Prerequisites</a>

<p>Check whether the device supports NFC. </p></li>

<li><a href="#work">Working with NFC</a> 

<p>Initialize NFC asynchronously, set the NFC tag filter, and register all necessary NFC callbacks.</p></li>

<li><a href="#get">Getting a Cached NFC Message</a>

<p>Initialize NFC synchronously and get a cached NFC message</p></li></ul>


<h2 id="init" name="init">Initialization and Prerequisites</h2>
<p>First thing to do when talking about NFC is to check whether the device you want to work with supports NFC. This can be done by calling the <span style="font-family: Courier New,Courier,monospace;">nfc_manager_is_supported()</span> function. It takes no parameters and it simply returns <span style="font-family: Courier New,Courier,monospace;">true</span> if NFC is supported on the device and <span style="font-family: Courier New,Courier,monospace;">false</span> otherwise.</p>
<pre class="prettyprint">void Network_NFC_startup(void)
{
&nbsp;&nbsp;&nbsp;gmainloop = g_main_loop_new(NULL, FALSE);
&nbsp;&nbsp;&nbsp;bool is_nfc_supported = nfc_manager_is_supported();
&nbsp;&nbsp;&nbsp;if (!is_nfc_supported)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stderr, &quot;is_nfc_supported NOT SUPPORTED&quot;);
}</pre>

<p>The <span style="font-family: Courier New,Courier,monospace;">gmainloop</span>, which is being created here, is used to wait for the results of calling asynchronous functions.</p>

<p>When the work with NFC is finished, the <span style="font-family: Courier New,Courier,monospace;">nfc_manager_deinitialize()</span> function must be called to clear the environment.</p>

<pre class="prettyprint">void Network_NFC_cleanup(void)
{
&nbsp;&nbsp;&nbsp;g_main_loop_unref (gmainloop);
&nbsp;&nbsp;&nbsp;nfc_manager_deinitialize();
}</pre>

<h2 id="work" name="work">Working with NFC</h2>
<p>To work with NFC manually, you need to:</p>

<ol><li>Initialize NFC</li>
<li>Register for notifications</li>
<li>Work with NFC manually</li>
<li>Clean up at the end</li></ol>

<h3 id="init_NFC">Initializing NFC</h3>
<p>To initialize NFC:</p>
<ol><li>
<p>The first function to be used is <span style="font-family: Courier New,Courier,monospace;">nfc_manager_initialize()</span>. This is an asynchronous function that initializes the NFC environment. It takes 2 parameters. The first one is the callback that is called right after the initialization process is finished. The second parameter is data, which is passed to the callback specified in the first parameter. If no data need to be passed, then use <span style="font-family: Courier New,Courier,monospace;">NULL</span>.<p>
<pre class="prettyprint">int error_code = NFC_ERROR_NONE;

error_code = nfc_manager_initialize(nfc_manager_init, NULL);
if (NFC_ERROR_NONE != error_code) // Error occurred

g_timeout_add(1000, timeout_func, gmainloop);
g_main_loop_run(gmainloop);</pre>

<p>After calling the <span style="font-family: Courier New,Courier,monospace;">nfc_manager_initialize()</span> function run <span style="font-family: Courier New,Courier,monospace;">gmainloop</span> to wait for the result of the initialization. It is closed when the time set in the <span style="font-family: Courier New,Courier,monospace;">g_timeout_add</span> function elapses. This time is in milliseconds so the <span style="font-family: Courier New,Courier,monospace;">timeout_func</span> is called after 1 second passes.<p></li>

<li><p>When the initialization is finished, the <span style="font-family: Courier New,Courier,monospace;">nfc_manager_init</span> callback is called. The first function called inside that callback is <span style="font-family: Courier New,Courier,monospace;">nfc_manager_set_activation_changed_cb()</span>. It registers the callback that is invoked every time the activation state of the NFC changes. The parameters are:<p>
<ul><li>Activation state changed callback</li>
<li>Data passed to the callback</li></ul>
<pre class="prettyprint">error_code = nfc_manager_set_activation_changed_cb(on_nfc_activation_changed, NULL);</pre>

<p>The code of the <span style="font-family: Courier New,Courier,monospace;">on_nfc_activation_changed</span> callback is simple and looks like this:<p>
<pre class="prettyprint">static void on_nfc_activation_changed(bool activated, void *user_data)
{
&nbsp;&nbsp;&nbsp;if (activated)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stderr, &quot;NFC activated&quot;);
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stderr, &quot;NFC not activated&quot;);
}</pre>
<p>So in our example, this callback only informs the user that the activation state has changed.<p></li>


<li><p>After this step, the <span style="font-family: Courier New,Courier,monospace;">nfc_manager_set_tag_filter()</span> function is used. It declares the tag filtering option. Use a bit operation of the type <span style="font-family: Courier New,Courier,monospace;">nfc_tag_filter_e</span> to specify the type of filtering. The default value is <span style="font-family: Courier New,Courier,monospace;">NFC_TAG_FILTER_ALL_ENABLE</span>, which means that all tag types are enabled.<p>
<pre class="prettyprint">nfc_manager_set_tag_filter(NFC_TAG_FILTER_ALL_ENABLE);</pre></li>

<li><p>You need to register callback functions to receive discovery notifications for tag, NDEF, peer-to-peer, secure element, and secure element transaction events. To register a callback function for receiving tag discovery notifications, use the <span style="font-family: Courier New,Courier,monospace;">nfc_manager_set_tag_discovered_cb()</span> function. The first argument is the <span style="font-family: Courier New,Courier,monospace;">on_nfc_tag_discovered()</span> callback function described later in the tutorial. The second argument is a user data parameter. In our case, that parameter is not needed and you can pass a <span style="font-family: Courier New,Courier,monospace;">NULL</span> value to the function. In the same way, register NDEF, peer-to-peer, secure element, and secure element transaction event notifications using:<p>
<ul><li>Use the <span style="font-family: Courier New,Courier,monospace;">nfc_manager_set_ndef_discovered_cb()</span> function to register an NDEF event notifications with the <span style="font-family: Courier New,Courier,monospace;">on_nfc_ndef_discovered_()</span> callback function</li>
<li><span style="font-family: Courier New,Courier,monospace;">nfc_manager_set_p2p_target_discovered_cb()</span> to register peer-to-peer event notifications with the <span style="font-family: Courier New,Courier,monospace;">on_nfc_p2p_target_discovered()</span> callback function</li>
<li><span style="font-family: Courier New,Courier,monospace;">nfc_manager_set_se_event_cb()</span> to register secure element event notifications with the <span style="font-family: Courier New,Courier,monospace;">on_nfc_se_event()</span> callback function</li>
<li><span style="font-family: Courier New,Courier,monospace;">nfc_manager_set_se_transaction_event_cb()</span> to register secure element transaction event notifications with the <span style="font-family: Courier New,Courier,monospace;">on_nfc_se_transaction_event()</span> callback function</li></ul>

<pre class="prettyprint">error_code = nfc_manager_set_tag_discovered_cb(on_nfc_tag_discovered, NULL);
if (NFC_ERROR_NONE != error_code) // Error occurred

error_code = nfc_manager_set_ndef_discovered_cb(on_nfc_ndef_discovered, NULL);
if (NFC_ERROR_NONE != error_code) // Error occurred

error_code = nfc_manager_set_p2p_target_discovered_cb(on_nfc_p2p_target_discovered,NULL);
if (NFC_ERROR_NONE != error_code) // Error occurred


error_code = nfc_manager_set_se_event_cb(on_nfc_se_event, NULL);
if (NFC_ERROR_NONE != error_code) // Error occurred

error_code = nfc_manager_set_se_transaction_event_cb(NFC_SE_TYPE_ESE, on_nfc_se_transaction_event,NULL);
if (NFC_ERROR_NONE != error_code) // Error occurred</pre></li>

<li><p>Check whether system handling for tag and target discovery is enabled or disabled. By default it is enabled. Use the <span style="font-family: Courier New,Courier,monospace;">nfc_manager_is_system_handler_enabled()</span> function to check the current state. If the function returns <span style="font-family: Courier New,Courier,monospace;">FALSE</span>, enable system handling using the <span style="font-family: Courier New,Courier,monospace;">nfc_manager_set_system_handler_enable()</span> function and pass the <span style="font-family: Courier New,Courier,monospace;">TRUE</span> value as an input parameter.<p>

<pre class="prettyprint">if (nfc_manager_is_system_handler_enabled() != true)
&nbsp;&nbsp;&nbsp;nfc_manager_set_system_handler_enable(true);</pre></li></ol>

<h3>Working with NFC Manually</h3>

<p>After initializing NFC, you can start using NFC on the device. You can connect to other devices, resulting in launching the code from the registered callbacks.</p> 


<h4 id="work" name="work">Working with NFC tags</h4>

<p>When a tag is discovered, the <span style="font-family: Courier New,Courier,monospace;">on_nfc_tag_discovered()</span> callback registered before is called. The first parameter of the function is the NFC discovered type. Second is a tag handle and the last is user data. In the described example, the <span style="font-family: Courier New,Courier,monospace;">on_nfc_tag_discovered()</span> callback prints out the information about the discovered tag.</p>

<p>At the beginning of this callback, the NFC discovered type is checked. It can be <span style="font-family: Courier New,Courier,monospace;">NFC_DISCOVERED_TYPE_ATTACHED</span> if the tag has connected to the device and <span style="font-family: Courier New,Courier,monospace;">NFC_DISCOVERED_TYPE_DETACHED</span> if the tag was detached.  If the tag is attached, you can print out information read from it.</p> 

<p>To get the type of the tag, the <span style="font-family: Courier New,Courier,monospace;">nfc_tag_get_type()</span> function must be called. It takes 2 parameters. The first one is the handle to the tag and the second is a pointer to a (<span style="font-family: Courier New,Courier,monospace;">nfc_tag_type_e</span>) variable, where the type of the tag is stored.</p>
<pre class="prettyprint">nfc_tag_get_type(tag, &amp;tag_type);</pre>
<p>You can also get the size of the NDEF message stored in the tag by calling the <span style="font-family: Courier New,Courier,monospace;">nfc_tag_get_ndef_size()</span> function. The parameters are similar to the ones described above, but instead of the <span style="font-family: Courier New,Courier,monospace;">tag_type</span> variable, the pointer is passed to an unsigned <span style="font-family: Courier New,Courier,monospace;">int</span> variable where the current size of the tag is stored.</p>
<pre class="prettyprint">nfc_tag_get_ndef_size(tag, &amp;size);</pre>

<p>The <span style="font-family: Courier New,Courier,monospace;">nfc_tag_get_maximum_ndef_size()</span> function can be used to get the maximum NDEF message size  that can be stored in the tag. It also takes 2 parameters, where the first one is a tag handle and the second is a pointer to an unsigned <span style="font-family: Courier New,Courier,monospace;">int</span> where the maximum size of the tag is stored.</p>
<pre class="prettyprint">nfc_tag_get_maximum_ndef_size(tag, &amp;maximum_ndef_bytes_size);</pre>

<p>After getting the basic tag information, retrieve all remaining tag information by calling the <span style="font-family: Courier New,Courier,monospace;">nfc_tag_foreach_information()</span> function. This function takes 3 parameters. The first one is the tag that is operated on. The second one is a callback that is called for each found pair of key and value in the tag. The last one is user data that can be passed to the callback, but as there is no need to pass any data, <span style="font-family: Courier New,Courier,monospace;">NULL</span> is passed.</p>
<pre class="prettyprint">error_code = nfc_tag_foreach_information(tag, on_nfc_tag_information_event, NULL);
	
if (NFC_ERROR_NONE != error_code) // Error occurred</pre>

<p>The <span style="font-family: Courier New,Courier,monospace;">on_nfc_tag_information_event()</span> callback in this tutorial is really simple. It just prints out the found keys and their values.</p>
<pre class="prettyprint">on_nfc_tag_information_event(const char *key,const unsigned char *value, int value_size, void *user_data)
{
&nbsp;&nbsp;&nbsp;fprintf(stderr, &quot;Title: %s Value %s\n&quot;, key, (char*)value);
&nbsp;&nbsp;&nbsp;return true;
}</pre>
<p><span style="font-family: Courier New,Courier,monospace;">true</span> is returned to continue the iteration over all other pairs of keys and values. If <span style="font-family: Courier New,Courier,monospace;">false</span> is returned, then the iteration stops.</p>

<p>After these actions, check the nfc tag filter and print it out. Doing this ensures us that the callback was called and informs us what kind of a tag filter is set right now. For example, if the callback has not printed any information about the tag, but it printed out that the tag filter is <span style="font-family: Courier New,Courier,monospace;">NFC_TAG_FILTER_ALL_DISABLE</span>, then you know that the filter needs to be set to the proper value to read the specific tag type. To check the current tag filter, you can use the <span style="font-family: Courier New,Courier,monospace;">nfc_manager_get_tag_filter()</span> function.</p>
<pre class="prettyprint">filter = nfc_manager_get_tag_filter();</pre>

<p>The last thing left in the described callback is the <span style="font-family: Courier New,Courier,monospace;">nfc_tag_read_ndef()</span> function. It enables reading the tag data. 3 parameters are used:</p>
<ul><li>Tag handle</li>
<li>Callback invoked when the reading is completed</li>
<li>User data passed to the callback</li></ul>

<pre class="prettyprint">error_code = nfc_tag_read_ndef(tag, on_nfc_tag_read_completed, NULL);
if (NFC_ERROR_NONE != error_code) // Error occurred</pre>


<p>After the tag message has been read, the <span style="font-family: Courier New,Courier,monospace;">on_nfc_tag_read_completed()</span> callback is called. It has 3 parameters:</p>
<ul><li><span style="font-family: Courier New,Courier,monospace;">error_code</span> – defining status of reading the message</li>
<li><span style="font-family: Courier New,Courier,monospace;">message</span> (<span style="font-family: Courier New,Courier,monospace;">nfc_ndef_message_h</span>) – message read from the tag</li>
<li><span style="font-family: Courier New,Courier,monospace;">user_data</span> – data passed to the callback, <span style="font-family: Courier New,Courier,monospace;">NULL</span> if no data need to be passed</li></ul>

<pre class="prettyprint">static void on_nfc_tag_read_completed(int error_code, nfc_ndef_message_h message, void *user_data)
{
&nbsp;&nbsp;&nbsp;if (!found_error(NFC_ERROR_NONE, &quot;nfc_manager_set_activation&quot;, error_code))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nfc_ndef_message_read_cb(clone_message(message));
}</pre>
<p>If there was no error (<span style="font-family: Courier New,Courier,monospace;">error_code == NFC_ERROR_NONE</span>), you can operate on the retrieved message. To present how to use other NFC API functionality, 2 additional functions have been presented. Firstly, clone the message by calling the <span style="font-family: Courier New,Courier,monospace;">clone_message()</span> function: </p>
<pre class="prettyprint">static nfc_ndef_message_h clone_message(nfc_ndef_message_h msg) 
{
&nbsp;&nbsp;&nbsp;unsigned char *rawdata;
&nbsp;&nbsp;&nbsp;unsigned int rawdata_size;
&nbsp;&nbsp;&nbsp;nfc_ndef_message_h msg_cp;
	
&nbsp;&nbsp;&nbsp;nfc_ndef_message_get_rawdata(msg, &amp;rawdata, &amp;rawdata_size);
&nbsp;&nbsp;&nbsp;nfc_ndef_message_create_from_rawdata(&msg_cp, rawdata, rawdata_size);
&nbsp;&nbsp;&nbsp;free(rawdata);
&nbsp;&nbsp;&nbsp;return msg_cp;
}</pre>
<p>As it can be seen, 2 NFC API functions are used here. The first one is the <span style="font-family: Courier New,Courier,monospace;">nfc_ndef_message_get_rawdata()</span> function. It gets a copy of the bytes array of the NDEF message. It takes 3 parameters:</p>
<ul><li>The handle to NDEF message</li>
<li><span style="font-family: Courier New,Courier,monospace;">[out] rawdata</span> – two dimensional bytes array</li>
<li><span style="font-family: Courier New,Courier,monospace;">[out] rawdata_size</span> – the size of bytes array </li></ul>
 
<p><span style="font-family: Courier New,Courier,monospace;">[out]</span> parameters are variables that must be passed to be fulfilled inside the called function. </p>
<p>In the end, <span style="font-family: Courier New,Courier,monospace;">rawdata</span> must be released with free().</p>

<p>The second function is <span style="font-family: Courier New,Courier,monospace;">nfc_ndef_message_create_from_rawdata()</span>, and it creates an NDEF message handle from raw serial bytes. Use it to create a copy of the message retrieved from the tag. 3 parameters need to be provided:</p>
<ul><li>[out] Handle to the message (<span style="font-family: Courier New,Courier,monospace;">nfc_ndef_message_h</span>)</li>
<li><span style="font-family: Courier New,Courier,monospace;">rawdata</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">rawdata_size</span></li></ul>


<p>Now let&#39;s discuss the second function prepared to show the functionality of the NFC API. It takes as a parameter a handle to the tag message. Pass the cloned message to it.</p>
<pre class="prettyprint">nfc_ndef_message_read_cb(clone_message(message));</pre>

<p>First, get the number of records stored in the tag message. To do this, use the <span style="font-family: Courier New,Courier,monospace;">nfc_ndef_message_get_record_count()</span> function. It needs the handle to the message that is operated on and the pointer to an integer which is fulfilled by the function with the number of records in the message.</p>
<pre class="prettyprint">error_code = nfc_ndef_message_get_record_count(message, &amp;count);
if (NFC_ERROR_NONE != error_code) // Error occurred</pre>

<p>Iterate through all the records in the message and get all information stored in each record. The first called function is <span style="font-family: Courier New,Courier,monospace;">nfc_ndef_message_get_record()</span>. This function gets a record from the message by index. It returns a pointer to the record so if you change the record, it directly affects the NDEF message.</p>
<pre class="prettyprint">error_code = nfc_ndef_message_get_record(message, i, &amp;rec);
if (NFC_ERROR_NONE != error_code) // Error occurred</pre>

<p>Parameters are:</p>
<ul><li>Handle to the NDEF message</li>
<li>Index of the record</li>
<li><span style="font-family: Courier New,Courier,monospace;">[out]</span> Handle to the record</li></ul>

<p>Now, when the pointer to the specific record exists,  get the record data:</p>

<ul><li>Record ID by calling <span style="font-family: Courier New,Courier,monospace;">nfc_ndef_record_get_id()</span>

<pre class="prettyprint">error_code = nfc_ndef_message_get_record(message, i, &amp;rec);
if (NFC_ERROR_NONE != error_code) // Error occurred</pre></li>

<li>Record type using the <span style="font-family: Courier New,Courier,monospace;">nfc_ndef_record_get_type()</span> function

<pre class="prettyprint">error_code = nfc_ndef_record_get_type(rec, &amp;type_str, &amp;type_len);
if (NFC_ERROR_NONE != error_code) // Error occurred</pre></li>

<li>Record TNF (Type Name Format) with the <span style="font-family: Courier New,Courier,monospace;">nfc_ndef_record_get_tnf()</span> function

<pre class="prettyprint">error_code = nfc_ndef_record_get_tnf(rec, &amp;tnf);
if (NFC_ERROR_NONE != error_code) // Error occurred</pre></li>

<li>Record payload by calling the <span style="font-family: Courier New,Courier,monospace;">nfc_ndef_record_get_payload()</span> function

<pre class="prettyprint">error_code = nfc_ndef_record_get_payload(record, &amp;payload, &amp;payload_len);
if (NFC_ERROR_NONE != error_code) // Error occurred</pre></li></ul>



<p>To get more information from the tag, specify what type of a tag message you are dealing with. If there is message with <span style="font-family: Courier New,Courier,monospace;">Type = &quot;T&quot;</span> and the TNF is <span style="font-family: Courier New,Courier,monospace;">NFC_RECORD_TNF_WELL_KNOWN</span>, then it is possible to get the following data:</p>

<ul><li>Record text with the <span style="font-family: Courier New,Courier,monospace;">nfc_ndef_record_get_text()</span> function

<pre class="prettyprint">error_code = nfc_ndef_record_get_text(record, &amp;text);
if (NFC_ERROR_NONE != error_code) // Error occurred</pre></li>

<li>Record text language code by using the <span style="font-family: Courier New,Courier,monospace;">nfc_ndef_record_get_langcode()</span> function

<pre class="prettyprint">error_code = nfc_ndef_record_get_langcode(record, &amp;language);
if (NFC_ERROR_NONE != error_code) // Error occurred</pre></li>

<li>Record text encoding type by calling <span style="font-family: Courier New,Courier,monospace;">nfc_ndef_record_get_encode_type()</span>

<pre class="prettyprint">error_code = nfc_ndef_record_get_encode_type(record, &amp;encode);
if (NFC_ERROR_NONE != error_code) // Error occurred</pre></li></ul>


<p>If there is a message with <span style="font-family: Courier New,Courier,monospace;">Type=&quot;U&quot;</span> and TNF is also <span style="font-family: Courier New,Courier,monospace;">NFC_RECORD_TNF_WELL_KNOWN</span>, can get the URI using the <span style="font-family: Courier New,Courier,monospace;">nfc_ndef_record_get_uri()</span> function:</p>

<pre class="prettyprint">error_code = nfc_ndef_record_get_uri(record, &amp;uri);
if (NFC_ERROR_NONE != error_code) // Error occurred</pre>


<p>Finally, if the TNF of the record is <span style="font-family: Courier New,Courier,monospace;">NFC_RECORD_TNF_MIME_MEDIA</span>, then it is possible to get the record mime type.</p>
<pre class="prettyprint">error_code = nfc_ndef_record_get_mime_type(record, &amp;mime);
if (NFC_ERROR_NONE != error_code) // Error occurred</pre>


<h4>Working with NFC NDEF Messages</h4>

<p>It is the same as described in working with the NFC tag NDEF message. In the registered callback <span style="font-family: Courier New,Courier,monospace;">on_nfc_ndef_discovered()</span>, get the number of records in the message and then iterate through those records. After getting the handles to those records, get the payloads of those records:</p> 
<pre class="prettyprint">static void on_nfc_ndef_discovered(nfc_ndef_message_h message, void *user_data) 
{
&nbsp;&nbsp;&nbsp;int count,i;
&nbsp;&nbsp;&nbsp;unsigned int size;
&nbsp;&nbsp;&nbsp;unsigned char * payload;
&nbsp;&nbsp;&nbsp;nfc_ndef_record_h record;

&nbsp;&nbsp;&nbsp;nfc_ndef_message_get_record_count(message, &amp;count);
&nbsp;&nbsp;&nbsp;fprintf(stderr,&quot;on_nfc_ndef_discovered %d\n&quot;,count);

&nbsp;&nbsp;&nbsp;for (i=0; i&lt;count; i++)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nfc_ndef_message_get_record(message, i, &amp;record);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nfc_ndef_record_get_payload (record, &amp;payload, &amp;size);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stderr,&quot;Record number : %d Payload: %s\n&quot;, i, payload);
&nbsp;&nbsp;&nbsp;}
}</pre>

<h4>Working with NFC P2P Target</h4>

<p>This section discusses the callback that is invoked on peer-to-peer target discovery. When the device is connected to some P2P target, it is possible to exchange NDEF data with that peer target. It allows:</p>
<ul><li>Sending NDEF messages</li>
<li>Receiving NDEF messages</li></ul>

<p>In this tutorial, our registered callback for such a connection is called <span style="font-family: Courier New,Courier,monospace;">on_nfc_p2p_target_discovered()</span>. It has the following parameters:</p>
<ul><li>The type of NFC discovery (<span style="font-family: Courier New,Courier,monospace;">nfc_discovered_type_e</span>)</li>
<li>The handle to the target</li>
<li>User data</li></ul>

<p>First, check the first parameter (<span style="font-family: Courier New,Courier,monospace;">type</span>). If the type is <span style="font-family: Courier New,Courier,monospace;">NFC_DISCOVERED_TYPE_ATTACHED</span>, then it means that the remote device was attached to the device. </p>
<pre class="prettyprint">if (type == NFC_DISCOVERED_TYPE_ATTACHED)
{
&nbsp;&nbsp;&nbsp;// Remote device is attached; execute code
}</pre>


<p>Use the <span style="font-family: Courier New,Courier,monospace;">nfc_p2p_set_data_received_cb()</span> function to register a callback that is invoked when any data from the connected target is received.</p>
<pre class="prettyprint">error_code = nfc_p2p_set_data_received_cb(target, on_nfc_p2p_read_completed, 0);
if (NFC_ERROR_NONE != error_code) // Error occurred</pre>

<p>The code of the registered <span style="font-family: Courier New,Courier,monospace;">on_nfc_p2p_read_completed()</span> callback is presented below:</p>
<pre class="prettyprint">static void on_nfc_p2p_read_completed(nfc_p2p_target_h target, nfc_ndef_message_h message, void *user_data)
{
&nbsp;&nbsp;&nbsp;int count;
&nbsp;&nbsp;&nbsp;fprintf(stderr,&quot;on_nfc_p2p_read_completed&quot;);

&nbsp;&nbsp;&nbsp;nfc_ndef_message_get_record_count(message, &amp;count);
&nbsp;&nbsp;&nbsp;nfc_ndef_message_read_cb(clone_message(message));
}</pre>

<p>After reading the message from the remote device, check its number of records using the <span style="font-family: Courier New,Courier,monospace;">nfc_ndef_message_get_record_count()</span> function and get more detailed info about the message by calling the <span style="font-family: Courier New,Courier,monospace;">nfc_ndef_message_read_cb()</span> function described earlier.</p>

<p>While having some other device connected through NFC, hand over the connection to some alternative carrier (AC), such as Bluetooth, Wi-Fi, or Wi-Fi Direct&trade;.</p> 

<p>Firstly, call the <span style="font-family: Courier New,Courier,monospace;">nfc_p2p_is_supported_ac_type()</span> function to find out which alternative carriers are supported by the device.</p> 
<pre class="prettyprint">nfc_ac_type_e ac = NFC_AC_TYPE_BT;

while(NFC_AC_TYPE_UNKNOWN != ac)
{
&nbsp;&nbsp;&nbsp;if (nfc_p2p_is_supported_ac_type(ac)) break;
&nbsp;&nbsp;&nbsp;ac++;
}</pre>

<p>Iterate through the known AC types and break the iteration after finding the first one that is supported. The supported AC type is stored in the <span style="font-family: Courier New,Courier,monospace;">ac</span> variable.</p>
<p>Now, make the connection handover by calling the <span style="font-family: Courier New,Courier,monospace;">nfc_p2p_connection_handover()</span> function.</p>
<pre class="prettyprint">if (NFC_AC_TYPE_UNKNOWN != ac)
&nbsp;&nbsp;&nbsp;nfc_p2p_connection_handover(target, ac, on_nfc_p2p_connection_handover_completed, NULL);</pre>
<p>The parameters are:</p>
<ul><li>Handle to the remote device</li>
<li>Preferred alternative carrier</li>
<li>Callback function to invoke after this function has completed
<p>It can be null if notification is not required.</p></li>
<li>User data to be passed to the callback function</li></ul>

<p>The <span style="font-family: Courier New,Courier,monospace;">on_nfc_p2p_connection_handover_completed()</span> callback in this tutorial only prints the alternative carrier data if no error occurs during the handover.</p>
<pre class="prettyprint">static void on_nfc_p2p_connection_handover_completed(int error_code, nfc_ac_type_e carrier, void * ac_data, int ac_data_size, void *user_data)
{
&nbsp;&nbsp;&nbsp;if (!found_error(NFC_ERROR_NONE, &quot;on_nfc_p2p_connection_handover_completed&quot;, error_code))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char *_data = (char *) malloc(sizeof(char) * (ac_data_size + 1));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strncpy(_data, (char *)ac_data, ac_data_size);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_data[ac_data_size] = &#39;\0&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stderr, &quot;AC: %s\n&quot;, _data);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(_data);
&nbsp;&nbsp;&nbsp;}
}</pre>

<h4>Working with NFC Secure Element</h4>

<p>The secure element event notification is received through the <span style="font-family: Courier New,Courier,monospace;">on_nfc_se_event()</span> function. The first parameter defines the event type. The second one is user data - in this case it is not used. Depending on the event type, you can take some additional actions.</p>
<pre class="prettyprint">static void on_nfc_se_event(nfc_se_event_e event, void *user_data) 
{
&nbsp;&nbsp;&nbsp;switch (event) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;case NFC_SE_EVENT_START_TRANSACTION:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// This event notifies the terminal host that it shall launch
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// an application associated with an NFC application in a
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// UICC (Universal Integrated Circuit Card) host
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stderr,&quot;NFC EVENT: &lt;br/&gt;Start Transaction&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;case NFC_SE_EVENT_END_TRANSACTION:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// This event notifies the terminal host that the current transaction
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// in process was ended
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stderr,&quot;NFC EVENT: &lt;br/&gt;End Transaction&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;case NFC_SE_EVENT_CONNECTIVITY:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// It is a ready signal to communicate UICC (Universal Integrated Circuit
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Card) with terminal host. \nUICC (Universal Integrated Circuit Card)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// creates a pipe and opens the pipe channel.\nThen it sends the signal
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// to terminal host or host controller
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stderr,&quot;NFC EVENT: &lt;br/&gt;Connectivity&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;case NFC_SE_EVENT_FIELD_ON:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// When the CLF (Contactless Front-end) detects 5ra RF field, the card
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// RF gate sends the event #NFC_SE_EVENT_FIELD_ON to the card
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// application gate.\nWhen there are multiple open card RF gates
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// the CLF shall send the #NFC_SE_EVENT_FIELD_ON on all open pipes
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// to these gates. Next the CLF starts the initialization
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// and anti-collision process as defined in ISO/IEC 14443-3 [6]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stderr,&quot;NFC EVENT: &lt;br/&gt;Field ON&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;case NFC_SE_EVENT_FIELD_OFF:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// When the CLF (Contactless Front-end) detects that the RF field
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// is off, the card RF gate shall send #NFC_SE_EVENT_FIELD_OFF to
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// the card application gate.\nWhen there are multiple open card RF
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// gates the CLF shall send the #NFC_SE_EVENT_FIELD_OFF to one gate
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// only
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stderr,&quot;NFC EVENT: &lt;br/&gt;Field OFF&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;case NFC_SE_EVENT_TRANSACTION:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// This event notifies that an external reader is trying to access a secure
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// element
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stderr,&quot;NFC EVENT: &lt;br/&gt;Remote Start Transaction&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;default:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stderr,&quot;NFC EVENT: &lt;br/&gt;DEFAULT:OTHER&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;}
} </pre>


<p>The secure element transaction event gives you 4 information parameters and user data. You can get the application ID (specified in ISO/IEC 7816-4) from the first parameter, size of aid from the second parameter, the parameter list (specified in ISO/IEC 8825-1) from the third parameter, and the size of the parameter from the next function input parameter.</p>
<pre class="prettyprint">static void on_nfc_se_transaction_event(nfc_se_type_e se_type,unsigned char *aid, int aid_size, unsigned char *param, int param_size, void *user_data)
{
&nbsp;&nbsp;&nbsp;fprintf(stderr,&quot;Secure Element(SIM/UICC(Universal Integrated Circuit Card))&lt;br/&gt;transaction event data&quot;);
}</pre>

<h2 id="get" name="get">Getting a Cached NFC Message</h2>
<p>To get a cached NFC message, you need to:</p>

<ol><li>Initialize NFC.
<p>To initialize NFC, the <span style="font-family: Courier New,Courier,monospace;">nfc_manager_initialize_sync()</span> function can be used, as shown in <a href="#init_NFC">Initializing NFC</a>. </p></li>
<li>Set the NFC tag filter.
<p>Setting the NFC tag filter as shown in <a href="#work">Working with NFC Tags</a>). Just as a reminder, setting the tag filter is possible by using the <span style="font-family: Courier New,Courier,monospace;">nfc_manager_set_tag_filter()</span> function.</p>
<pre class="prettyprint">nfc_manager_set_tag_filter(NFC_TAG_FILTER_ALL_ENABLE);</pre></li>
<li>Enable the NFC system handler.
<p>Before getting the cached message, enable the system handler:</p>
<pre class="prettyprint">if (nfc_manager_is_system_handler_enabled() != true)
&nbsp;&nbsp;&nbsp;nfc_manager_set_system_handler_enable(true);</pre></li>
<li>Get the cached message.
<p>Get the cached message by calling the <span style="font-family: Courier New,Courier,monospace;">nfc_manager_get_cached_message()</span> function. Pass a variable of the <span style="font-family: Courier New,Courier,monospace;">nfc_ndef_message_h</span> type, which is fulfilled with the cached message by the function.</p>
<pre class="prettyprint">nfc_ndef_message_h message = NULL;

error_code = nfc_manager_get_cached_message(&amp;message);
if (NFC_ERROR_NONE != error_code) // Error occurred</pre>
<p>After getting the message, get the detailed information from the message as it was described before. To do this, check whether there were any errors and whether the message is not <span style="font-family: Courier New,Courier,monospace;">NULL</span>.</p>
<pre class="prettyprint">if (message != NULL)
{
&nbsp;&nbsp;&nbsp;on_nfc_ndef_discovered(clone_message(message), NULL);
}</pre></li>
<li>Clean up at the application end.</li></ol>



  <h2>Where to Go Next</h2> 
  <ul> 
	<li><a href="net_tutorial.htm">Network Tutorials</a></li>
	<li><a href="../../guide/net/network.htm">Network Programming Guide</a></li> 
	<li><a href="../../../../org.tizen.mobile.native.apireference/group__CAPI__NETWORK__FRAMEWORK.html">Network API Reference</a></li>    
  </ul> 

  <div id="footer"> 
   <hr size="1" /> 
   <font size="1">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</font> 
  </div> 
  <!--start--> 
  <script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script> 
  <!--end-->  
 </body>
</html>