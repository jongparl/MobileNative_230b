<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
 <head> 
  <script type="text/javascript" src="../../snippet.js"></script> 
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
  <link href="../../styles.css" rel="StyleSheet" type="text/css" /> 
  <link href="../../snippet.css" rel="StyleSheet" type="text/css" /> 
  <title>Wi-Fi Tutorial</title> 
 </head> 
 <body onload="prettyPrint()"> 
  <!--<div id="banner">
Tizen</div>--> 
  <h1>Wi-Fi Tutorial</h1>

<p>This tutorial demonstrates how to use the Wi-Fi API. The functions contained in this module allow managing Wi-Fi and monitoring the state of Wi-Fi.</p>
<p>API functions and data types are defined in the <span style="font-family: Courier New,Courier,monospace">&lt;wifi.h&gt;</span> header. This header file has to be included in all applications that use the <a href="../../../../org.tizen.mobile.native.apireference/group__CAPI__NETWORK__WIFI__MODULE.html">Wi-Fi API</a>.</p>

<p>To learn about the Wi-Fi API features, see the <a href="../../guide/net/wi-fi.htm">Wi-Fi Programming Guide</a>.</p>

<p>This tutorial consists of the following parts:</p>

<ul><li><a href="#init">Initialization and Prerequisites</a><p>Initialize Wi-Fi for using all the Wi-Fi functions.</p></li>
	<li><a href="#activate">Activating a Wi-Fi Device</a><p>Activate the Wi-Fi device asynchronously.</p></li>
	<li><a href="#scan">Scanning for Access Points</a><p>Scan the nearby access points and retrieve information about them.</p></li>
	<li><a href="#connect">Connecting to a Specific Access Point</a><p>Connect to a specific access point after scanning.</p></li>
	<li><a href="#deactivate">Deactivating the Wi-Fi Device</a><p>Deactivate the Wi-Fi device asynchronously.</p>
</ul>
	
<h2 id="init" name="init">Initialization and Prerequisites</h2>
<p>To be able to use all the Wi-Fi functions, you must initialize Wi-Fi using the <span style="font-family: Courier New,Courier,monospace;">wifi_initialize()</span> function:</p>

<pre class="prettyprint">
int error_code;

error_code = wifi_initialize();
if (error_code != WIFI_ERROR_NONE)
&nbsp;&nbsp;&nbsp;return;
</pre>

<p>When Wi-Fi is no longer needed (or application is exiting), release Wi-Fi:</p>

<pre class="prettyprint">
wifi_deinitialize();
</pre>

<h2 id="activate" name="activate">Activating a Wi-Fi Device</h2>
<p>The Wi-Fi functions enable your application to activate and deactivate a local Wi-Fi device, and to check that Wi-Fi is activated:</p>

<ol><li>Activate a Wi-Fi device using the <span style="font-family: Courier New,Courier,monospace">wifi_activate()</span> function. After the <span style="font-family: Courier New,Courier,monospace">wifi_activate()</span> function is completed, the <span style="font-family: Courier New,Courier,monospace">__wifi_activated_cb()</span> function is invoked.
 
<pre class="prettyprint">
error_code = wifi_activate(__wifi_activated_cb, NULL);
</pre>

<p>Define the <span style="font-family: Courier New,Courier,monospace">__wifi_activated_cb()</span> function for a callback. In case of Wi-Fi device activation, an information message is printed using dlog util (or shown to the user in another way).</p>

<pre class="prettyprint">
static void __wifi_activated_cb(wifi_error_e result, void *user_data) 
{
&nbsp;&nbsp;&nbsp;if (result == WIFI_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Success to activate Wi-Fi device!&quot;);
}
</pre></li>

<li>Check the Wi-Fi connection using the <span style="font-family: Courier New,Courier,monospace">wifi_is_activated()</span> function. The parameter indicates, whether Wi-Fi is activated.

<pre class="prettyprint">
bool wifi_activated = false;
wifi_is_activated(&amp;wifi_activated);
if (wifi_activated)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Success to get Wi-Fi device state.&quot;);
}
else 
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Fail to get Wi-Fi device state.&quot;);
}
</pre></li></ol>

<h2 id="scan" name="scan">Scanning for Access Points</h2>
<p>Scan nearby access points. After scanning, print the result of the scan, such as the AP name and state:</p>

<ol><li>Scan nearby access points asynchronously. When the scan is finished, the <span style="font-family: Courier New,Courier,monospace">__scan_request_cb()</span> function is called.
 
<pre class="prettyprint">
wifi_scan(__scan_request_cb, NULL);
</pre></li>

<li>Define a callback function to be called when the scan is finished. In this tutorial, the callback is the <span style="font-family: Courier New,Courier,monospace">__scan_request_cb()</span> function. It invokes the <span style="font-family: Courier New,Courier,monospace">wifi_foreach_found_aps()</span> function for getting information on the found AP. The <span style="font-family: Courier New,Courier,monospace">wifi_foreach_found_aps()</span> function gets the result of the scan. The <span style="font-family: Courier New,Courier,monospace">__wifi_found_ap_cb()</span> function is called when you get the found access point repeatedly.
 
<pre class="prettyprint">
void __scan_request_cb(wifi_error_e error_code, void *user_data)
{
&nbsp;&nbsp;&nbsp;error_code = wifi_foreach_found_aps(__wifi_found_ap_cb, NULL);
&nbsp;&nbsp;&nbsp;if (error_code != WIFI_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wifi_foreach_found_aps(__wifi_found_ap_cb, NULL);
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Fail to scan&quot;);
}
</pre></li>

<li>Show the result of the scan using the <span style="font-family: Courier New,Courier,monospace">__wifi_found_ap_cb()</span>, which is invoked by <span style="font-family: Courier New,Courier,monospace">wifi_foreach_found_aps()</span>. In this tutorial, print the AP name and connection state.

<pre class="prettyprint">
bool __wifi_found_ap_cb(wifi_ap_h ap, void *user_data) 
{
&nbsp;&nbsp;&nbsp;int error_code = 0;
&nbsp;&nbsp;&nbsp;char *ap_name = NULL;
&nbsp;&nbsp;&nbsp;wifi_connection_state_e state;


&nbsp;&nbsp;&nbsp;error_code = wifi_ap_get_essid(ap, &amp;ap_name);
&nbsp;&nbsp;&nbsp;if (error_code != WIFI_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Fail to get AP name.&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;error_code = wifi_ap_get_connection_state(ap, &amp;state);
&nbsp;&nbsp;&nbsp;if (error_code != WIFI_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Fail to get state.&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;AP name : %s, state : %s&quot;, ap_name, print_state(state));
&nbsp;&nbsp;&nbsp;return true;
}

static const char* print_state(wifi_connection_state_e state) 
{
&nbsp;&nbsp;&nbsp;switch (state) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;case WIFI_CONNECTION_STATE_DISCONNECTED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return &quot;Disconnected&quot;;
&nbsp;&nbsp;&nbsp;case WIFI_CONNECTION_STATE_ASSOCIATION:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return &quot;Association&quot;;
&nbsp;&nbsp;&nbsp;case WIFI_CONNECTION_STATE_CONNECTED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return &quot;Connected&quot;;
&nbsp;&nbsp;&nbsp;case WIFI_CONNECTION_STATE_CONFIGURATION:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return &quot;Configuration&quot;;
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>You can get other information, including frequency, IP address, and security type. For more information, see the <a href="../../guide/net/wi-fi.htm">Wi-Fi Programming Guide</a>.</p></li></ol>

<h2 id="connect" name="connect">Connecting to a Specific Access Point</h2>
<p>Make a connection using a specific access point:</p>

<ol><li>Select an access point.
<p>Check, whether Wi-Fi is activated using the <span style="font-family: Courier New,Courier,monospace">wifi_is_activated()</span> function, and then receive the specific AP name from the user. Call the <span style="font-family: Courier New,Courier,monospace">wifi_foreach_found_aps()</span> function to compare the AP name with the result of the scan and connecting to the AP.</p>

<pre class="prettyprint">
char ap_name[33];
bool state = false;

wifi_is_activated(&amp;state);
if (state == false)
&nbsp;&nbsp;&nbsp;return -1;
dlog_print(DLOG_INFO, LOG_TAG, &quot;Input a part of AP name to connect : &quot;);
error_code = scanf(&quot;%32s&quot;, ap_name);

error_code = wifi_foreach_found_aps(__found_connect_ap_cb, ap_name);
if (error_code != WIFI_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Fail to connect (canâ€™t get AP list)&quot;);
&nbsp;&nbsp;&nbsp;return -1;
}

dlog_print(DLOG_INFO, LOG_TAG, &quot;Connection step finished&quot;);
</pre></li>

<li>Make a connection with an access point.
<p>The <span style="font-family: Courier New,Courier,monospace">wifi_foreach_found_aps()</span> function called above invokes a callback function, which is <span style="font-family: Courier New,Courier,monospace">__found_connect_ap_cb()</span>. Define the <span style="font-family: Courier New,Courier,monospace">__found_connection_ap_cb()</span> callback. This function compares <span style="font-family: Courier New,Courier,monospace">user_data</span> (the AP name from the user input) with the name of the found AP. If it is correct, the function checks whether the AP requires a passphrase. You can set the passphrase using the <span style="font-family: Courier New,Courier,monospace">wifi_ap_set_passphrase()</span> function.</p> 
<p>Finally, you can connect to a specific AP using <span style="font-family: Courier New,Courier,monospace">wifi_connect()</span>.</p>

<pre class="prettyprint">
static bool __found_connect_ap_cb(wifi_ap_h ap, void *user_data) 
{
&nbsp;&nbsp;&nbsp;int error_code = 0;
&nbsp;&nbsp;&nbsp;char *ap_name = NULL;
&nbsp;&nbsp;&nbsp;char *ap_name_part = (char*)user_data;

&nbsp;&nbsp;&nbsp;error_code = wifi_ap_get_essid(ap, &amp;ap_name);
&nbsp;&nbsp;&nbsp;if (error_code != WIFI_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Fail to get AP name&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (strstr(ap_name, ap_name_part) != NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bool required = false;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (wifi_ap_is_passphrase_required(ap, &amp;required) == WIFI_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Passphrase required: %s&quot;, required ? &quot;True&quot; : &quot;False&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Fail to get Passphrase required&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (required) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char passphrase[100];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Input passphrase for %s :&quot;, ap_name);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error_code = scanf(&quot;99%s&quot;, passphrase);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error_code = wifi_ap_set_passphrase(ap, passphrase);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (error_code != WIFI_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Fail to set passphrase&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error_code = wifi_connect(ap, __connected_cb, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (error_code != WIFI_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Fail to connection request&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Success to connection request&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(ap_name);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;free(ap_name);
&nbsp;&nbsp;&nbsp;return true;
}
</pre></li>

<li>Provide a notification about the result of the connection.
<p>The <span style="font-family: Courier New,Courier,monospace">wifi_connect()</span> function called earlier invokes the <span style="font-family: Courier New,Courier,monospace">__connected_cb()</span> function. With this function, you can provide the result of the connection.

<pre class="prettyprint">
static void __connected_cb(wifi_error_e result, void* user_data) 
{
&nbsp;&nbsp;&nbsp;if (result == WIFI_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Wi-Fi Connection Succeeded&quot;);
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Wi-Fi Connection Failed!&quot;);
}
</pre></li></ol>

<h2 id="deactivate" name="deactivate">Deactivating the Wi-Fi Device</h2>
<p>When Wi-Fi is no longer needed (or the application is exiting), power off the Wi-Fi device using the <span style="font-family: Courier New,Courier,monospace">wifi_deactivate()</span> function.</p>
<pre class="prettyprint">
wifi_deactivate(NULL, NULL);
</pre>

  <h2>Where to Go Next</h2> 
  <ul> 
	<li><a href="net_tutorial.htm">Network Tutorials</a></li>
	<li><a href="../../guide/net/wi-fi.htm">Wi-Fi Programming Guide</a></li> 
	<li><a href="../../../../org.tizen.mobile.native.apireference/group__CAPI__NETWORK__WIFI__MODULE.html">Wi-Fi API Reference</a></li>    
  </ul> 


  <div id="footer"> 
   <hr size="1" /> 
   <font size="1">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</font> 
  </div> 

  <script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script> 
 
 </body>
</html>
