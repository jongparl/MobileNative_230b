<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
 <head> 
  <script type="text/javascript" src="../../snippet.js"></script> 
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
  <link href="../../styles.css" rel="StyleSheet" type="text/css" /> 
  <link href="../../snippet.css" rel="StyleSheet" type="text/css" /> 
  <title>Playlist Tutorial</title> 
 </head> 
 <body onload="prettyPrint()"> 

  <h1>Playlist Tutorial</h1> 

<p>This tutorial demonstrates how you can use the <a href="../../../../org.tizen.mobile.native.apireference/group__CAPI__CONTENT__MEDIA__PLAYLIST__MODULE.html">Media Playlist API</a>. Functions contained in this module provide access to the database containing stored playlists.</p>
<p>API functions and data types are defined in the <span style="font-family: Courier New,Courier,monospace">&lt;media_content.h&gt;</span> header. This header file has to be included in all applications that use the Media Content Playlist API.</p>

<p>To learn about the Media Playlist API features, see the <a href="../../guide/content/content.htm">Content Programming Guide</a>.</p>

<p>This tutorial consists of the following parts:</p>
	<ul>
		<li><a href="#init">Initialization and Prerequisites</a></li>
		<li><a href="#manage">Managing Playlists</a>
		<p>Add playlists to the database, search them, and retrieve information about them.</p></li>

   </ul>  


 <h2 id="init" name="init">Initialization and Prerequisites</h2>
<p>To use the playlists:</p>
<ol><li><p>Included the <span style="font-family: Courier New,Courier,monospace">&lt;media_content.h&gt;</span> file in your application.</p></li>

<li><p>Establish a connection to the database:</p>
<pre class="prettyprint">
media_content_connect();
</pre></li></ol>
 <h2 id="manage" name="manage">Managing Playlists</h2>
<p>To create and insert a playlist to the database, perform a search on existing records, and handle the found items:</p>


<ol><li>Insert a record to the database.
<ol><li><p>To operate on the database, it has to contain records. Add a new playlist to the database with <span style="font-family: Courier New,Courier,monospace">media_playlist_insert_to_db()</span>. It returns a handle to the newly created record.</p>
<pre class="prettyprint">media_playlist_h playlist = NULL;
filter_h audio_filter = NULL;
GList *media_id_list = NULL; // Include glib.h
int media_count;
int start_position = -1;
int count = -1;
int x;
int id;
int ret;

// Create the playlist
media_playlist_insert_to_db(&quot;playlist_for_tutorial&quot;, &amp;playlist);
</pre></li>

<li><p>To fill a playlist with data, register the existing media in the database with <span style="font-family: Courier New,Courier,monospace">media_content_scan_file()</span>. Then you can check the media database size with <span style="font-family: Courier New,Courier,monospace">media_info_get_media_count_from_db()</span> and allocate the required amount of space. The callback function registered with <span style="font-family: Courier New,Courier,monospace">media_info_foreach_media_from_db()</span> returns a list of media IDs.</p>

<p>The specified media objects are added to the playlist with <span style="font-family: Courier New,Courier,monospace">media_playlist_add_media()</span>.</p>
<pre class="prettyprint">
// This is an example path, change it in your test environment
media_content_scan_file(&quot;/opt/usr/media/Sounds/Over the horizon.mp3&quot;); 

media_info_get_media_count_from_db(audio_filter, &amp;media_count); 

media_info_foreach_media_from_db(audio_filter, _media_info_cb, &amp;media_id_list); 

if (media_count &gt; 0) 
{
&nbsp;&nbsp;&nbsp;for (x = 0; x &lt; media_count; x++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char *media_id = (char*)g_list_nth_data(media_id_list, x);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = media_playlist_add_media (playlist, media_id);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;free(media_id);
}</pre></li>

<li><p>In the callback function, cast the user data to a proper type, and copy the media ID:</p>

<pre class="prettyprint">bool _media_info_cb(media_info_h media, void *user_data)
{
&nbsp;&nbsp;&nbsp;char *data = NULL;
&nbsp;&nbsp;&nbsp;char *id = NULL;

&nbsp;&nbsp;&nbsp;if (media != NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GList **list = (GList**)user_data; // include glib.h

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;media_info_get_media_id(media, &amp;id);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Media found: %s\n&quot;, id);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data = strdup(id);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*list = g_list_append(*list, data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(id);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}</pre></li></ol></li>



<li>Perform a search.
<p>To select any records from the database, you must know their ID or perform a search on the records.</p>

<ol><li>
<p>To perform  a search, create a filter with the <span style="font-family: Courier New,Courier,monospace">media_filter_create()</span> function, and use the <span style="font-family: Courier New,Courier,monospace">media_filter_set_offset()</span> function to define a section of the database on which the search is performed. Setting a start position and count for the search means that the whole database is not checked.</p>
<pre class="prettyprint">
media_filter_create(&amp;audio_filter);

media_filter_set_offset(audio_filter, start_position, count);
</pre></li>
<li><p>To start a search, use the <span style="font-family: Courier New,Courier,monospace">media_playlist_foreach_playlist_from_db()</span> function. To use this function, provide an existing filter and a callback function to be used each time a record is found.</p>

<pre class="prettyprint">
media_playlist_foreach_playlist_from_db(audio_filter, playlist_list_cb,  NULL);
</pre>

<p>You can define the playlist name with <span style="font-family: Courier New,Courier,monospace">media_playlist_set_name()</span>.</p></li></ol></li>

<li>Handle the found records.

<ol><li><p>When a record is found, a callback function is invoked. A handle to the record is passed as a playlist function parameter.</p> 
<pre class="prettyprint">static bool playlist_list_cb(media_playlist_h playlist, void* user_data) 
{
&nbsp;&nbsp;&nbsp;char *name = NULL;
&nbsp;&nbsp;&nbsp;int playlist_id = 0;
&nbsp;&nbsp;&nbsp;int count = 0;
</pre></li>

<li><p>Access the record details with the <span style="font-family: Courier New,Courier,monospace">media_playlist_get_name()</span> and <span style="font-family: Courier New,Courier,monospace">media_playlist_get_playlist_id()</span> functions.</p>

<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;media_playlist_get_name(playlist, &amp;name);
&nbsp;&nbsp;&nbsp;media_playlist_get_playlist_id(playlist,&amp;playlist_id);
</pre></li>

<li><p>After reading the playlist ID, execute 2 searches on it. The first search filter operates on all records on the playlist, and the second one works only on the first 10 records. Destroy the filters after all operations. </p>

<p>The <span style="font-family: Courier New,Courier,monospace">media_playlist_foreach_media_from_db()</span> function invokes a callback for each record matching the filter. The search is performed on a playlist with the specified ID.</p>

<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;filter_h temp_filter = NULL;
&nbsp;&nbsp;&nbsp;media_filter_create(&amp;temp_filter);

&nbsp;&nbsp;&nbsp;media_filter_set_offset(temp_filter, -1, -1);

&nbsp;&nbsp;&nbsp;media_playlist_get_media_count_from_db(playlist_id, temp_filter, &amp;count);
&nbsp;&nbsp;&nbsp;filter_h audio_fltr;

&nbsp;&nbsp;&nbsp;media_filter_create(&amp;audio_fltr);

&nbsp;&nbsp;&nbsp;media_filter_set_offset(audio_fltr, 0, 10);

&nbsp;&nbsp;&nbsp;media_playlist_foreach_media_from_db(playlist_id, audio_fltr, audio_list_cb, NULL);

&nbsp;&nbsp;&nbsp;media_filter_destroy(audio_fltr);
&nbsp;&nbsp;&nbsp;media_filter_destroy(temp_filter);

&nbsp;&nbsp;&nbsp;return true;
}</pre></li>

<li><p>The callback function operates on the records the same way as before. To get the media info, use the following functions:</p>
<ul><li><span style="font-family: Courier New,Courier,monospace">media_info_get_audio()</span></li>
<li><span style="font-family: Courier New,Courier,monospace">media_info_get_media_id()</span></li>
<li><span style="font-family: Courier New,Courier,monospace">media_info_get_size()</span></li></ul>

<pre class="prettyprint">static bool audio_list_cb(int playlist_member_id, media_info_h media_hndl, void *user_data) 
{
&nbsp;&nbsp;&nbsp;char * id;
&nbsp;&nbsp;&nbsp;media_info_get_media_id(media_hndl,&amp;id);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Media on the playlist: %s\n&quot;, id);
&nbsp;&nbsp;&nbsp;free(id);
&nbsp;&nbsp;&nbsp;return true;
}</pre></li></ol></li>


<li>Clean up.
<p>After all operations, delete the playlist from the database to avoid creating useless records. In addition, destroy all filters and handles to records. At the end, close the connection to the database.</p>
<pre class="prettyprint">media_playlist_get_playlist_id(playlist, &amp;id);
media_playlist_delete_from_db(id);

media_playlist_destroy(playlist);

media_filter_destroy(audio_filter);
media_content_disconnect();</pre></li></ol>

    <h2>Where to Go Next</h2> 
  <ul> 
	<li><a href="content_tutorial.htm">Content Tutorials</a></li>
	<li><a href="../../guide/content/content.htm">Content Programming Guide</a></li> 
	<li><a href="../../../../org.tizen.mobile.native.apireference/group__CAPI__CONTENT__MEDIA__PLAYLIST__MODULE.html">Media Playlist API Reference</a></li>    
  </ul> 
  
  <div id="footer"> 
   <hr size="1" /> 
   <font size="1">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</font> 
  </div> 
  <!--start--> 
  <script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script> 
  <!--end-->  
 </body>
</html>