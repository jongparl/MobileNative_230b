<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
 <head> 
  <script type="text/javascript" src="../../snippet.js"></script> 
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
  <link href="../../styles.css" rel="StyleSheet" type="text/css" /> 
  <link href="../../snippet.css" rel="StyleSheet" type="text/css" />
<title>Multipoint Touch Tutorial</title> 
 </head> 
 <body onload="prettyPrint()"> 
  <!--<div id="banner">
Tizen</div>--> 
  <h1>Multipoint Touch Tutorial</h1>

<p>This tutorial demonstrates how you can use the <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> to paint on a canvas and track touch events.</p>
<p>This sample is a fully functional application able to track multiple simultaneous clicks. For every click, a black rectangle spot is drawn on the screen. This way it is easy to test the multipoint touch operation with the application.</p>

<p>To learn about the <a href="../../../../org.tizen.mobile.native.apireference/group__CAPI__UI__FRAMEWORK.html">UI</a> API features, see the <a href="../../guide/ui/ui.htm">UI Programming Guide</a>.</p>
<p>This tutorial consists of the following parts:</p>
<ul>
<li><a href="#init">Initialization and Prerequisites</a></li>
<li><a href="#canvas">Handling the Canvas</a>
	<p>Paint on a canvas.</p></li>
<li><a href="#touch">Managing Touch Events</a>
	<p>Manage and track different touch events.</p></li>

</ul>
 
<h2 id="init" name="init">Initialization and Prerequisites</h2>
<p>Initialization is implemented in the <span style="font-family: Courier New,Courier,monospace">multitouch.c</span> file.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">appdata</span> structure includes <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> pointers, a list, and a Boolean flag.</p>
<pre class="prettyprint">
typedef struct appdata 
{
&nbsp;&nbsp;&nbsp;Evas_Object *win;
&nbsp;&nbsp;&nbsp;Evas_Object *conform;
&nbsp;&nbsp;&nbsp;Evas_Object *nf;
&nbsp;&nbsp;&nbsp;Evas_Object *button;
&nbsp;&nbsp;&nbsp;Evas_Object *box;
&nbsp;&nbsp;&nbsp;Evas_Object *rect;
&nbsp;&nbsp;&nbsp;Evas_Object *label;

&nbsp;&nbsp;&nbsp;// List of mouse spots
&nbsp;&nbsp;&nbsp;Eina_List *spots;

&nbsp;&nbsp;&nbsp;// Flag for checking the mouse down event
&nbsp;&nbsp;&nbsp;Eina_Bool down; 
} 
appdata_s;
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">main()</span> function initializes event callbacks and calls the <span style="font-family: Courier New,Courier,monospace">app_efl_main()</span> function to start the EFL application.</p>
<pre class="prettyprint">
int
main(int argc, char *argv[])
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = {0,};
&nbsp;&nbsp;&nbsp;app_event_callback_s event_callback;

&nbsp;&nbsp;&nbsp;event_callback.create = app_create;
&nbsp;&nbsp;&nbsp;event_callback.terminate = app_terminate;
&nbsp;&nbsp;&nbsp;event_callback.pause = app_pause;
&nbsp;&nbsp;&nbsp;event_callback.resume = app_resume;
&nbsp;&nbsp;&nbsp;event_callback.service = app_service;
&nbsp;&nbsp;&nbsp;event_callback.language_changed = app_language_changed;

&nbsp;&nbsp;&nbsp;event_callback.low_memory = NULL;
&nbsp;&nbsp;&nbsp;event_callback.low_battery = NULL;
&nbsp;&nbsp;&nbsp;event_callback.device_orientation = NULL;
&nbsp;&nbsp;&nbsp;event_callback.region_format_changed = NULL;

&nbsp;&nbsp;&nbsp;memset(&amp;ad, 0x0, sizeof(appdata_s));

&nbsp;&nbsp;&nbsp;int ret = app_efl_main(&amp;argc, &amp;rgv, &amp;event_callback, &amp;ad);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LOGE(&quot;app_efl_main() is failed. err = %d&quot;, ret);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return ret;
}
</pre>

<p>The following figure illustrates the Multipoint Touch.</p>

  <p class="figure">Figure: Multipoint Touch screens</p> 
  <p style="text-align:center;"><img alt="Multipoint Touch screens" src="../../images/multipoint_touch.png" /></p> 
  
  <h2 id="canvas" name="canvas">Handling the Canvas</h2>

 <p>The <span style="font-family: Courier New,Courier,monospace">create_base_gui()</span> function creates base GUI elements including Naviframe and the Naviframe button. Naviframe includes each view screen as an item, which in turn includes the title and a button which clears spots when clicked.</p> 

<pre class="prettyprint">static void
create_base_gui(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Elm_Object_Item *nf_it;

&nbsp;&nbsp;&nbsp;// Naviframe
&nbsp;&nbsp;&nbsp;ad-&gt;nf = elm_naviframe_add(ad-&gt;conform);
&nbsp;&nbsp;&nbsp;elm_object_content_set(ad-&gt;conform, ad-&gt;nf);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;nf);

&nbsp;&nbsp;&nbsp;// Button
&nbsp;&nbsp;&nbsp;ad-&gt;button = elm_button_add(ad-&gt;nf);
&nbsp;&nbsp;&nbsp;elm_object_text_set(ad-&gt;button, &quot;Clear&quot;);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(ad-&gt;button, &quot;clicked&quot;, button_clicked_cb, ad);

&nbsp;&nbsp;&nbsp;// Create main view
&nbsp;&nbsp;&nbsp;ad-&gt;box = create_main_view(ad);
&nbsp;&nbsp;&nbsp;nf_it = elm_naviframe_item_push(ad-&gt;nf, &quot;Multi-point Touch&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL, NULL, ad-&gt;box, NULL);
&nbsp;&nbsp;&nbsp;elm_object_item_part_content_set(nf_it, &quot;title_right_btn&quot;, ad-&gt;button);
} 
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">create_main_view()</span> function creates the main view including the label and an event rectangle. </p> 
<p>The label displays information on mouse event status and coordinates (x, y positions). The event rectangle is received completely through mouse (touch) events. To show 2 elements in a Naviframe content area, a container combining those elements is necessary. A box container functions in that role. The label and rectangle pack end the box and the box is embedded into the Naviframe content area.</p> 

<pre class="prettyprint">static Evas_Object *
create_main_view(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *box;

&nbsp;&nbsp;&nbsp;// Box
&nbsp;&nbsp;&nbsp;box = elm_box_add(ad-&gt;nf);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(box, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_show(box);

&nbsp;&nbsp;&nbsp;// Label
&nbsp;&nbsp;&nbsp;ad-&gt;label = elm_label_add(box);
&nbsp;&nbsp;&nbsp;elm_object_text_set(ad-&gt;label, &quot;None&quot;);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;label, EVAS_HINT_EXPAND, 0);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(ad-&gt;label, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;evas_object_repeat_events_set(ad-&gt;label, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_box_pack_end(box, ad-&gt;label);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;label);

&nbsp;&nbsp;&nbsp;// Event Rect
&nbsp;&nbsp;&nbsp;ad-&gt;rect = evas_object_rectangle_add(evas_object_evas_get(box));
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;rect, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(ad-&gt;rect, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;evas_object_color_set(ad-&gt;rect, 204, 204, 204, 255);
&nbsp;&nbsp;&nbsp;evas_object_repeat_events_set(ad-&gt;rect, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_box_pack_end(box, ad-&gt;rect);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;rect);
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">create_spot()</span> function creates a rectangle, resizes the rectangle according to received size input, and moves the rectangle according to received coordinates (x, y positions) input.</p>

<pre class="prettyprint">Evas_Object *
create_spot(Evas_Object *parent, Evas_Coord x, Evas_Coord y, int size)
{
&nbsp;&nbsp;&nbsp;Evas_Object *spot;
&nbsp;&nbsp;&nbsp;spot = evas_object_rectangle_add(evas_object_evas_get(parent));
&nbsp;&nbsp;&nbsp;evas_object_resize(spot, size, size);
&nbsp;&nbsp;&nbsp;// Adjust x, y positions to be center of object
&nbsp;&nbsp;&nbsp;evas_object_move(spot, x - (size/2), y - (size/2));
&nbsp;&nbsp;&nbsp;evas_object_show(spot);
&nbsp;&nbsp;&nbsp;return spot;
}
</pre>

<p>The rectangle object is stored in <span style="font-family: Courier New,Courier,monospace">Eina_List (ad-&gt;spots)</span> for managing other functions. The <span style="font-family: Courier New,Courier,monospace">button_clicked_cb()</span> function removes all <span style="font-family: Courier New,Courier,monospace">evas_objects</span> into the <span style="font-family: Courier New,Courier,monospace">ad-&gt;spots</span> list, meaning all spot rectangles are cleared.</p>

<pre class="prettyprint">static void
button_clicked_cb(void *data, Evas *evas, Evas_Object *object, void *event_info)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;Evas_Object *spot;

&nbsp;&nbsp;&nbsp;EINA_LIST_FREE(ad->spots, spot)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(spot);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;spot = NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;elm_object_text_set(ad->label, "Clear");
}
</pre>

<h2 id="touch" name="touch">Managing Touch Events</h2>

<p>On the bottom of the <span style="font-family: Courier New,Courier,monospace">create_main_view()</span> function, event callbacks are added to the event rectangle. An event callback is added using the <span style="font-family: Courier New,Courier,monospace">evas_object_event_callback_add()</span> function.</p>

<p>The following touch event types are supported:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_DOWN</span>: This event is called when the given object receives the mouse down event.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_UP</span>: This event is called when the given object receives the mouse up event.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_MOVE</span>: This event is called when the given object receives the mouse move event.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MULTI_DOWN</span>: This event is called when the given object has already received the mouse down event and receives the multi-mouse down event.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MULTI_UP</span>: This event is called when the given object receives the multi-mouse up event. </li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MULTI_MOVE</span>: This event is called when the given object receives the multi-mouse move event.</li>
</ul>
<p>If the given object receives a mouse event, a callback function is called, and event information, such as coordinates (x, y positions) is passed. The <span style="font-family: Courier New,Courier,monospace">mousemove_cb()</span> function sets the mouse status, positions text in the label, and draws a spot rectangle. To distinguish down and up positions, set different colors for the down and up rectangles.</p>

<pre class="prettyprint">
static void
mousemove_cb(void *data, Evas *evas, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;Evas_Object *spot;
&nbsp;&nbsp;&nbsp;char buf[1024];
&nbsp;&nbsp;&nbsp;Evas_Event_Mouse_Move *ev = event_info;
&nbsp;&nbsp;&nbsp;Evas_Coord x = ev-&gt;cur.canvas.x;
&nbsp;&nbsp;&nbsp;Evas_Coord y = ev-&gt;cur.canvas.y;
&nbsp;&nbsp;&nbsp;int size = (int) 5 * elm_config_scale_get();

&nbsp;&nbsp;&nbsp;if (!ad-&gt;down)&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;snprintf(buf, sizeof(buf), &quot;Mouse Move, %d, %d&quot;, x, y);
&nbsp;&nbsp;&nbsp;elm_object_text_set(ad-&gt;label, buf);

&nbsp;&nbsp;&nbsp;// Draw spot on event position
&nbsp;&nbsp;&nbsp;spot = create_spot(ad-&gt;rect, x, y, size);
&nbsp;&nbsp;&nbsp;evas_object_color_set(spot, 0, 0, 0, 255);
&nbsp;&nbsp;&nbsp;ad-&gt;spots= eina_list_append(ad-&gt;spots, spot);
}
</pre>

  <h2>Where to Go Next</h2> 
  <ul> 
   <li><a href="ui_tutorial.htm">UI Tutorials</a></li> 
   <li><a href="../../guide/ui/ui.htm">UI Programming Guide</a></li>
   <li><a href="../../../../org.tizen.mobile.native.apireference/group__CAPI__UI__FRAMEWORK.html">UI API Reference</a></li>
  </ul> 

  <div id="footer"> 
   <hr size="1" /> 
   <font size="1">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</font> 
  </div> 
  <!--start--> 
  <script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script> 
  <!--end-->  
 </body>
</html>