<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
 <head> 
  <script type="text/javascript" src="../../snippet.js"></script> 
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
  <link href="../../styles.css" rel="StyleSheet" type="text/css" /> 
  <link href="../../snippet.css" rel="StyleSheet" type="text/css" /> 
  <title>Runtime Information Tutorial</title> 
 </head> 
 <body onload="prettyPrint()"> 
  <!--<div id="banner">
Tizen</div>--> 
  <h1>Runtime Information Tutorial</h1>
<p>This tutorial demonstrates how to use the <a href="../../../../org.tizen.mobile.native.apireference/group__CAPI__SYSTEM__RUNTIME__INFO__MODULE.html">Runtime Information API</a>. The functions contained in this module enable you to obtain runtime information, containing miscellaneous system preferences.</p>
<p>API functions and data types are defined in the <span style="font-family: Courier New,Courier,monospace">runtime_info.h</span> header. This header file must be included in all applications that use the Runtime Information API.</p>

<p>To learn more about the features of the Runtime Information API, see the <a href="../../guide/system/runtime_info.htm">Runtime Information Programming Guide</a>.</p>

<p>This tutorial consists of the following use cases:</p>

<ul>
	<li><a href="#get">Getting Runtime Information</a>
	<p>Get runtime information.</p></li>
	<li><a href="#monitor">Monitoring Runtime Information Changes</a><p>Register a callback function for a specific change in the runtime information.</p>
</ul>
	
<h2 id="get" name="get">Getting Runtime Information</h2>
<p>Runtime information consists of key, value pairs.</p>

<ol><li>Check whether Bluetooth is enabled.
<p>Use the <span style="font-family: Courier New,Courier,monospace">RUNTIME_INFO_KEY_BLUETOOTH_ENABLED</span> key to check whether Bluetooth is enabled. The type of the value is <span style="font-family: Courier New,Courier,monospace">bool</span>, and the <span style="font-family: Courier New,Courier,monospace">runtime_info_get_value_bool()</span> function is used for the information.</p>
	
<pre class="prettyprint">
#include &lt;stdbool.h&gt;
#include &lt;runtime_info.h&gt;
void func(void)
{
&nbsp;&nbsp;&nbsp;bool value;
&nbsp;&nbsp;&nbsp;int ret;

&nbsp;&nbsp;&nbsp;ret = runtime_info_get_value_bool(RUNTIME_INFO_KEY_BLUETOOTH_ENABLED, &amp;value);
&nbsp;&nbsp;&nbsp;if (ret != RUNTIME_INFO_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Bluetooth: %s&quot;, value ? &quot;Enabled&quot; : &quot;Disabled&quot;);
}
</pre></li>
<li>Get the Wi-Fi status.
<p>Use the <span style="font-family: Courier New,Courier,monospace">RUNTIME_INFO_KEY_WIFI_STATUS</span> key to get the Wi-Fi status. The type of the value is <span style="font-family: Courier New,Courier,monospace">integer</span>, and the <span style="font-family: Courier New,Courier,monospace">runtime_info_get_value_int()</span> function is used for the information.</p>
	
<pre class="prettyprint">
#include &lt;runtime_info.h&gt;

void func(void)
{
&nbsp;&nbsp;&nbsp;int value;
&nbsp;&nbsp;&nbsp;int ret;

&nbsp;&nbsp;&nbsp;ret = runtime_info_get_value_int(RUNTIME_INFO_KEY_WIFI_STATUS, &amp;value);
&nbsp;&nbsp;&nbsp;if (ret != RUNTIME_INFO_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Wi-Fi status: %d&quot;, value);
&nbsp;&nbsp;&nbsp;switch (value)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;case RUNTIME_INFO_WIFI_STATUS_DISABLED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Wi-Fi is disabled 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;case RUNTIME_INFO_WIFI_STATUS_UNCONNECTED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Wi-Fi is disconnected 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;case RUNTIME_INFO_WIFI_STATUS_CONNECTED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Wi-Fi is connected 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;}
}
</pre></li></ol>

<h2 id="monitor" name="monitor">Monitoring Runtime Information Changes</h2>
<p>Applications can be notified about changes in the runtime information. The <span style="font-family: Courier New,Courier,monospace">runtime_info_set_changed_cb()</span> and <span style="font-family: Courier New,Courier,monospace">runtime_info_unset_changed_cb()</span> functions are used to register a callback function.</p>

<p>Use the <span style="font-family: Courier New,Courier,monospace">RUNTIME_INFO_KEY_USB_CONNECTED</span> key to monitor the connection state of the USB cable.</p>

<pre class="prettyprint">
#include &lt;stdbool.h&gt;
#include &lt;runtime_info.h&gt;

void usb_connection_changed(runtime_info_key_e key, void *user_data)
{
&nbsp;&nbsp;&nbsp;bool value;
&nbsp;&nbsp;&nbsp;int ret;

&nbsp;&nbsp;&nbsp;if (key != RUNTIME_INFO_KEY_USB_CONNECTED)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;ret = runtime_info_get_value_bool(key, &amp;value);
&nbsp;&nbsp;&nbsp;if (ret != RUNTIME_INFO_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;USB status: %s&quot;, value ? &quot;Connected&quot; : &quot;Disconnected&quot;);
}

void func(void)
{
&nbsp;&nbsp;&nbsp;int ret;
&nbsp;&nbsp;&nbsp;void *data;

&nbsp;&nbsp;&nbsp;ret = runtime_info_set_changed_cb(RUNTIME_INFO_KEY_USB_CONNECTED, usb_connection_changed, data);
&nbsp;&nbsp;&nbsp;if (ret != RUNTIME_INFO_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;ret = runtime_info_unset_changed_cb(RUNTIME_INFO_KEY_USB_CONNECTED);
&nbsp;&nbsp;&nbsp;if (ret != RUNTIME_INFO_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}
}
</pre>

<h2>Where to Go Next</h2> 
  <ul> 
	<li><a href="system_tutorial.htm">System Tutorials</a></li>
	<li><a href="../../guide/system/runtime_info.htm">Runtime Information Programming Guide</a></li>
	<li><a href="../../../../org.tizen.mobile.native.apireference/group__CAPI__SYSTEM__RUNTIME__INFO__MODULE.html">Runtime Information API Reference</a></li>    
  </ul> 

  <div id="footer"> 
   <hr size="1" /> 
   <font size="1">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</font> 
  </div> 
 
  <script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script> 
 
 </body>
</html>