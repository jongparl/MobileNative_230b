<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
 <head> 
  <script type="text/javascript" src="../../snippet.js"></script> 
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
  <link href="../../styles.css" rel="StyleSheet" type="text/css" /> 
  <link href="../../snippet.css" rel="StyleSheet" type="text/css" /> 
  <title>Storage Tutorial</title> 
 </head> 
 <body onload="prettyPrint()"> 
  <!--<div id="banner">
Tizen</div>--> 
  <h1>Storage Tutorial</h1> 

<p>This tutorial demonstrates how you can get detailed information from internal and external storage using the <a href="../../../../org.tizen.mobile.native.apireference/group__CAPI__SYSTEM__STORAGE__MODULE.html">Storage API</a>.</p>

<p>API functions and data types are defined in the <span style="font-family: Courier New,Courier,monospace;">&lt;storage.h&gt;</span> header file, which must be included in all applications that use the Storage API.</p>

<p>To learn about the Storage API features, see the <a href="../../guide/system/storage.htm">Storage Programming Guide</a>.</p>

<p>This tutorial consists of the following parts:</p>
<ul>
<li><a href="#statfvs">Using Statvfs Wrapper</a>
<p>Get internal and external memory sizes.</p></li>
<li><a href="#storage">Managing Storage Information</a>
<p>Get storage information.</p></li></ul>

<h2 id="statfvs"  name="statfvs">Using Statvfs Wrapper</h2>

<p>Use the statvfs wrapper to get memory sizes:</p>
<ul>
<li>Get internal memory size with the <span style="font-family: Courier New,Courier,monospace;">storage_get_internal_memory_size()</span> function.
<p>The function returns the internal memory size. Use it instead of the statvfs function when you need the internal memory size.</p>
<p>At least a low memory pop-up is launched in case the memory is low, and to do that, a minimum memory is reserved. To allow memory for the pop-up, the function returns a memory size except for a minimum memory size. The minimum memory size depends on the device storage size.</p>
<p>Statvfs structure has a different structure size from the <span style="font-family: Courier New,Courier,monospace;">__USE_FILE_OFFSET64</span> option. If your module defines this option, libstorage changes <span style="font-family: Courier New,Courier,monospace;">storage_get_internal_memory_size()</span> to <span style="font-family: Courier New,Courier,monospace;">storage_get_internal_memory_size64()</span> automatically.</p>
<pre class="prettyprint">
int error;
struct statvfs s;
error = storage_get_internal_memory_size(&amp;s);
</pre>
</li>

<li>Get external memory size with the <span style="font-family: Courier New,Courier,monospace;">storage_get_external_memory_size()</span> function.
<p>The function returns the external memory size. Use it instead of the statvfs function when you need the external memory size.</p>
<p>At least a low memory pop-up is launched in case the memory is low, and to do that, a minimum memory is reserved. To allow memory for the pop-up, the function returns a memory size except for a minimum memory size. The minimum memory size depends on the device storage size.</p>

<p>Statvfs structure has a different structure size from the <span style="font-family: Courier New,Courier,monospace;">__USE_FILE_OFFSET64</span> option. If your module defines this option, libstorage changes <span style="font-family: Courier New,Courier,monospace;">storage_get_external_memory_size()</span> to <span style="font-family: Courier New,Courier,monospace;">storage_get_external_memory_size64()</span> automatically.</p>

<pre class="prettyprint">
int error;
struct statvfs s;
error = storage_get_external_memory_size(&amp;s);
</pre>
</li>
</ul>

<h2 id="storage" name="storage">Managing Storage Information</h2>

<p>You can retrieve information about supported storages and the storage content, and monitor changes in the storage state.</p>

<h3>Getting Storage Information</h3>
<p>To get storage information:</p>
<ul>
<li>Check for supported storages.
<p>Call the <span style="font-family: Courier New,Courier,monospace;">storage_device_supported_cb</span> callback function to get information once for each supported storage. If this function returns <span style="font-family: Courier New,Courier,monospace;">false</span>, the iteration is finished.</p>

<pre class="prettyprint">
static int internal_storage_id;
static bool storage_cb(int storage_id, storage_type_e type, storage_state_e state, const char *path, void *user_data)
{
&nbsp;&nbsp;&nbsp;if (type == STORAGE_TYPE_INTERNAL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;internal_storage_id = storage_id;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>

<li>Retrieve all storages in a device.
<p>Call the <span style="font-family: Courier New,Courier,monospace;">storage_foreach_device_supported()</span> function to invoke the <span style="font-family: Courier New,Courier,monospace;">storage_device_supported_cb()</span> callback function repeatedly, once for each storage in a device.</p>

<pre class="prettyprint">
int error;
error = storage_foreach_device_supported(storage_cb, NULL);
</pre>
</li>

<li>Get the root directory.
<p>Call the <span style="font-family: Courier New,Courier,monospace;">storage_get_root_directory()</span> function to get the absolute path to the root directory of a given storage. Files saved on the internal and external storage are readable or writeable by all applications. When an application is uninstalled, the files written by that application are not removed from the internal or external storage.</p>

<pre class="prettyprint">
int error;
char *path;
error = storage_get_root_directory(internal_storage_id, &amp;path);

free(path);
</pre>
</li>

<li>Get the media directory.
<p>Call the <span style="font-family: Courier New,Courier,monospace;">storage_get_directory()</span> function to get the absolute path to each directory of the given storage. Files saved on the internal or external storage are readable or writeable by all applications. When an application is uninstalled, the files written by that application are not removed from the internal or external storage.</p>

<p>The second parameter defines the directory type based on the <span style="font-family: Courier New,Courier,monospace;">storage_directory_e</span> enum:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace;">STORAGE_DIRECTORY_IMAGES</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">STORAGE_DIRECTORY_SOUNDS</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">STORAGE_DIRECTORY_VIDEOS</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">STORAGE_DIRECTORY_CAMERA</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">STORAGE_DIRECTORY_DOWNLOADS</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">STORAGE_DIRECTORY_MUSIC</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">STORAGE_DIRECTORY_DOCUMENTS</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">STORAGE_DIRECTORY_OTHERS</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">STORAGE_DIRECTORY_SYSTEM_RINGTONES</span></li>
</ul>

<pre class="prettyprint">
int error;
char *path;
error = storage_get_directory(internal_storage_id, STORAGE_DIRECTORY_IMAGES, &amp;path);

free(path);
</pre>
</li>

<li>Get the storage type.
<p>Call the <span style="font-family: Courier New,Courier,monospace;">storage_get_type()</span> function to get the type of the given storage.</p>

<p>The <a href="../../../../org.tizen.mobile.native.apireference/group__CAPI__SYSTEM__STORAGE__MODULE.html#gabdf32571260b6c253da5bfcdecaa2f1f">storage_type_e</a> enumerator defines the available storage types.</p>

<pre class="prettyprint">
int error;
storage_type_e type;
error = storage_get_type(internal_storage_id, &amp;type);
</pre>
</li>

<li>Get the storage mount state.
<p>Call the <span style="font-family: Courier New,Courier,monospace;">storage_get_state()</span> function to get the current state of the given storage.</p>

<p>The <a href="../../../../org.tizen.mobile.native.apireference/group__CAPI__SYSTEM__STORAGE__MODULE.html#gac72d0e57e790d888dfd7bd57d52fbfee">storage_state_e</a> enumerator defines the available storage states.</p>

<pre class="prettyprint">
int error;
storage_state_e state;
error = storage_get_state(internal_storage_id, &amp;state);</pre>
</li></ul>

<h3>Monitoring Storage State Changes</h3>
<p>To monitor storage state changes:</p>

<ol><li>Define the storage changed callback, which is called when a storage state changes.</p>

<pre class="prettyprint">
static void storage_changed_cb(int storage_id, storage_state_e state, void *user_data)
{
&nbsp;&nbsp;&nbsp;if (storage_id != internal_storage_id)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;printf(&quot;state changed to %d\n&quot;, state);
}
</pre>
</li>

<li>Register the callback.

<pre class="prettyprint">
int error;
error = storage_set_state_changed_cb(internal_storage_id, storage_changed_cb, NULL);
</pre>
</li>

<li>When the callback is no longer needed, unregister it.
<pre class="prettyprint">
int error;
error = storage_unset_state_changed_cb(internal_storage_id, storage_changed_cb);
</pre>
</li></ol>

<h3>Retrieving Storage Space Information</h3>
<p>To retrieve storage space information:</p>

<ul><li>Get the total space of the storage using the <span style="font-family: Courier New,Courier,monospace;">storage_get_total_space()</span> function.
<p>The function returns the total space of the given storage in bytes. It invokes the <span style="font-family: Courier New,Courier,monospace;">storage_get_internal_memory_size()</span> or <span style="font-family: Courier New,Courier,monospace;">storage_get_external_memory_size()</span> internally.</p>

<pre class="prettyprint">
int error;
unsigned long long bytes;
error = storage_get_total_space(internal_storage_id, &amp;bytes);
</pre>
</li>

<li>Get the available space of the storage using the <span style="font-family: Courier New,Courier,monospace;">storage_get_available_space()</span> function.
<p>This function returns the available space of the given storage in bytes. This function invokes the <span style="font-family: Courier New,Courier,monospace;">storage_get_internal_memory_size()</span> or <span style="font-family: Courier New,Courier,monospace;">storage_get_external_memory_size()</span> internally.</p>

<pre class="prettyprint">
int error;
unsigned long long bytes;
error = storage_get_available_space(internal_storage_id, &amp;bytes);
</pre>
</li>
</ul>

<h2>Where to Go Next</h2> 
  <ul> 
	<li><a href="system_tutorial.htm">System Tutorials</a></li>
	<li><a href="../../guide/system/storage.htm">Storage Programming Guide</a></li>
	<li><a href="../../../../org.tizen.mobile.native.apireference/group__CAPI__SYSTEM__STORAGE__MODULE.html">Storage API Reference</a></li>    
  </ul> 

  <div id="footer"> 
   <hr size="1" /> 
   <font size="1">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</font> 
  </div> 
  <!--start--> 
  <script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script> 
  <!--end-->  
 </body>
</html>