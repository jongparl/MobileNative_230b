<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
 <head> 
  <script type="text/javascript" src="../../snippet.js"></script> 
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
  <link href="../../styles.css" rel="StyleSheet" type="text/css" /> 
  <link href="../../snippet.css" rel="StyleSheet" type="text/css" /> 
  <title>Account Manager Features Tutorial</title> 
 </head> 
 <body onload="prettyPrint()"> 
  <!--<div id="banner">
Tizen</div>--> 
  <h1>Account Manager Features Tutorial</h1> 
<p>This tutorial demonstrates how you can manage user accounts and accounts types.</p>

<p>API functions and data types are defined in the <span style="font-family: Courier New,Courier,monospace;">&lt;account.h&gt;</span> header file, which has to be included in all applications that use the <a href="../../../../org.tizen.mobile.native.apireference/group__CAPI__ACCOUNT__MANAGER__MODULE.html">Account Manager API</a>.
</p>

<p>To learn about the Account Manager API features, see the <a href="../../guide/social/account.htm">Account Management Programming Guide</a>.</p>

<p>This tutorial consists of the following parts:</p>
	<ul>
		<li><a href="#initialize">Initialization and Prerequisites</a></li>
		<li><a href="#queries">Performing Database Queries</a>
		<p>Manage accounts and query them based on various attributes.</p></li>
		<li><a href="#secret">Managing Account Secrecy</a>
		<p>Manage account secrecy levels.</p></li>
		<li><a href="#update">Updating Accounts</a>
		<p>Update account details.</p></li>
		<li><a href="#type">Managing Account Types</a>
		<p>Manage account types.</p></li>
   </ul>
 
 <h2 id="initialize" name="initialize">Initialization and Prerequisites</h2>
<p>All necessary definitions are included in <span style="font-family: Courier New,Courier,monospace;">#include &lt;account.h&gt;</span>. The basic handle to an account is the <span style="font-family: Courier New,Courier,monospace;">account_h</span> type.</p>

<p>Before any operations on accounts, establish a connection to the database using the 
<span style="font-family: Courier New,Courier,monospace;">account_connect();</span> function.</p>
 
<h2 id="queries" name="queries">Performing Database Queries</h2>

<p>To perform database queries:</p>


<ol>
<li>Prepare sample content.
<p>To perform queries, you need existing content in the database. To access existing account, obtain it from the database. It can be done using a few functions, depending on the user requirements.</p>
<p>To create new content to the database:</p>

<ol><li><p>The <span style="font-family: Courier New,Courier,monospace;">create_Account()</span> function creates a new account from a given <span style="font-family: Courier New,Courier,monospace;">account_h</span> handle and account details (name, display name, domain, e-mail). 3 capabilities are added to the account to demonstrate some of query functions. The capabilities as well as user custom types can be predefined.</p>

<p>After creating the account, it is added to the database. When no longer needed, the account handle has to be destroyed using the <span style="font-family: Courier New,Courier,monospace;">account_destroy(account)</span> function.</p>

<pre class="prettyprint">
int id[3];
static account_h account = NULL;

create_Account(&amp;account, &quot;Person&quot;, &quot;DiplayPerson&quot;, &quot;Person Domain&quot;, &quot;someone1@somewho.com&quot;);

account_set_capability(account, &quot;Custom&quot;, ACCOUNT_CAPABILITY_ENABLED);
					 			
account_set_capability(account, &quot;Next&quot;, ACCOUNT_CAPABILITY_ENABLED);
 
account_set_capability(account, &quot;Another&quot;, ACCOUNT_CAPABILITY_DISABLED);

account_insert_to_db(account, &amp;id[0]);

account_destroy(account);
</pre></li>

<li><p>Add 2 more accounts to the database.</p>

<pre class="prettyprint">
Create_Account(&amp;account, &quot;PersonX&quot;, &quot;DisplayX&quot;, &quot;Other Domain&quot;, &quot;someone2@somewho.com&quot;);
account_insert_to_db(account,&amp;id[1]);

account_destroy(account);

Create_Account(&amp;account, &quot;Human&quot;, &quot;Humanity&quot;, &quot;Everyone&quot;, &quot;someone3@somewho.com&quot;);

account_insert_to_db(account, &amp;id[2]);

account_destroy(account);

Create_Account(&amp;account, &quot;LastOne&quot;, &quot;LastDisplay&quot;, &quot;Last Domain&quot;, &quot;someone4@somewho.com&quot;);
account_insert_to_db(account, &amp;id[2]);
account_destroy(account);
</pre>
</li>

<li>Create an account.
<p>For more information, see <a href="../social_tutorial/account_tutorial.htm">Account Tutorial</a>.</p>

<pre class="prettyprint">
static int Create_Account(account_h * account, char * account_name, char * display_name, char *  domain_name, char * email_address)
{
&nbsp;&nbsp;&nbsp;account_create(account);

&nbsp;&nbsp;&nbsp;account_set_user_name(*account, account_name);

&nbsp;&nbsp;&nbsp;account_set_display_name(*account, display_name);

&nbsp;&nbsp;&nbsp;account_set_domain_name(*account, domain_name);

&nbsp;&nbsp;&nbsp;account_set_email_address(*account, email_address);
}
</pre></li></ol>
</li>

<li>List accounts.
<ol><li>
<p>To verify the database insertion, all accounts are listed.</p>

<pre class="prettyprint">
struct Account_Records
{
&nbsp;&nbsp;&nbsp;int count;
&nbsp;&nbsp;&nbsp;int tab[100];
};

struct Account_Records rec;
 
List_Accounts(&amp;rec);
</pre></li>

<li><p>When <span style="font-family: Courier New,Courier,monospace;">struct Account_Records* rec</span> is not <span style="font-family: Courier New,Courier,monospace;">Null</span>, <span style="font-family: Courier New,Courier,monospace;">List_Accounts</span> counts all records in the database. Records are obtained using the <span style="font-family: Courier New,Courier,monospace;">account_foreach_account_from_db()</span> function.</p>

<pre class="prettyprint">
static void List_Accounts(struct Account_Records* rec)
{
&nbsp;&nbsp;&nbsp;if (rec!=NULL)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rec-&gt;count=0;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;account_foreach_account_from_db(on_account_read, rec);
}
</pre></li>

<li><p>For each found record, the <span style="font-family: Courier New,Courier,monospace;">on_account_read()</span> callback function is called. If <span style="font-family: Courier New,Courier,monospace;">void *user_data</span> is not null, the function is counting the existing accounts. String data returned by the get functions has to be released with <span style="font-family: Courier New,Courier,monospace;">free</span>. Data prepared with the <span style="font-family: Courier New,Courier,monospace;">sprint()</span> function can, for example, be sent for <span style="font-family: Courier New,Courier,monospace;">stdout</span>.</p>

<pre class="prettyprint">
static bool on_account_read(account_h account, void *user_data)
{
&nbsp;&nbsp;&nbsp;int account_id = 0;
&nbsp;&nbsp;&nbsp;char *name = NULL;
&nbsp;&nbsp;&nbsp;char *display_name = NULL;
&nbsp;&nbsp;&nbsp;struct Account_Records * rec = (struct Account_Records *)user_data;
&nbsp;&nbsp;&nbsp;char buf[100];

&nbsp;&nbsp;&nbsp;account_get_account_id(account, &amp;account_id);

&nbsp;&nbsp;&nbsp;sprintf(buf,&quot;MyCallback ID: %d\n&quot;,account_id);

&nbsp;&nbsp;&nbsp;if (user_data!=NULL)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rec-&gt;tab[rec-&gt;count++]=account_id;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;account_get_user_name(account, &amp;name);
&nbsp;&nbsp;&nbsp;sprintf(buf,&quot;MyCallback Name: %s\n&quot;,name);

&nbsp;&nbsp;&nbsp;free(name);

&nbsp;&nbsp;&nbsp;account_get_display_name(account, &amp;display_name);
&nbsp;&nbsp;&nbsp;sprintf(buf,&quot;MyCallback Disp.: %s\n&quot;,display_name);

&nbsp;&nbsp;&nbsp;free(display_name);

&nbsp;&nbsp;&nbsp;return 0;
}
</pre></li></ol>
</li>
<li>Query the account by ID.
<p>The easiest way to get access account stored in the database is referring to it by its ID. It can be done with the <span style="font-family: Courier New,Courier,monospace;">account_query_account_by_account_id()</span> function. This function requires an existing handle to an account as an input parameter. </p>

<pre class="prettyprint">
for (i=0; i&lt;rec.count; i++)
{
&nbsp;&nbsp;&nbsp;account_create(&amp;account);
&nbsp;&nbsp;&nbsp;account_query_account_by_account_id (rec.tab[i], &amp;account);

&nbsp;&nbsp;&nbsp;Show_Account(account);

&nbsp;&nbsp;&nbsp;account_destroy(account);
}
</pre>
</li>

<li>Show the account.
<p>The following function prepares data to send it to any text output.</p>

<pre class="prettyprint">
static int Show_Account(account_h acc)
{
&nbsp;&nbsp;&nbsp;int account_id = 0;
&nbsp;&nbsp;&nbsp;char *name = NULL;
&nbsp;&nbsp;&nbsp;char *display_name = NULL;
&nbsp;&nbsp;&nbsp;char buf[100];

&nbsp;&nbsp;&nbsp;account_get_account_id(acc, &amp;account_id);

&nbsp;&nbsp;&nbsp;sprintf(buf,&quot;Show_Account ID: %d\n&quot;,account_id);

&nbsp;&nbsp;&nbsp;account_get_user_name(acc, &name);

&nbsp;&nbsp;&nbsp;sprintf(buf,&quot;Show_Account Name: %s\n&quot;,name);

&nbsp;&nbsp;&nbsp;free(name);

&nbsp;&nbsp;&nbsp;account_get_display_name(acc, &amp;display_name);

&nbsp;&nbsp;&nbsp;sprintf(buf,&quot;Show_Account Disp.: %s\n&quot;,display_name);

&nbsp;&nbsp;&nbsp;free(display_name);

&nbsp;&nbsp;&nbsp;return 0;
}
</pre>
</li>

<li>Query the account by various attributes:
<ul><li>Query by username.
<p>Querying data by username requires providing a valid username callback function. In this example, it is the same function as for <span style="font-family: Courier New,Courier,monospace;">for_each</span>, but cast without the third parameter.</p>

<pre class="prettyprint">
account_query_account_by_user_name (on_account_read, &quot;Human&quot;, NULL);
</pre>
</li>

<li>Query by package name
<p>By default, the accounts created in the application context have a package name set to the application name. Change it using the <span style="font-family: Courier New,Courier,monospace;">account_set_package_name()</span> function. To list accounts by package name, the user can provide a name by itself or obtain it with the <span style="font-family: Courier New,Courier,monospace;">account_get_package_name()</span> function.</p>

<p>The <span style="font-family: Courier New,Courier,monospace;">account_query_account_by_package_name()</span> function requires a callback function and a package name. In addition, the user data can be passed to the callback function as a third parameter.</p>
 
<p>The package name has to be released when no longer needed.</p>

<pre class="prettyprint">
char * package_name;
account_get_package_name (account, &amp;package_name);
account_query_account_by_package_name (on_account_read, package_name, NULL);
free(package_name);
</pre>
</li>

<li>Query by capability
<p>The following function allows the user to find all accounts with a specified capability on a specified state. Once again, the callback function is required.</p>

<pre class="prettyprint">
account_query_account_by_capability (on_account_read, &quot;Custom&quot;, ACCOUNT_CAPABILITY_ENABLED, NULL);
</pre>
</li>

<li> Query by capability type
<p>This function is similar to the <span style="font-family: Courier New,Courier,monospace;">account_query_account_by_capability()</span> function, but returns all accounts with a specified capability, without checking its state.</p>

<pre class="prettyprint">
account_query_account_by_capability_type (on_account_read, &quot;Next&quot;, NULL);
</pre>
</li>

<li>Query capability by account ID
<p>The <span style="font-family: Courier New,Courier,monospace;">account_query_capability_by_account_id()</span> function is different from the previous functions. It lists all capabilities from an account with a specified ID. In this case it requires a different type of callback, as listed below.</p>

<pre class="prettyprint">
account_query_capability_by_account_id (_capability_cb, id[0], NULL);
</pre>

<p>The callback function prepares data to be sent to an output.</p>

<pre class="prettyprint">
static bool _capability_cb(const char *capability_type, account_capability_state_e capability_state, void *user_data)
{
&nbsp;&nbsp;&nbsp;char buf[200];
&nbsp;&nbsp;&nbsp;sprintf(buf,&quot;Found capability: %s on state %d\n&quot;, capability_type, capability_state);
&nbsp;&nbsp;&nbsp;…
&nbsp;&nbsp;&nbsp;return 1;
}
</pre>
</li></ul></li>

<li>Clean up.
<p>When no longer needed, all handles to accounts have to be destroyed and the connection to the database has to be closed. In addition, the sample application deletes all its accounts.</p>

<pre class="prettyprint">
account_destroy(account);

account_foreach_account_from_db(delete_account, NULL);

account_disconnect();
</pre>
</li>
</ol>

<h2 id="secret" name="secret">Managing Account Secrecy</h2>
<p>To manage account secrecy:</p>
<ol>
<li>Select the secrecy level using the <a href="../../../../org.tizen.mobile.native.apireference/group__CAPI__ACCOUNT__MANAGER__MODULE.html#ga41a7e7e7cfb072d0b0ba37087a0535b6">account_secrecy_state_e</a> enumeration.

<pre class="prettyprint">
static account_h account = NULL;
account_secrecy_state_e secret;
 
char buf[200];
int ret;
int id;

// Account 1
Create_Account(&amp;account, &quot;Security 1&quot;, &quot;Invalid&quot;, &quot;NOBODY&quot;, &quot;anony@mous.not&quot;);

account_set_secret(account, ACCOUNT_SECRECY_INVALID);

account_get_secret(account, &amp;secret);

account_insert_to_db(account, &amp;id);

sprintf(buf,&quot;Account 1 secret: %d\n&quot;, secret);

account_destroy(account);

// Account 2

Create_Account(&amp;account, &quot;Security 2&quot;, &quot;Invisible&quot;, &quot; NOBODY&quot;, &quot;anony1@mous.not&quot;);

account_set_secret(account, ACCOUNT_SECRECY_INVISIBLE);

account_get_secret(account, &amp;secret);

account_insert_to_db(account, &amp;id);

sprintf(buf, &quot; Account 2 secret: %d\n&quot;, secret);

account_destroy(account);

// Account 3

Create_Account(&amp;account, &quot;Secret 3&quot;, &quot;Visible&quot;, &quot; NOBODY&quot;, &quot;anony2@mous.not&quot;);

ret = account_set_secret(account, ACCOUNT_SECRECY_VISIBLE);

ret = account_get_secret(account, &amp;secret);

ret = account_insert_to_db(account, &amp;id);

sprintf(buf,&quot; Account 3 secret: %d\n&quot;, secret);
   
account_destroy(account);

List_Accounts(NULL);

account_foreach_account_from_db(delete_account, NULL);
</pre>

<p>Secrecy is linked only with visibility on the account settings screen. The account is still visible and can be accessed using a query or the <span style="font-family: Courier New,Courier,monospace;">for_each</span> function. For further information on how to add your application to account screen, see <a href="../social_tutorial/account_tutorial.htm">Account Tutorial</a>.</p>

<pre class="prettyprint">// List_Account() console output
MyCallback ID: 12
MyCallback Name: Security 1
MyCallback Disp.: Invalid
-------------------
MyCallback ID: 13
MyCallback Name: Security 2
MyCallback Disp.: Invisible
-------------------
MyCallback ID: 14
MyCallback Name: Secret 3
MyCallback Disp.: Visible
</pre>
</li>

<li>Clean up.
<p>Account handles have to be destroyed when not needed anymore. Accounts are removed from the database. Connection has to be terminated.</p>

<pre class="prettyprint">
account_destroy(account);

account_foreach_account_from_db(delete_account, NULL);

account_disconnect();
</pre>
</li>
</ol>

<h2 id="update" name="update">Updating Accounts</h2>
<p>To update and track account data.</p>

<ol>
<li>Subscribe notifications.
<p>To track account changes, create <span style="font-family: Courier New,Courier,monospace;">account_subscribe_h instance</span> and register a notification.</p>

<pre class="prettyprint">
account_type_h account_type;
account_subscribe_h account_subscribe;

account_subscribe_create(&amp;account_subscribe);

account_subscribe_notification(account_subscribe, _account_event_cb,NULL);
</pre>
</li>

<li>Create an account.
<p>Accounts are created and then their handles are destroyed. The package name is obtained from the second account.</p>

<pre class="prettyprint">
Create_Account(&amp;account, &quot;Updater&quot;, &quot;Updated?&quot;, &quot;ToUpdate&quot;, &quot;not.up@to.date&quot;);
account_insert_to_db(account, &amp;id);

Show_Account(account);
account_destroy(account);

Create_Account(&amp;account, &quot;Another&quot;, &quot;Updated?&quot;, &quot;ToUpdate&quot;, &quot;not.up@to.date&quot;);
account_insert_to_db(account, &amp;id);

account_get_package_name (account, &amp;package_name);
sprintf(buf, &quot;Package_name: %s\n&quot;, package_name);

Show_Account(account);
account_destroy(account);
</pre>
</li>

<li>Update the account.
<ul><li><p>To update an account by its ID:</p>
<ol>
<li>Create a handle to the account.</li>
<li>Get the account from the database (also possible by ID).</li>
<li>Make the necessary changes.</li>
<li>Update the account using the account handle and a valid ID.</li>
<li>Destroy the account handle.</li>
</ol>

<pre class="prettyprint">
account_create(&amp;account);
account_query_account_by_account_id(id, &amp;account);
account_set_display_name(account, &quot;Updated!&quot;);
account_update_to_db_by_id(account, id);
account_destroy(account);
</pre>
</li>

<li>Update account by user name.
<p>To update an account by its user name:</p>
<ol>
<li>Create a handle to the account.</li>
<li>Get the account from the database (also by ID).</li>
<li>Make the necessary changes.</li>
<li>Update the account using the account handle, a valid user name, and a package name. There can be accounts with the same user names in different packages.</li>
<li>Destroy the account handle.</li>
</ol>

<pre class="prettyprint">
account_create(&amp;account);
account_query_account_by_account_id(id, &amp;account);
account_set_display_name(account, &quot;Updated!&quot;);
account_update_to_db_by_user_name(account, &quot;Another&quot;, package_name);
account_destroy(account);
</pre></li></ul>
</li>

<li>Create the callback.
<p>When any action is taking place on any account when a notification is subscribed, a callback function is invoked. The callback function provides as parameters the event type as a string, the ID of account associated with actual change, and additionally user data registered while subscribing a notification.</p>

<pre class="prettyprint">
bool _account_event_cb(const char *event_type, int account_id, void *user_data)
{
&nbsp;&nbsp;&nbsp;char buf[200];

&nbsp;&nbsp;&nbsp;sprintf(buf, &quot;ACCOUNT EVENT: %s, %d\n&quot;, event_type, account_id);

&nbsp;&nbsp;&nbsp;return 1;
}
</pre>
</li>

<li>Show accounts.
<p>To verify the updates, account can be shown.</p>

<pre class="prettyprint">
account_create(&amp;account);
account_query_account_by_account_id(id, &amp;account);
Show_Account(account);
account_destroy(account);
</pre>
</li>

<li>Clean up.
<p>The notification has to be unsubscribed when no longer needed.</p>

<pre class="prettyprint">
account_unsubscribe_notification(account_subscribe);

account_destroy(account);

account_foreach_account_from_db(delete_account, NULL);
</pre>
</li>
</ol>

<h2 id="type" name="type">Managing Account Types</h2>
<p>To manage account types:</p>

<ol>
<li>Create a type.
<p>To operate on the account type, create a handle to it.</p>

<pre class="prettyprint">
account_type_h account_type;

account_type_create(&amp;account_type);
</pre>
</li>

<li>Add the type.
<p>If the account type with a specified ID does not exists, it can be added to the database.</p>

<p>It is possible to set, for example:</p>
<ul>
<li>ID</li>
<li>Labels</li>
<li>Features</li>
<li>Multiple account support (this is only a flag)</li>
</ul>

<p>After all options are set, the account type has to be added to the database.</p>

<pre class="prettyprint">
if (account_type_query_app_id_exist(type_id))
{
&nbsp;&nbsp;&nbsp;account_type_set_app_id(account_type, type_id);

&nbsp;&nbsp;&nbsp;account_type_set_multiple_account_support(account_type,true);

&nbsp;&nbsp;&nbsp;account_type_set_label(account_type, &quot;TestLable&quot;, &quot;TestLocale&quot;);

&nbsp;&nbsp;&nbsp;account_type_set_provider_feature(account_type, &quot;Example Feature&quot;);

&nbsp;&nbsp;&nbsp;account_type_insert_to_db(account_type, &amp;id);
}
</pre>
</li>

<li>List types and labels.
<p>To list account types or list all labels from a specified type, a proper callback function has to be provided.</p>

<pre class="prettyprint">
account_type_foreach_account_type_from_db(_account_type_cb, NULL);

account_type_query_label_by_app_id(_account_label_cb, type_id, NULL);
</pre>

<p>While listing labels, the user has access to the ID of the account type, label and its local value, and the user data passed while casting the query function.</p>

<pre class="prettyprint">
bool _account_label_cb(char *id, char *label, char *locale, void *user_data)
{
&nbsp;&nbsp;&nbsp;char buf[200];

&nbsp;&nbsp;&nbsp;sprintf(buf,&quot;Get Label ID: %s LABEL: %s LOCALE %s\n&quot;, app_id, label, locale);

&nbsp;&nbsp;&nbsp;return 1;
}
</pre>

<p>The account type callback has access to the account type and user data.</p>

<pre class="prettyprint">
bool _account_type_cb(account_type_h account_type, void *user_data)
{
&nbsp;&nbsp;&nbsp;char * id;
&nbsp;&nbsp;&nbsp;int support;
&nbsp;&nbsp;&nbsp;char buf[200];

&nbsp;&nbsp;&nbsp;account_type_get_app_id(account_type, &amp;id);

&nbsp;&nbsp;&nbsp;account_type_get_multiple_account_support(account_type, &amp;support);
&nbsp;&nbsp;&nbsp;sprintf(buf,&quot;Account Type ID: %s Multiple support %d:\n&quot;, id, support);

&nbsp;&nbsp;&nbsp;return 1;
}
</pre>
</li>

<li>Clean up.
<p>All allocated handles have to be destroyed. Also the account type is removed. Connection to the database has to be closed.</p>

<pre class="prettyprint">
account_type_delete_by_app_id(type_id);

account_type_destroy(account_type);

account_disconnect();
</pre>
</li>
</ol>

  <h2>Where to Go Next</h2> 
  <ul> 
	<li><a href="advanced_tutorial.htm">Advanced Tutorials</a></li>
	<li><a href="../../guide/social/account.htm">Account Management Programming Guide</a></li> 
	<li><a href="../../../../org.tizen.mobile.native.apireference/group__CAPI__ACCOUNT__MANAGER__MODULE.html">Account Manager API Reference</a></li>    
  </ul> 
 
  <div id="footer"> 
   <hr size="1" /> 
   <font size="1">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</font> 
  </div> 

  <script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script> 
 
 </body>
</html>