<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
 <head> 
  <script type="text/javascript" src="../../snippet.js"></script> 
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
  <link href="../../styles.css" rel="StyleSheet" type="text/css" /> 
  <link href="../../snippet.css" rel="StyleSheet" type="text/css" /> 
  <title>Content Group Tutorial</title> 
 </head> 
 <body onload="prettyPrint()"> 
  <!--<div id="banner">
Tizen</div>--> 
  <h1>Content Group Tutorial</h1> 
<p>This tutorial demonstrates how you can find media items grouped by a given property, such as all media items grouped by the MIME type.</p>

<p>API functions and data types are defined in the <span style="font-family: Courier New,Courier,monospace;">&lt;media_content.h&gt;</span> header file, which has to be included in all applications using the <a href="../../../../org.tizen.mobile.native.apireference/group__CAPI__CONTENT__FRAMEWORK.html">Content</a> API.
</p>

<p>To learn about the Content API features, see the <a href="../../guide/content/content.htm">Content Programming Guide</a>.</p> 

<p>This tutorial consists of the following parts:</p>
	<ul>
		<li><a href="#initialize">Initialization and Prerequisites</a></li>
		<li><a href="#find">Finding Media Item Groups</a>
		<p>Find all available media items grouped by their MIME type.</p></li>
		<li><a href="#filter">Finding Media Item Groups Using a Filter</a>
		<p>Find grouped media items filtered by name.</p></li>
   </ul>
 
 <h2 id="initialize" name="initialize">Initialization and Prerequisites</h2>
<p>Before the Content API is used, call the following function:</p>

<pre class="prettyprint">
media_content_connect();
</pre>

<p>When the Content API is no longer needed, call:</p>

<pre class="prettyprint">
media_content_disconnect();
</pre>

<h2 id="find" name="find">Finding Media Item Groups</h2>
<p>To find groups of media items and items in a given group:</p>

<ol><li>Search for groups.
<p>A group is a collection of media items which have the same value of a given property. For example, if the property is the artist, there are as many groups as there are artists, and each group consists of items by the same artist. The possible groups are determined by the <span style="font-family: Courier New,Courier,monospace;">media_group_e</span> values, such as <span style="font-family: Courier New,Courier,monospace;">MEDIA_CONTENT_GROUP_ARTIST</span> and <span style="font-family: Courier New,Courier,monospace;">MEDIA_CONTENT_GROUP_MIME_TYPE</span>.</p>
<ol><li>
<p>Find the number of MIME type-related groups:</p>

<pre class="prettyprint">
media_group_e group = MEDIA_CONTENT_GROUP_MIME_TYPE;
int count = -1; 

media_group_get_group_count_from_db(NULL, group, &amp;count);
printf(&quot;Group count: %d\n&quot;, count);
</pre>

<p>The first argument is the <a href="#filter">filter</a>. In this example, the filter is <span style="font-family: Courier New,Courier,monospace;">NULL</span>, which means that no filtering is performed and all items are considered when searching.</p></li>

<li><p>Find the groups using the <span style="font-family: Courier New,Courier,monospace;">media_group_foreach_group_from_db()</span> function.</p>

<p>The first parameter defines a filter, and the second the group identifier. The third parameter defines the callback called for each group, and the final parameter is the data passed to the callback upon each call.</p>

<p>The following example searches all media items and provides all groups as the result. For each found group, the <span style="font-family: Courier New,Courier,monospace;">group_cb()</span> function is called. The group identifier is given as the data passed to the callback.</p>

<pre class="prettyprint">
media_group_foreach_group_from_db(NULL, group, group_cb, (void *) group);
</pre></li></ol></li>

<li>Receive group data.
<ol><li>
<p>Define the callback for receiving the group data. If the callback returns <span style="font-family: Courier New,Courier,monospace;">true</span>, the iteration over the found groups continues. If the return value is <span style="font-family: Courier New,Courier,monospace;">false</span>, the iteration is stopped.</p>

<p>Each time the callback is called for a group, the group name is passed as the <span style="font-family: Courier New,Courier,monospace;">name</span> argument. In this case, names are set to various found MIME types, such as <span style="font-family: Courier New,Courier,monospace;">image/png</span> and <span style="font-family: Courier New,Courier,monospace;">audio/mpeg</span>.</p>

<p>Having the group name and identifier (passed in <span style="font-family: Courier New,Courier,monospace;">user_data</span>), find the number of items in the group using the <span style="font-family: Courier New,Courier,monospace;">media_group_get_media_count_from_db() function</span>. The third parameter is the filter, set to <span style="font-family: Courier New,Courier,monospace;">NULL</span> to count all items in the group.</p>

<p>To find all items in the group, call the <span style="font-family: Courier New,Courier,monospace;">media_group_foreach_media_from_db()</span> function. The arguments are similar to those in the <span style="font-family: Courier New,Courier,monospace;">media_group_foreach_media_from_db()</span> function. The <span style="font-family: Courier New,Courier,monospace;">media_cb()</span> callback is called for each found item.</p>

<pre class="prettyprint">
bool group_cb(const char *name, void *user_data)
{
&nbsp;&nbsp;&nbsp;media_content_error_e ret = MEDIA_CONTENT_ERROR_NONE;
&nbsp;&nbsp;&nbsp;media_group_e group = (media_group_e) user_data;

&nbsp;&nbsp;&nbsp;printf(&quot;\n&quot;);
&nbsp;&nbsp;&nbsp;printf(&quot;Group name: %s\n&quot;, name);

&nbsp;&nbsp;&nbsp;int count = -1; 
&nbsp;&nbsp;&nbsp;media_group_get_media_count_from_db(name, group, NULL, &amp;count);
&nbsp;&nbsp;&nbsp;printf(&quot;Media count in group: %d\n&quot;, count);

&nbsp;&nbsp;&nbsp;media_group_foreach_media_from_db(name, group, NULL, media_cb, NULL);

&nbsp;&nbsp;&nbsp;return true;
}
</pre></li>

<li>Define the <span style="font-family: Courier New,Courier,monospace;">media_cb()</span> callback to handle each found item:

<pre class="prettyprint">
bool media_cb(media_info_h media, void *user_data)
{
&nbsp;&nbsp;&nbsp;media_content_error_e ret = MEDIA_CONTENT_ERROR_NONE;
&nbsp;&nbsp;&nbsp;char *name = NULL;

&nbsp;&nbsp;&nbsp;media_info_get_display_name(media, &amp;name);
&nbsp;&nbsp;&nbsp;printf(&quot;Name: %s\n&quot;, name);

&nbsp;&nbsp;&nbsp;return true;
</pre></li></ol></li></ol>



<h2 id="filter" name="filter">Finding Media Item Groups Using a Filter</h2>

<p>When searching for groups, you can limit what media items are considered. For example, search only for items containing a given substring in their name. Items which do not meet this condition are ignored, and groups are formed entirely of items which meet the condition. For example, if you group files by MIME type and only look for files containing &#39;.jpg&#39; in their name, groups which do not contain such files are not listed.</p>
	
<p>To find groups containing only items matching the given criteria:</p>	
	
<ol><li>Create a filter:</p>

<pre class="prettyprint">
filter_h filter;

media_filter_create(&amp;filter);
</pre></li>

<li><p>Set the filter condition. The condition is a string used in a SQL query. </p>
<p>The following example searches for files containing &#39;.jpg&#39; in their name. The &#39;%&#39; characters in the query act as wildcards. Also, they should be escaped using another &#39;%&#39; character to avoid compiler warnings.</p>

<pre class="prettyprint">
char buf[BUFLEN] = { &#39;\0&#39; };

snprintf(buf, BUFLEN, &quot;%s LIKE &#39;%%.jpg&#39;&quot;, MEDIA_DISPLAY_NAME);
media_filter_set_condition(filter, buf, MEDIA_CONTENT_COLLATE_DEFAULT);
</pre></li>

<li><p>Search for groups as in the &quot;Finding Media Item Groups&quot; use case, but define the created filter as the first parameter. The same callbacks as before are used.</p>

<pre class="prettyprint">
int count = -1; 
media_group_get_group_count_from_db(filter, group, &amp;count);
printf(&quot;Group count: %d\n&quot;, count);

media_group_foreach_group_from_db(filter, group, group_cb, (void *) group);
</pre></li></ol>

  <h2>Where to Go Next</h2> 
  <ul> 
	<li><a href="advanced_tutorial.htm">Advanced Tutorial</a></li>
	<li><a href="../../guide/content/content.htm">Content Programming Guide</a></li> 
	<li><a href="../../../../org.tizen.mobile.native.apireference/group__CAPI__CONTENT__FRAMEWORK.html">Content API Reference</a></li>    
  </ul> 
 
  <div id="footer"> 
   <hr size="1" /> 
   <font size="1">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</font> 
  </div> 

  <script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script> 
 
 </body>
</html>