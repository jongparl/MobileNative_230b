<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
 <head> 
  <script type="text/javascript" src="../../snippet.js"></script> 
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
  <link href="../../styles.css" rel="StyleSheet" type="text/css" /> 
  <link href="../../snippet.css" rel="StyleSheet" type="text/css" /> 
  <title>Metadata Extractor Tutorial</title> 
 </head> 
 <body onload="prettyPrint()"> 
  <!--<div id="banner">
Tizen</div>--> 
  <h1>Metadata Extractor Tutorial</h1> 

<p>This tutorial demonstrates how you can extract metadata from a given media file.</p>

<p>API functions and data types are defined in the <span style="font-family: Courier New,Courier,monospace;">&lt;metadata_extractor.h&gt;</span> header file, which has to be included in all applications that use the <a href="../../../../org.tizen.mobile.native.apireference/group__CAPI__METADATA__EXTRACTOR__MODULE.html">Metadata Extractor</a> API.</p>

<p>To learn about the Metadata Extractor API features, see the <a href="../../guide/media/metadata_extractor.htm">Metadata Extractor Programming Guide</a>.</p>

<p>This tutorial consists of the following parts:</p>
	<ul>
		<li><a href="#initialize">Initialization and Prerequisites</a></li>
		<li><a href="#get">Getting Metadata, Artwork, and Frame</a>
		<p>Create a metadata extractor handle, bind the handle with the file, and get metadata, artwork, lyrics, and frames.</p></li>
   </ul>
 
 <h2 id="initialize" name="initialize">Initialization and Prerequisites</h2>
 <ol><li><p>To work with the Metadata Extractor API, create a handle to the metadata extractor. A global variable is used in this tutorial:</p>

<pre class="prettyprint">
static metadata_extractor_h g_metadata_h = NULL;
</pre></li>

<li><p>Files must contain metadata in order for the Metadata Extractor API functions to work. This tutorial uses 2 files - an audio file in the mp3 format and a video file in the mp4 format:</p>

<pre class="prettyprint">
#define MEDIA_VIDEO_PATH &quot;/opt/usr/apps/tctbhtests/res/wgt/tests/Application/res/video.mp4&quot;
#define MEDIA_AUDIO_PATH &quot;/usr/share/factory-15/res/sounds/OverTheHorizon.mp3&quot;
</pre></li></ol>


<h2 id="get" name="get">Getting Metadata, Artwork, and Frame</h2>
 
<p>To get metadata from the file:</p>
<ol>
<li>Create the metadata extractor handle.

<p>Use the <span style="font-family: Courier New,Courier,monospace;">metadata_extractor_create()</span> function. This is necessary to prepare the metadata extractor handle for work.</p>

<pre class="prettyprint">
ret = metadata_extractor_create(&amp;g_metadata_h);
</pre></li>
<li>Set the path to the file whose data you want to obtain.

<p>Use the <span style="font-family: Courier New,Courier,monospace;">metadata_extractor_set_path()</span> function. It binds the handle with the media file specified in the <span style="font-family: Courier New,Courier,monospace;">MEDIA_VIDEO_PATH</span>, passed as a second argument to this function.</p>

<pre class="prettyprint">
ret = metadata_extractor_set_path(g_metadata_h, MEDIA_VIDEO_PATH);
</pre></li>
<li>Get metadata from the file.

<p>Use the <span style="font-family: Courier New,Courier,monospace;">metadata_extractor_get_metadata()</span> function, which takes 3 parameters. The first one is the handle to the metadata extractor. The second parameter is the type of the wanted data. The possible values for this parameter are those defined in the <a href="../../../../org.tizen.mobile.native.apireference/group__CAPI__METADATA__EXTRACTOR__MODULE.html#ga5b27fedbf5aaa22106f88b831c596872">metadata_extractor_attr_e</a> enumeration. In this tutorial all the possible data from the file is extracted, so a function with all possible attribute types is needed. The value read from the file is stored in the final parameter, which is a pointer to the char variable and is fulfilled by the function.</p>

<pre class="prettyprint">
char *value = NULL;

ret = metadata_extractor_get_metadata(g_metadata_h, METADATA_DURATION, &amp;value);
printf(&quot;METADATA_DURATION: %s\n&quot;, value);
free(value);
value = NULL;
</pre>

<p>After calling the function, check whether the value returned by the function is equal to <span style="font-family: Courier New,Courier,monospace;">METADATA_EXTRACTOR_ERROR_NONE</span>. If it is not, an error occurred. Otherwise, the function got the requested data successfully and its value is stored in the <span style="font-family: Courier New,Courier,monospace;">value</span> variable. The obtained value is printed to the screen. When the work with obtained value is finished, release it with the <span style="font-family: Courier New,Courier,monospace;">free()</span> function.</p>
<p>
The other types of metadata attributes can be obtained in the exactly same way. Just change the second parameter during calling the function to get different attributes of the metadata.
</p>
</li>
<li>Get the artwork of the file.

<p>Use the <span style="font-family: Courier New,Courier,monospace;">metadata_extractor_get_artwork()</span> function.</p>
<p>This function takes 4 parameters. The first one is the handle to the metadata extractor. Other parameters are [out] â€“ type parameters, so their values are fulfilled by the function. The first of them, the <span style="font-family: Courier New,Courier,monospace;">artwork</span> variable, is fulfilled with the encoded artwork image, the <span style="font-family: Courier New,Courier,monospace;">artwork_size</span> variable stores the size of the encoded artwork, and the <span style="font-family: Courier New,Courier,monospace;">artwork_mime</span> variable contains the mime type of the artwork. The obtained values are merely printed. Afterwards, release the memory allocated for the <span style="font-family: Courier New,Courier,monospace;">artwork</span> and <span style="font-family: Courier New,Courier,monospace;">artwork_mime</span> variables to avoid memory leaks.</p>

<pre class="prettyprint">
int artwork_size = 0;
void *artwork = NULL;
char *artwork_mime = NULL;

ret = metadata_extractor_get_artwork(g_metadata_h, &amp;artwork, &amp;artwork_size, &amp;artwork_mime);
printf(&quot;Artwork: size: %d, mime type: %s\n&quot;, artwork_size, artwork_mime);
free(artwork);
artwork = NULL;
free(artwork_mime);
artwork_mime = NULL;
</pre>
</li>

<li>Get synchronized lyrics from the file.
<p>Use the <span style="font-family: Courier New,Courier,monospace;">metadata_extractor_get_synclyrics()</span> function. It takes the following parameters:</p>
<ul>
<li>Handle to the metadata extractor</li>
<li>Index of the time/lyrics set</li>
<li>Time information of the index</li>
<li>Lyrics of the index</li>
</ul>

<p>The last 2 parameters are of the type [out].</p>

<pre class="prettyprint">
unsigned long time_info = 0;
char *lyrics = NULL;

ret = metadata_extractor_get_synclyrics(g_metadata_h, 1, &amp;time_info, &amp;lyrics);
printf(&quot;Synclyrics: time_info: %d, lyrics: %s\n&quot;, time_info, lyrics);
free(lyrics);
lyrics = NULL;
</pre>

<p>If the function returns <span style="font-family: Courier New,Courier,monospace;">METADATA_EXTRACTOR_ERROR_NONE</span>, no errors occurred and the time information and lyrics were correctly fulfilled by the function. Only their values are printed. Free the memory allocated for the lyrics to avoid memory leaks.</p>
</li>

<li>Get frames from video files.
<p>Use the following functions. The <span style="font-family: Courier New,Courier,monospace;">metadata_extractor_get_frame()</span> function gets the frame of a video media file without specifying the time when the frame appears. The <span style="font-family: Courier New,Courier,monospace;">metadata_extractor_get_frame_at_time()</span> function takes a timestamp as one of the parameters. This parameter defines when a specific frame appears in the video file.</p>

<pre class="prettyprint">
// Use metadata_extractor_get_frame()
int frame_size = 0;
void *frame = NULL;

ret = metadata_extractor_get_frame(g_metadata_h, &amp;frame, &amp;frame_size);
printf(&quot;Frame: size: %d\n&quot;, frame_size);
free(frame);
frame = NULL;

// Use metadata_extractor_get_frame_at_time()
unsigned long timestamp = 500;

ret = metadata_extractor_get_frame_at_time(g_metadata_h, timestamp, true, &amp;frame, &amp;frame_size);
printf(&quot;Frame at %d: size: %d\n&quot;, timestamp, frame_size);
free(frame);
frame = NULL;
</pre>

<p>Both functions take the handle to the metadata extractor as their first parameter. They also take the <span style="font-family: Courier New,Courier,monospace;">frame</span> and <span style="font-family: Courier New,Courier,monospace;">frame_size</span> variables to fulfill them. The difference is that the second function takes 2 more parameters. The first one was described above. It defines the timestamp from the beginning of the movie to the wanted frame. The second additional parameter is a Boolean value defining whether the user can get an accurate frame (if the value is <span style="font-family: Courier New,Courier,monospace;">true</span>) or only the nearest i-frame.</p>

<p>To check whether the functions are executed successfully, check the value returned by them. If it is <span style="font-family: Courier New,Courier,monospace;">METADATA_EXTRACTOR_ERROR_NONE</span>, no errors occurred and the frame has been successfully stored in the frame variable.</p>

<p>Release the memory allocated for the frame by calling the <span style="font-family: Courier New,Courier,monospace;">free()</span> function.</p></li>

<li>Clean up on the application end.</li>
</ol>


  <h2>Where to Go Next</h2> 
  <ul> 
	<li><a href="advanced_tutorial.htm">Advanced Tutorial</a></li>
	<li><a href="../../guide/media/metadata_extractor.htm">Metadata Extractor Programming Guide</a></li> 
	<li><a href="../../../../org.tizen.mobile.native.apireference/group__CAPI__METADATA__EXTRACTOR__MODULE.html">Metadata Extractor API Reference</a></li>    
  </ul> 
 
  <div id="footer"> 
   <hr size="1" /> 
   <font size="1">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</font> 
  </div> 

  <script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script> 
 
 </body>
</html>