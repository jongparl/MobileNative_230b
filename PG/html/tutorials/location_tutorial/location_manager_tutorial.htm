<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
 <head> 
  <script type="text/javascript" src="../../snippet.js"></script> 
  <meta http-equiv="Location-Type" content="text/html; charset=utf-8" /> 
  <link href="../../styles.css" rel="StyleSheet" type="text/css" /> 
  <link href="../../snippet.css" rel="StyleSheet" type="text/css" /> 
  <title>Location Manager Tutorial</title> 
 </head> 
 <body onload="prettyPrint()"> 
  <h1>Location Manager Tutorial</h1> 

<p>This tutorial demonstrates how you use various location-related features in your application.</p>

<p>API functions and data types are defined in the <span style="font-family: Courier New,Courier,monospace">&lt;locations.h&gt;</span> header. The header file has to be included in all applications that use the <a href="../../../../org.tizen.mobile.native.apireference/group__CAPI__LOCATION__MANAGER__MODULE.html">Location Manager</a> API.</p>

<p>To learn about the Location Manager API features, see the <a href="../../guide/location/location.htm">Location Programming Guide</a>.</p>

<p>This tutorial consists of the following parts:</p>
<ul>
<li><a href="#initial">Initialization and Prerequisites</a>
<p>Provides information about necessary steps before and after using this API.</p></li>

<li><a href="#last_known">Getting the Last Known Location</a> 
<p>Retrieving the last known position of the device.</p></li>

<li><a href="#update">Getting Location Updates</a>
<p>Acquire the device&#39;s position (given as coordinates) and keep tracking whenever the position is updated.</p></li>

<li><a href="#bound">Using Location Bounds</a>
<p>Create a location area and track its bounds.</p></li>

<li><a href="#satellite">Get Satellite Information</a>
<p>Provides information on how to acquire information on satellites, which connect with the device to get location information.</p></li>

</ul>



<h2 id="initial" name="initial">Initialization and Prerequisites</h2>
<ol><li><p>Create a location manager handle using the <span style="font-family: Courier New,Courier,monospace">location_manager_create()</span> function before you use it. For this example, the GPS is used as the source of the position data, so the first argument is <span style="font-family: Courier New,Courier,monospace">LOCATIONS_METHOD_GPS</span>. You can use other values of the <span style="font-family: Courier New,Courier,monospace">location_method_e</span> enumeration, such as <span style="font-family: Courier New,Courier,monospace">LOCATIONS_METHOD_HYBRID</span>.</p>
<pre class="prettyprint">
location_manager_h manager;
location_manager_create(LOCATIONS_METHOD_GPS, &amp;manager);
</pre>
<p>Each location manager is an independent service. Multiple location managers can be created in the same application to provide different services, such as GPS and Bluetooth. Callbacks are set for a given location manager and are called depending on whether the service was started for its manager.</p></li>

<li><p>Start the location service using the <span style="font-family: Courier New,Courier,monospace">location_manager_start()</span> function. This call is asynchronous and only initiates the process of starting the service of the location manager. Once the manager is started, the registered callbacks are invoked when their corresponding events take place. To know when the service becomes enabled, use the <span style="font-family: Courier New,Courier,monospace">location_manager_set_service_state_changed_cb()</span> function.</p>
<pre class="prettyprint">
location_manager_start(manager);</pre></li>

<li><p>Getting the location service is power consuming, so if the service is not used, you can stop updating the location using the <span style="font-family: Courier New,Courier,monospace">location_manager_stop()</span> function. Call the <span style="font-family: Courier New,Courier,monospace">location_manager_start()</span> function again if the update position information is needed.</p>
<pre class="prettyprint">location_manager_stop(manager);</pre></li>

<li><p>At the end of the application, destroy all used resources, such as the location manager (<span style="font-family: Courier New,Courier,monospace">location_manager_destroy()</span>):</p>
<pre class="prettyprint">
location_manager_destroy(manager);
manager = NULL;
</pre>
<p>If you destroy the handle, there is no need to call the <span style="font-family: Courier New,Courier,monospace">location_manager_stop()</span> to stop the service, the service is automatically stopped. Also, you do not have to unset previously set callbacks.</p></li></ol>

    <h2 id="last_known" name="last_known">Getting the Last Known Location</h2>  
  <p>To synchronously retrieve the last known location of the device:</p> 
  <ol> 
   <li><p>Create and initialize the required class instances needed for your application.</p></li> 
   <li> <p>Create the variable for <span style="font-family: Courier New,Courier,monospace">location_manager_h</span> with the method you want to apply for the application:</p> <pre class="prettyprint">
location_manager_h manager;
int ret = location_manager_create(LOCATIONS_METHOD_GPS, &amp;manager);
</pre>  </li> 

	<li>Register a callback function for location service state changes and start the Location Manager: 
	<pre class="prettyprint">
ret = location_manager_set_service_state_changed_cb(manager, __state_changed_cb, NULL);
ret = location_manager_start(manager);</pre>
	<p>The function <span style="font-family: Courier New,Courier,monospace">__state_changed_cb</span> is a callback function, which is called when the status of location service state changes. You have to define and implement the callback.</p></li>
<li>After starting the Location Manager, call the <span style="font-family: Courier New,Courier,monospace">location_manager_get_last_location()</span> function to get the last location information including altitude, latitude, and direction:
<pre class="prettyprint">
double altitude, latitude, longitude, climb, direction, speed;
double horizontal, vertical;
location_accuracy_level_e level;
time_t timestamp;
ret = location_manager_get_last_location(manager, &amp;altitude, &amp;latitude, &amp;longitude, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;climb, &amp;direction, &amp;speed, &amp;level, &amp;horizontal, &amp;vertical, &amp;timestamp);</pre>

<p>The function returns the last location stored in the system. It is recommended to use this function instead of repeatedly requesting current locations to spare the Location Manager from running costly positioning systems.</p></li>

<li>When you no longer need the Location Manager, destroy it. You must also unset all connected callback functions and stop the Location Manager:
<pre class="prettyprint">
location_manager_unset_service_state_changed_cb(manager);
location_manager_stop(manager);
location_manager_destroy(manager);</pre></li></ol>

<h2 id="update" name="update">Getting Location Updates</h2>
<p>You can acquire the device&#39;s position (given as coordinates) and convert it to the corresponding address. You can get a notification of the position update periodically using the position update callback. The position update callback is invoked periodically, receiving the device&#39;s current position with every call.</p>
<ol><li><p>Register the callback using the <span style="font-family: Courier New,Courier,monospace">location_manager_set_position_updated_cb()</span> function:</p>
<pre class="prettyprint">location_manager_set_position_updated_cb(manager, position_updated, 2, NULL);</pre>
<p>The third parameter determines the frequency of callback calls. In this example, the callback is called every 2 seconds.</p></li>
<li><p>When the update is received, you can, for example, update the variables that store the current position:</p>
<pre class="prettyprint">
static double user_latitude, user_longitude;
static void position_updated(double latitude, double longitude, double altitude, time_t timestamp, void *user_data) 
{
&nbsp;&nbsp;&nbsp;user_latitude = latitude;
&nbsp;&nbsp;&nbsp;user_longitude = longitude;
}
</pre>

	  <table class="note"> 
	   <tbody> 
		<tr> 
		 <th class="note">Note</th> 
		</tr> 
		<tr> 
		 <td class="note">The callback is called only if the Location Manager has been started. The same holds for all other callbacks registered with the manager.</td> 
		</tr> 
	   </tbody> 
	  </table> </li></ol>

<h2 id="bound" name="bound">Using Location Bounds</h2>
<p>To use location bounds:</p>
<ol>
<li>Create location bounds with the required type (rectangle, circle, or polygon) needed for your application (each type has their own API sets):
<pre class="prettyprint">
int poly_size = 3; // Triangle shaped bounds
location_coords_s coord_list[poly_size];
coord_list[0].latitude = 10;	// Temporary value
coord_list[0].longitude = 10;
coord_list[1].latitude = 20;
coord_list[1].longitude = 20;
coord_list[2].latitude = 30;
coord_list[2].longitude = 30;
location_bounds_h bounds_poly;
ret = location_bounds_create_polygon(coord_list, poly_size, &amp;bounds_poly);
</pre>
<p>When a circular bound is needed, use the <span style="font-family: Courier New,Courier,monospace">location_bounds_create_circle()</span> function.</li>

<li>Get the coordinates of the generated polygon bounds. Register a callback function to notify you of the polygon coordinates:
<pre class="prettyprint">
ret = location_bounds_foreach_polygon_coords(bounds_poly, capi_poly_coords_cb, NULL);</pre>
<p>For the callback function (the second parameter in the function above) implement the function separately:</p>
<pre class="prettyprint">
static bool capi_poly_coords_cb(location_coords_s coords, void *user_data)
{
&nbsp;&nbsp;&nbsp;// React to the coordinates
&nbsp;&nbsp;&nbsp;printf(&quot;location_bounds_foreach_rect_coords(latitude : %lf, longitude: %lf) \n&quot;, coords.latitude, coords.longitude);
&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
<li>After using the polygon bounds, destroy them:
<pre class="prettyprint">
location_bounds_destroy(bounds_poly);</pre></li>
</ol>	  

<h2 id="satellite" name="satellite">Getting Satellite Information</h2>
<p>You can acquire and update information of the satellite connected with the device. The information includes azimuth, elevation, PRN, SNR, and NMEA data. You can also get a notification of the satellite update periodically using the satellite update callback. The satellite update callback is invoked periodically, receiving the information of connected satellites with every call.</p>
<ol><li><p>Register the callback using the <span style="font-family: Courier New,Courier,monospace">location_manager_set_satellite_updated_cb()</span> function:</p>
<pre class="prettyprint">
gps_status_set_satellite_updated_cb(manager, capi_gps_status_satellite_updated_cb, 10, NULL);

gps_status_foreach_satellites_in_view(manager, capi_gps_status_get_satellites_cb,NULL);
</pre>
<p>The third parameter determines the frequency of callback calls. In this example, the callback is called every 10 seconds.</p> </li>
<li>When the update is received, variables that store current satellite information are updated:</p>
<pre class="prettyprint">
static int numofactive, numofinview;
static void capi_gps_status_satellite_updated_cb(int num_of_active, int num_of_inview, time_t timestamp, void *user_data) 
{
&nbsp;&nbsp;&nbsp;numofactive = num_of_active;
&nbsp;&nbsp;&nbsp;numofinview = num_of_inview;
}
int cur_azimuth, cur_elevation, cur_prn, cur_snr;
static bool capi_gps_status_get_satellites_cb(unsigned int azimuth, unsigned int elevation, unsigned int prn, int snr, bool is_in_use, void *user_data)
{
&nbsp;&nbsp;&nbsp;cur_azimuth = azimuth;
&nbsp;&nbsp;&nbsp;cur_elevation = elevation;
&nbsp;&nbsp;&nbsp;cur_prn = prn;
&nbsp;&nbsp;&nbsp;cur_snr = snr;
&nbsp;&nbsp;&nbsp;return true;
}
</pre>

	  <table class="note"> 
	   <tbody> 
		<tr> 
		 <th class="note">Note</th> 
		</tr> 
		<tr> 
		 <td class="note">Note that the callback is called only if the location manager has been started. The same holds for all other callbacks registered with the manager.</td> 
		</tr> 
	   </tbody> 
	  </table> </li></ol>
	  
  <h2>Where to Go Next</h2> 
  <ul> 
   <li><a href="location_tutorial.htm">Location Tutorials</a></li> 
   <li><a href="../../guide/location/location.htm">Location Programming Guide</a></li> 
   <li><a href="../../../../org.tizen.mobile.native.apireference/group__CAPI__LOCATION__MANAGER__MODULE.html">Location Manager API Reference</a></li>
  </ul> 
  
  <div id="footer"> 
   <hr size="1" /> 
   <font size="1">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Location License</a>.</font> 
  </div> 
  <!--start--> 
  <script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script> 
  <!--end-->  
 </body>
</html>