<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
 <head> 
  <script type="text/javascript" src="../../snippet.js"></script> 
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
  <link href="../../styles.css" rel="StyleSheet" type="text/css" /> 
  <link href="../../snippet.css" rel="StyleSheet" type="text/css" /> 
  <title>Application Preferences Tutorial</title> 
 </head> 
 <body onload="prettyPrint()"> 
  <!--<div id="banner">
Tizen</div>--> 
<h1>Application Preferences Tutorial</h1> 

<p>This tutorial demonstrates how you can manage application preferences.</p>
<p>API functions and data types are defined in the <span style="font-family: Courier New,Courier,monospace">&lt;app.h&gt;</span> header file, which has to be included in all applications that use the <a href="../../../../org.tizen.mobile.native.apireference/group__CAPI__PREFERENCE__MODULE.html">Preference API</a>.</p>
<p>To learn about the Preference API features, see the <a href="../../guide/app/application.htm">Application Framework Programming Guide</a>.</p>

<p>This tutorial consists of the following parts:</p>
<ul>
 <li><a href="#manage">Managing Application Preferences</a>
  <p>Manage application preferences.</p>
 </li>
</ul>

<h2 id="manage" name="manage">Managing Application Preferences</h2>
<p>This tutorial shows you how to:</p>
<ul>
 <li>Create a new key-value pair</li>
 <li>Retrieve an existing key value</li>
 <li>Track record changes</li>
 <li>Check and delete a record</li>
</ul>

<h3>Storing and Retrieving Simple Type Variables</h3>
<p>To store a variable, you must create a key-value pair. Use the following functions to create a key-value pair for a specific simple type:</p>

<ul><li><span style="font-family: Courier New,Courier,monospace">preference_set_int (const char *key, int value)</span></li>
<li><span style="font-family: Courier New,Courier,monospace">preference_set_double (const char *key, double value)</span></li>
<li><span style="font-family: Courier New,Courier,monospace">preference_set_boolean (const char *key, bool value)</span></li></ul>

<p>Before storing or retrieving a variable, you can check whether it exists with:</p>

<ul><li><span style="font-family: Courier New,Courier,monospace">preference_is_existing (const char *key, bool *existing)</span></li></ul>

<p>Use the following functions to retrieve a stored variable of a given simple type:</p>

<ul><li><span style="font-family: Courier New,Courier,monospace">preference_get_int (const char *key, int *value)</span></li>
<li><span style="font-family: Courier New,Courier,monospace">preference_get_double (const char *key, double *value)</span></li>
<li><span style="font-family: Courier New,Courier,monospace">preference_get_boolean (const char *key, bool *value)</span></li></ul>


<pre class="prettyprint">const char *integer_key = &quot;integer_key&quot;;
int integer_value = 1;
int integer_output;

preference_set_int(integer_key, integer_value);

preference_is_existing(integer_key,&amp;existing);

preference_get_int(integer_key, &amp;integer_output);</pre>


<h3>Storing and Retrieving String Variables</h3>
<p>Use the following functions to store and retrieve string variables:</p>

<ul>
 <li><span style="font-family: Courier New,Courier,monospace">preference_set_string (const char *key, const char *value)</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">preference_get_string (const char *key, char **value)</span></li>
</ul>

<p>Release the value returned by the get function with the <span style="font-family: Courier New,Courier,monospace">free()</span> function.</p>
<pre class="prettyprint">const char *string_key = &quot;string_key&quot;;
const char *string_value = &quot;Sample content&quot;;
char *string_output;

preference_set_string(string_key, string_value);

preference_is_existing(string_key,&amp;existing);

preference_get_string(string_key, &amp;string_output);

free(string_output);</pre>

<h3>Tracking Variables</h3>
<p>You can set a different callback function to each variable. The callback function is invoked each time the variable is changed.</p>

<pre class="prettyprint">int previous_value;

preference_set_changed_cb(integer_key, preference_changed_cb_impl, &amp;previous_value);</pre>

<p>You can pass custom parameters to the callback function in the <span style="font-family: Courier New,Courier,monospace">user_data</span> field.</p>

<pre class="prettyprint">void preference_changed_cb_impl(const char *key, void *user_data)
{
&nbsp;&nbsp;&nbsp;int ret = 0;
&nbsp;&nbsp;&nbsp;int integer_output = 0;

&nbsp;&nbsp;&nbsp;fprintf(stderr,&quot;[preference_changed_cb_impl]\n&quot;);
&nbsp;&nbsp;&nbsp;preference_get_int(key, &amp;integer_output);
     
&nbsp;&nbsp;&nbsp;fprintf(stderr,&quot;Key: %s has changed its value from %d to %d \n&quot;, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;key, *((int*)user_data), integer_output);
&nbsp;&nbsp;&nbsp;*((int*)user_data) = integer_output;
}</pre>


<p>You can unset a callback function based on a variable key.</p>
<pre class="prettyprint">preference_unset_changed_cb (const char *key);</pre>


<h3>Listing All Records</h3>
<p>You can access all the records with the foreach function. The function calls a specific callback function for each key-value pair in the database. You can pass additional data to the function in the <span style="font-family: Courier New,Courier,monospace">user_data</span> field.</p>

<pre class="prettyprint">preference_foreach_item(preference_foreach_item_cb, NULL);</pre>

<p>If the callback function returns <span style="font-family: Courier New,Courier,monospace">false</span>, or if all the records have been opened, the foreach function ends.</p>
 
<pre class="prettyprint">bool preference_foreach_item_cb(const char *key, void *user_data)
{
&nbsp;&nbsp;&nbsp;fprintf(stderr,&quot;[preference_foreach_item_cb]\n&quot;);
&nbsp;&nbsp;&nbsp;fprintf(stderr,&quot;Key found: %s\n&quot;, key);
&nbsp;&nbsp;&nbsp;return true;
}</pre>

<h3>Deleting Records</h3>
<p>You can delete records one by one by using a unique key. You can also delete all records for an application with the <span style="font-family: Courier New,Courier,monospace">remove_all()</span> function.</p>

<pre class="prettyprint">preference_remove (const char *key)</pre>

<pre class="prettyprint">preference_remove_all(void)</pre>

<h2>Where to Go Next</h2>
<ul>
 <li><a href="app_tutorial.htm">Application Framework Tutorials</a></li>
 <li><a href="../../guide/app/application.htm">Application Framework Programming Guide</a></li>
 <li><a href="../../../../org.tizen.mobile.native.apireference/group__CAPI__PREFERENCE__MODULE.html">Preference API Reference</a></li>
</ul>

  <div id="footer"> 
   <hr size="1" /> 
   <font size="1">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</font> 
  </div> 
  <!--start--> 
  <script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script> 
  <!--end-->  
 </body>
</html>