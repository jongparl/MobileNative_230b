<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
 <head> 
  <script type="text/javascript" src="../../snippet.js"></script> 
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
  <link href="../../styles.css" rel="StyleSheet" type="text/css" /> 
  <link href="../../snippet.css" rel="StyleSheet" type="text/css" /> 
  <title>Data Control Tutorial</title> 
 </head> 
 
 <body onload="prettyPrint()"> 
  <!--<div id="banner">
Tizen</div>--> 
  <h1>Data Control Tutorial</h1> 

  <p>This tutorial demonstrates how you can get, set, add, and remove map data, and insert, select, update, and delete SQL data.</p>
  <p>API functions and data types are defined in the <span style="font-family: Courier New,Courier,monospace">&lt;data_control.h&gt;</span> header file, which has to be included in all applications that use the <a href="../../../../org.tizen.mobile.native.apireference/group__CAPI__DATA__CONTROL__MODULE.html">Data Control API</a>.</p>
  <p>To learn about the Data Control API features, see the <a href="../../guide/app/data_controls.htm">Data Controls Programming Guide</a>.</p>

  <p>This tutorial consists of the following parts:</p>
  
  <ul>
   <li><a href="#init">Initialization and Prerequisites</a></li>
   <li><a href="#map1">Working with Map-type Data Controls</a>
    <p>Work with Map-type data controls.</p>
   </li>
   <li><a href="#sql1">Working with SQL-type Data Controls</a>
    <p>Work with SQL-type data controls.</p>
   </li>
   <li><a href="#map2">Providing Map-type Data Controls</a>
    <p>Provide Map-type data controls.</p>
   </li>
   <li><a href="#sql2">Providing SQL-type Data Controls</a>
    <p>Provide SQL-type data controls.</p>
   </li>
  </ul> 

  <h2 id="init" name="init">Initialization and Prerequisites</h2>
  
  <p>Specify the tags for data control in the <span style="font-family: Courier New,Courier,monospace">&lt;manifest.xml&gt;</span> file (provider application). The following example shows how to specify the <span style="font-family: Courier New,Courier,monospace">&lt;datacontrol&gt;</span> tags:</p>
  <pre class="prettyprint">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;manifest xmlns=&quot;http://tizen.org/ns/packages&quot; package=&quot;@PACKAGE_NAME@&quot; version=&quot;@VERSION@&quot; install-location=&quot;internal-only&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;label&gt;datacontrolprovider&lt;/label&gt;
&nbsp;&nbsp;&nbsp;&lt;author email=&quot;PUT YOUR EMAIL&quot; href=&quot;www.samsung.com&quot;&gt;PUT YOUR NAME&lt;/author&gt;
&nbsp;&nbsp;&nbsp;&lt;description&gt;datacontrolprovider&lt;/description&gt;
&nbsp;&nbsp;&nbsp;&lt;ui-application component-type=&quot;svcapp&quot; appid=&quot;org.tizen.datacontrolprovider&quot; exec=&quot;/opt/apps/org.tizen.datacontrolprovider/bin/datacontrolprovider&quot; nodisplay=&quot;true&quot; multiple=&quot;false&quot; type=&quot;capp&quot; taskmanage=&quot;true&quot; auto-restart=&quot;false&quot; on-boot=&quot;false&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;datacontrol providerid=&quot;http://samsung.com/datacontrol/provider/datacontrolprovider&quot; access=&quot;ReadWrite&quot; type=&quot;Sql&quot;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;datacontrol providerid=&quot;http://samsung.com/datacontrol/provider/datacontrolprovider&quot; access=&quot;ReadWrite&quot; type=&quot;Map&quot;/&gt;
&nbsp;&nbsp;&nbsp;&lt;/ui-application&gt;
&lt;/manifest&gt;
</pre> 
  
<h2 id="map1" name="map1">Working with Map-type Data Controls</h2>

<ol>

<li>
<p>Create a provider handle:</p>
<pre class="prettyprint">
data_control_h provider;
data_control_map_response_cb map_callback;

int create_map_data_control_provider_handle(void)
{
&nbsp;&nbsp;&nbsp;const char *provider_id = &quot;http://tizen.org/datacontrol/provider/datacontrolprovider&quot;;
&nbsp;&nbsp;&nbsp;const char *data_id = &quot;MapRepository&quot;;
&nbsp;&nbsp;&nbsp;int result = 0;

&nbsp;&nbsp;&nbsp;result = data_control_map_create(&amp;provider);
&nbsp;&nbsp;&nbsp;if (result != DATA_CONTROL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;creating data control provider is failed with error: %d&quot;, result );
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return result;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;result = data_control_map_set_provider_id(provider, provider_id);
&nbsp;&nbsp;&nbsp;if (result != DATA_CONTROL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;setting providerid is failed with error: %d&quot;, result);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return result;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;result = data_control_map_set_data_id(provider, data_id);
&nbsp;&nbsp;&nbsp;if (result != DATA_CONTROL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;setting dataid is failed with error: %d&quot;, result);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return result;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return result;
}</pre>
</li>
   <li>
   <p>Manage the Map-type data controls.</p>
   <p>Register a callback function for the key-value structured data control response. The application is notified when a data control response is received from the provider.</p>
<pre class="prettyprint">
void map_get_response_cb(int request_id, data_control_h provider,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char **result_value_list, bool provider_result, const char *error)
{
&nbsp;&nbsp;&nbsp;if (provider_result)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The get operation is successful&quot;);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The get operation for the request %d is failed. error message: %s&quot;, request_id, error);
&nbsp;&nbsp;&nbsp;}
}

void map_set_response_cb(int request_id, data_control_h provider, bool provider_result, const char *error)
{
&nbsp;&nbsp;&nbsp;if (provider_result)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The set operation is successful&quot;);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The set operation for the request %d is failed. error message: %s&quot;, request_id, error);
&nbsp;&nbsp;&nbsp;}
}

void map_add_response_cb(int request_id, data_control_h provider, bool provider_result, const char *error)
{
&nbsp;&nbsp;&nbsp;if (provider_result)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The add operation is successful&quot;);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The add operation for the request %d is failed. error message: %s&quot;, request_id, error);
&nbsp;&nbsp;&nbsp;}
}

void map_remove_response_cb(int request_id, data_control_h provider, bool provider_result, const char *error)
{
&nbsp;&nbsp;&nbsp;if (provider_result)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The remove operation is successful&quot;);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The remove operation for the request %d is failed. error message: %s&quot;, request_id, error);
&nbsp;&nbsp;&nbsp;}
}

int data_control_map_consumer(void)
{
&nbsp;&nbsp;&nbsp;int result = 0;
&nbsp;&nbsp;&nbsp;int req_id = 0;
&nbsp;&nbsp;&nbsp;char *key = &quot;key&quot;;
&nbsp;&nbsp;&nbsp;char *value = &quot;value&quot;;
&nbsp;&nbsp;&nbsp;char *old_value = &quot;old value&quot;;
&nbsp;&nbsp;&nbsp;char *new_value = &quot;new value&quot;;
&nbsp;&nbsp;&nbsp;data_control_h provider;

&nbsp;&nbsp;&nbsp;map_callback.get_cb = map_get_response_cb;
&nbsp;&nbsp;&nbsp;map_callback.set_cb = map_set_response_cb;
&nbsp;&nbsp;&nbsp;map_callback.add_cb = map_add_response_cb;
&nbsp;&nbsp;&nbsp;map_callback.remove_cb = map_remove_response_cb;

&nbsp;&nbsp;&nbsp;result = create_map_data_control_provider_handle();
&nbsp;&nbsp;&nbsp;if (result != DATA_CONTROL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;creating and setting data control provider is failed with error %d&quot;, result);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return result;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;result = data_control_map_register_response_cb(provider, &amp;map_callback);
&nbsp;&nbsp;&nbsp;if (result != DATA_CONTROL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Registering the callback function is failed with error: %d&quot;, result);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return result;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;result = data_control_map_get(provider, key, &amp;req_id);
&nbsp;&nbsp;&nbsp;if (result != DATA_CONTROL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Getting the value list of the key(%s) is failed with error: %d&quot;, key, result);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;req_id is %d&quot;, req_id);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;result = data_control_map_set(provider, key, old_value, new_value, &amp;req_id);
&nbsp;&nbsp;&nbsp;if (result != DATA_CONTROL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Replacing old_value(%s) with new_value(%s) is failed with error: %d&quot;, old_value, new_value, result);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;req_id is %d&quot;, req_id);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;result = data_control_map_add(provider, key, value, &amp;req_id);
&nbsp;&nbsp;&nbsp;if (result != DATA_CONTROL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Adding %s-%s pair is failed with error: %d&quot;, key, value, result);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;req_id is %d&quot;, req_id);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;result = data_control_map_remove(provider, key, value, &amp;req_id);
&nbsp;&nbsp;&nbsp;if (result != DATA_CONTROL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Removing %s-%s pair is failed with error: %d&quot;, key, value, result);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;req_id is %d&quot;, req_id);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return result;
}
</pre>
   </li>

   <li>
   <p>Destroy the provider handle:</p>
   <pre class="prettyprint">
int destroy_map_data_control_provider_handle()
{
&nbsp;&nbsp;&nbsp;int result = 0;
&nbsp;&nbsp;&nbsp;result = data_control_map_destroy(provider);
&nbsp;&nbsp;&nbsp;if (result != DATA_CONTROL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Destroying data control provider is failed with error: %d&quot;, result);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;return result;
}</pre>
&nbsp;&nbsp;&nbsp;</li>

</ol>


<h2 id="sql1" name="sql1">Working with SQL-type Data Controls</h2>

<ol>

<li>
<p>Create a provider handle:</p>
<pre class="prettyprint">
data_control_h provider;
data_control_sql_response_cb sql_callback;

int create_sql_data_control_provider_handle(void)
{
&nbsp;&nbsp;&nbsp;const char *provider_id = &quot;http://tizen.org/datacontrol/provider/datacontrolprovider&quot;;
&nbsp;&nbsp;&nbsp;const char *data_id = &quot;SqlRepository&quot;;
&nbsp;&nbsp;&nbsp;int result = 0;

&nbsp;&nbsp;&nbsp;result = data_control_sql_create(&amp;provider);
&nbsp;&nbsp;&nbsp;if (result != DATA_CONTROL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;creating data control provider is failed with error: %d&quot;, result );
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return result;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;result = data_control_sql_set_provider_id(provider, provider_id);
&nbsp;&nbsp;&nbsp;if (result != DATA_CONTROL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;setting providerid is failed with error: %d&quot;, result);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return result;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;result = data_control_sql_set_data_id(provider, data_id);
&nbsp;&nbsp;&nbsp;if (result != DATA_CONTROL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;setting dataid is failed with error: %d&quot;, result);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return result;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return result;
}
</pre>
</li>

<li>
<p>Manage the SQL-type data controls.</p>
<p>Register a callback function for the SQL data control response. The application is notified when a data control response is received from the provider.</p>
<pre class="prettyprint">
void sql_delete_response_cb(int request_id, data_control_h provider, bool provider_result, const char *error)
{
&nbsp;&nbsp;&nbsp;if (provider_result)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The delete operation is successful&quot;);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The delete operation for the request %d is failed. error message: %s&quot;, request_id, error);
&nbsp;&nbsp;&nbsp;}
}

void sql_insert_response_cb(int request_id, data_control_h provider, long long inserted_row_id, bool provider_result, const char *error)
{
&nbsp;&nbsp;&nbsp;if (provider_result)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The insert operation is successful&quot;);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The insert operation for the request %d is failed. error message: %s&quot;, request_id, error);
&nbsp;&nbsp;&nbsp;}
}

void sql_select_response_cb(int request_id, data_control_h provider, result_set_cursor cursor, bool provider_result, const char *error)
{
&nbsp;&nbsp;&nbsp;char person_name[32] = {0,};
&nbsp;&nbsp;&nbsp;long long person_number = -1;

&nbsp;&nbsp;&nbsp;if (provider_result)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The select operation is successful&quot;);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The select operation for the request %d is failed. error message: %s&quot;, request_id, error);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;data_control_sql_step_first(cursor);
&nbsp;&nbsp;&nbsp;data_control_sql_get_text_data(cursor, 0, person_name);
&nbsp;&nbsp;&nbsp;data_control_sql_get_int64_data(cursor, 1, &amp;person_number);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The person %s has the number %l&quot;, person_name, person_number);
}

void sql_update_response_cb(int request_id, data_control_h provider, bool provider_result, const char *error)
{
&nbsp;&nbsp;&nbsp;if (provider_result)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The update operation is successful&quot;);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The update operation for the request %d is failed. error message: %s&quot;, request_id, error);
&nbsp;&nbsp;&nbsp;}
}

data_control_sql_response_cb sql_callback;

int data_control_sql_consumer()
{
&nbsp;&nbsp;&nbsp;int result = 0;
&nbsp;&nbsp;&nbsp;int req_id = 0;
&nbsp;&nbsp;&nbsp;bundle *b = NULL;
&nbsp;&nbsp;&nbsp;char *column_list[2];
&nbsp;&nbsp;&nbsp;column_list[0] = &quot;WORD&quot;;
&nbsp;&nbsp;&nbsp;column_list[1] = &quot;WORD_DESC&quot;;
&nbsp;&nbsp;&nbsp;const char *where = &quot;WORD = 'test'&quot;;
&nbsp;&nbsp;&nbsp;const char *order = &quot;WORD ASC&quot;;
&nbsp;&nbsp;&nbsp;const char *where_delete = &quot;group = 'friend'&quot;;

&nbsp;&nbsp;&nbsp;sql_callback.delete_cb = sql_delete_response_cb;
&nbsp;&nbsp;&nbsp;sql_callback.insert_cb = sql_insert_response_cb;
&nbsp;&nbsp;&nbsp;sql_callback.select_cb = sql_select_response_cb;
&nbsp;&nbsp;&nbsp;sql_callback.update_cb = sql_update_response_cb;

&nbsp;&nbsp;&nbsp;result = data_control_sql_register_response_cb(provider, &amp;sql_callback);
&nbsp;&nbsp;&nbsp;if (result != DATA_CONTROL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Registering the callback function is failed with error: %d&quot;, result);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return result;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;b = bundle_create();
&nbsp;&nbsp;&nbsp;bundle_add(b, &quot;WORD&quot;, &quot;test&quot;);
&nbsp;&nbsp;&nbsp;bundle_add(b, &quot;WORD_DESC&quot;, &quot;test description&quot;);

&nbsp;&nbsp;&nbsp;result = data_control_sql_insert(provider, b, &amp;req_id);
&nbsp;&nbsp;&nbsp;if (result != DATA_CONTROL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Inserting is failed with error: %d&quot;, result);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;req_id is %d&quot;, req_id);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;result = data_control_sql_select(provider, column_list, 2, where, order, &amp;req_id);
&nbsp;&nbsp;&nbsp;if (result != DATA_CONTROL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Selecting is failed with error: %d&quot;, result);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;req_id is %d&quot;, req_id);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;bundle_add(b, &quot;WORD&quot;, &quot;test_new&quot;);
&nbsp;&nbsp;&nbsp;result = data_control_sql_update(provider, b, where, &amp;req_id);
&nbsp;&nbsp;&nbsp;if (result != DATA_CONTROL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Updating is failed with error: %d&quot;, result);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;req_id is %d&quot;, req_id);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;result = data_control_sql_delete(provider, where_delete, &amp;req_id);
&nbsp;&nbsp;&nbsp;if (result != DATA_CONTROL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Deleting is failed with error: %d&quot;, result);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;req_id is %d&quot;, req_id);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;bundle_free(b);
&nbsp;&nbsp;&nbsp;return result;
}
</pre>
</li>

<li>
<p>Destroy the provider handle:</p>
<pre class="prettyprint">
int destroy_sql_data_control_provider_handle()
{
&nbsp;&nbsp;&nbsp;int result = 0;
&nbsp;&nbsp;&nbsp;result = data_control_sql_destroy(provider);
&nbsp;&nbsp;&nbsp;if (result != DATA_CONTROL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Destroying data control provider is failed with error: %d&quot;, result);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;return result;
}
</pre>
</li>

</ol>

<h2 id="map2" name="map2">Providing Map-type Data Controls</h2>

<ol>

<li>
<p>Initialize the data control provider.</p>

<p>The <span style="font-family: Courier New,Courier,monospace">data_control_provider_map_cb</span> is defined for the callback functions of the Map-type control requests.</p>

<pre class="prettyprint">
typedef void (*data_control_provider_map_get_value_request_cb)(int request_id, data_control_h provider, const char *key);

typedef void (*data_control_provider_map_set_value_request_cb)(int request_id, data_control_h provider, const char *key, const char *old_value, const char *new_value);

typedef void (*data_control_provider_map_add_value_request_cb)(int request_id, data_control_h provider, const char *key, const char *value);

typedef void (*data_control_provider_map_remove_value_request_cb)(int request_id, data_control_h provider, const char *key, const char *value);

typedef struct
{
&nbsp;&nbsp;&nbsp;data_control_provider_map_get_value_request_cb get_cb;
&nbsp;&nbsp;&nbsp;data_control_provider_map_set_value_request_cb set_cb;
&nbsp;&nbsp;&nbsp;data_control_provider_map_add_value_request_cb add_cb;
&nbsp;&nbsp;&nbsp;data_control_provider_map_remove_value_request_cb remove_cb;
}
data_control_provider_map_cb;
</pre>

<p>Register a callback function for the map data control request. The provider is notified when a data control request is received from a client application.</p>

<pre class="prettyprint">
data_control_provider_map_cb *map_provider_callback;
bundle *MapRepository;

void initialize_map_data_control_provider()
{
&nbsp;&nbsp;&nbsp;int result = DATA_CONTROL_ERROR_NONE;
&nbsp;&nbsp;&nbsp;MapRepository = bundle_create();

&nbsp;&nbsp;&nbsp;map_provider_callback = (data_control_provider_map_cb *)malloc(sizeof(data_control_provider_map_cb));
&nbsp;&nbsp;&nbsp;malloc(sizeof(data_control_provider_map_cb));
&nbsp;&nbsp;&nbsp;map_provider_callback-&gt;get_cb = get_value_request_cb;
&nbsp;&nbsp;&nbsp;//map_provider_callback-&gt;add_cb = add_value_request_cb;
&nbsp;&nbsp;&nbsp;//map_provider_callback-&gt;remove_cb = remove_value_request_cb;
&nbsp;&nbsp;&nbsp;map_provider_callback-&gt;set_cb = set_value_request_cb;

&nbsp;&nbsp;&nbsp;result = data_control_provider_map_register_cb(map_provider_callback);
&nbsp;&nbsp;&nbsp;if (result != DATA_CONTROL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG,&quot;data_control_provider_map_cb failed with error: %d&quot;,result);
&nbsp;&nbsp;&nbsp;}
}
</pre>

</li>

<li>

<p>Provide the data.</p>

<p>When the request for obtaining the value list is received from the key-value structured data control consumer, the <span style="font-family: Courier New,Courier,monospace">get_value_request_cb()</span> function is called. The provider sends the value using the <span style="font-family: Courier New,Courier,monospace">data_control_provider_send_map_get_value_result()</span> function.</p>

<pre class="prettyprint">
void get_value_request_cb(int request_id, data_control_h provider, const char *key)
{
&nbsp;&nbsp;&nbsp;int len = 0;
&nbsp;&nbsp;&nbsp;char message[50];
&nbsp;&nbsp;&nbsp;memset(message,0,50);

&nbsp;&nbsp;&nbsp;const char **str_arr = bundle_get_str_array(MapRepository, key, &amp;len);

&nbsp;&nbsp;&nbsp;if (!str_arr)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sprintf(message, &amp;No such key present -%s&amp;, key);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data_control_provider_send_error(request_id, message);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;int ret = data_control_provider_send_map_get_value_result(request_id, (char **)str_arr, len);
&nbsp;&nbsp;&nbsp;if (ret != DATA_CONTROL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG,&amp;send_map_get_result failed with error: %d&amp;,ret);
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>

<li>
<p>Manage the data.</p>

<p>When the request for replacing the value list is received from the key-value structured data control consumer, the <span style="font-family: Courier New,Courier,monospace">set_value_request_cb()</span> function is called.</p>
<p>When the request for adding or removing the value list is received from the key-value structured data control consumer, the <span style="font-family: Courier New,Courier,monospace">add_value_request_cb()</span> or <span style="font-family: Courier New,Courier,monospace">remove_value_request_cb()</span> function is called.</p>

<pre class="prettyprint">
void set_value_request_cb(int request_id, data_control_h provider, const char *key, const char *old_value, const char *new_value)
{
&nbsp;&nbsp;&nbsp;int len = 0, i = 0;
&nbsp;&nbsp;&nbsp;char message[50];
&nbsp;&nbsp;&nbsp;memset(message,0,50);

&nbsp;&nbsp;&nbsp;const char **str_arr = bundle_get_str_array(MapRepository, key, &amp;len);
&nbsp;&nbsp;&nbsp;if (str_arr)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char **val_arr = (char**) calloc(len, sizeof(char*));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; len; i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (strcmp(str_arr[i], old_value) != 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;val_arr[i] = strdup(str_arr[i]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;val_arr[i] = strdup(new_value);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bundle_del(MapRepository, key);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bundle_add_str_array(MapRepository, key, (const char**)val_arr, len);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(val_arr);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sprintf(message, &quot;No such key present -%s&quot;, key);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data_control_provider_send_error(request_id, message);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;int ret = data_control_provider_send_map_result(request_id);
&nbsp;&nbsp;&nbsp;if (ret != DATA_CONTROL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;send_map_result failed with error: %d&quot;,ret);
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>

<li>
<p>Finalize the data control provider:</p>

<pre class="prettyprint">
void finalize_map_data_control_test()
{
&nbsp;&nbsp;&nbsp;bundle_free(MapRepository);
&nbsp;&nbsp;&nbsp;data_control_provider_map_unregister_cb();
&nbsp;&nbsp;&nbsp;free(map_provider_callback);
}
</pre>

</li>

</ol>

<h2 id="sql2" name="sql2">Providing SQL-type Data Controls</h2>

<ol>

<li>

<p>Initialize the data control provider.</p>

<p>The <span style="font-family: Courier New,Courier,monospace">data_control_provider_sql_cb</span> is defined for the callback functions of the SQL-type control requests.</p>

<pre class="prettyprint">typedef void (*data_control_provider_sql_insert_request_cb)(int request_id, data_control_h provider, bundle *insert_data);

typedef void (*data_control_provider_sql_update_request_cb)(int request_id, data_control_h provider, bundle *update_data, const char *where);

typedef void (*data_control_provider_sql_delete_request_cb)(int request_id, data_control_h provider, const char *where);

typedef void (*data_control_provider_sql_select_request_cb)(int request_id, data_control_h provider, const char **column_list, int column_count, const char *where, const char *order);

typedef struct
{
&nbsp;&nbsp;&nbsp;data_control_provider_sql_insert_request_cb insert_cb;
&nbsp;&nbsp;&nbsp;data_control_provider_sql_select_request_cb select_cb;
&nbsp;&nbsp;&nbsp;data_control_provider_sql_update_request_cb update_cb;
&nbsp;&nbsp;&nbsp;data_control_provider_sql_delete_request_cb delete_cb;
}
data_control_provider_sql_cb;
</pre>

<p>Create a database:</p>

<pre class="prettyprint">
#include &#60;sqlite3.h&#62;

// Insert your data-control provider application&#39;s database path
#define DB_PATH &quot;/opt/apps/org.tizen.datacontrolprovider/sample.db&quot; 

data_control_provider_sql_cb *sql_provider_callback;
sqlite3* db;

int create_database()
{
&nbsp;&nbsp;&nbsp;remove(DB_PATH);

&nbsp;&nbsp;&nbsp;char* sql_command = &quot;CREATE TABLE IF NOT EXISTS SqlRepository (WORD VARCHAR(30), WORD_DESC TEXT, WORD_LEN INT, WORD_DESC_LEN INT, WORD_STATUS BOOLEAN)&quot;;
&nbsp;&nbsp;&nbsp;int open_flags = (SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE);

&nbsp;&nbsp;&nbsp;int ret = sqlite3_open_v2(DB_PATH, &amp;db, open_flags, NULL);
&nbsp;&nbsp;&nbsp;if (ret != SQLITE_OK)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG,&quot;database creation failed with error: %d&quot;,ret);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ret;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;ret = sqlite3_exec(db, sql_command, NULL, NULL, NULL);
&nbsp;&nbsp;&nbsp;if (ret != SQLITE_OK)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG,&quot;database table creation failed with error: %d&quot;,ret);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return ret;
}
</pre>

<p>Register a callback function for the SQL data control request. The provider is notified when a data control request is received from a client application.</p>

<pre class="prettyprint">
void initialize_datacontrol_provider()
{
&nbsp;&nbsp;&nbsp;int result = create_database();

&nbsp;&nbsp;&nbsp;if (result != SQLITE_OK)
&nbsp;&nbsp;&nbsp;  return;

&nbsp;&nbsp;&nbsp;sql_provider_callback = (data_control_provider_sql_cb *) malloc(sizeof(data_control_provider_sql_cb));
&nbsp;&nbsp;&nbsp;sql_provider_callback-&gt;select_cb = select_request_cb;
&nbsp;&nbsp;&nbsp;sql_provider_callback-&gt;insert_cb = insert_request_cb;
&nbsp;&nbsp;&nbsp;sql_provider_callback-&gt;delete_cb = delete_request_cb;
&nbsp;&nbsp;&nbsp;sql_provider_callback-&gt;update_cb = update_request_cb;


&nbsp;&nbsp;&nbsp;result = data_control_provider_sql_register_cb(sql_provider_callback);
&nbsp;&nbsp;&nbsp;if (result != DATA_CONTROL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG,&quot;data_control_provider_sql_cb failed with error: %d&quot;,result);
&nbsp;&nbsp;&nbsp;}
}
</pre>

</li>

<li>

<p>Manage the data.</p>

<p>When the request is received from an application, use an SQL-friendly interface-based data control.</p>

<pre class="prettyprint">
void insert_request_cb(int request_id, data_control_h provider, bundle *insert_data)
{
&nbsp;&nbsp;&nbsp;char* command = data_control_provider_create_insert_statement(provider, insert_data);
&nbsp;&nbsp;&nbsp;int ret = sqlite3_exec(db, command, NULL, NULL, NULL);

&nbsp;&nbsp;&nbsp;if (ret != SQLITE_OK)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data_control_provider_send_error(request_id, sqlite3_errmsg(db));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(command);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;long long inserted_row_id = sqlite3_last_insert_rowid(db);

&nbsp;&nbsp;&nbsp;ret = data_control_provider_send_insert_result(request_id, inserted_row_id);
&nbsp;&nbsp;&nbsp;if (ret != DATA_CONTROL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG,&quot;insert_send_result failed with error: %d&quot;,ret);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;free(command);
}

void delete_request_cb(int request_id, data_control_h provider, const char *where)
{
&nbsp;&nbsp;&nbsp;char* command = data_control_provider_create_delete_statement(provider, where);
&nbsp;&nbsp;&nbsp;int ret = sqlite3_exec(db, command, NULL, NULL, NULL);
&nbsp;&nbsp;&nbsp;if (ret != SQLITE_OK)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data_control_provider_send_error(request_id, sqlite3_errmsg(db));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(command);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;ret = data_control_provider_send_delete_result(request_id);
&nbsp;&nbsp;&nbsp;if (ret != DATA_CONTROL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG,&quot;delete_send_result failed with error: %d&quot;,ret);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;free(command);
}

void select_request_cb(int request_id, data_control_h provider, const char **column_list, int column_count, const char *where, const char *order)
{
&nbsp;&nbsp;&nbsp;sqlite3_stmt* sql_stmt = NULL;

&nbsp;&nbsp;&nbsp;char* command = data_control_provider_create_select_statement(provider, column_list, column_count, where, order);
&nbsp;&nbsp;&nbsp;int ret = sqlite3_prepare_v2(db, command, strlen(command), &amp;sql_stmt, NULL);
&nbsp;&nbsp;&nbsp;if (ret != SQLITE_OK)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data_control_provider_send_error(request_id, sqlite3_errmsg(db));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(command);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;ret = data_control_provider_send_select_result(request_id, (void *)sql_stmt);
&nbsp;&nbsp;&nbsp;if (ret != DATA_CONTROL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG,&quot;select_send_result failed with error: %d&quot;,ret);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;sqlite3_finalize(sql_stmt);
&nbsp;&nbsp;&nbsp;free(command);
}

void update_request_cb(int request_id, data_control_h provider, bundle *update_data, const char *where)
{
&nbsp;&nbsp;&nbsp;char* command = data_control_provider_create_update_statement(provider, update_data, where);
&nbsp;&nbsp;&nbsp;int ret = sqlite3_exec(db, command, NULL, NULL, NULL);
&nbsp;&nbsp;&nbsp;if (ret != SQLITE_OK)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data_control_provider_send_error(request_id, sqlite3_errmsg(db));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(command);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;ret = data_control_provider_send_update_result(request_id);
&nbsp;&nbsp;&nbsp;if (ret != DATA_CONTROL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG,&quot;update_send_result failed with error: %d&quot;,ret);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;free(command);
}
</pre>

</li>

<li>

<p>Finalize the data control provider:</p>

<pre class="prettyprint">
void finalize_sql_data_control_test()
{
&nbsp;&nbsp;&nbsp;remove(DB_PATH);
&nbsp;&nbsp;&nbsp;data_control_provider_sql_unregister_cb();
&nbsp;&nbsp;&nbsp;free(sql_provider_callback);
}</pre>

</li>

</ol>



<h2>Where to Go Next</h2>
<ul>
 <li><a href="app_tutorial.htm">Application Framework Tutorials</a></li>
 <li><a href="../../guide/app/data_controls.htm">Data Controls Programming Guide</a></li>
 <li><a href="../../../../org.tizen.mobile.native.apireference/group__CAPI__DATA__CONTROL__MODULE.html">Data Control API Reference</a></li>
</ul>

  <div id="footer"> 
   <hr size="1" /> 
   <font size="1">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</font> 
  </div> 
  <!--start--> 
  <script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script> 
  <!--end-->  
 </body>
</html>