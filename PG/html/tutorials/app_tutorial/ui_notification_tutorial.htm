<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
 <head> 
  <script type="text/javascript" src="../../snippet.js"></script> 
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
  <link href="../../styles.css" rel="StyleSheet" type="text/css" /> 
  <link href="../../snippet.css" rel="StyleSheet" type="text/css" /> 
  <title>Notification Tutorial</title> 
 </head> 
 <body onload="prettyPrint()"> 
  <!--<div id="banner">
Tizen</div>--> 
<h1>Notification Tutorial</h1> 
 
<p>This tutorial demonstrates how you can display notifications in your application. Notifications are displayed in the status bar and notification tray. A notification consists of an icon, title, content, and time. The notification can have a service as one of its attributes. When the user selects the notification from the notification tray, the application described by the service is launched. You can create the following types of notifications:</p>
<ul>
 <li>Regular notification is a basic notification, which is removed automatically when the user selects it. The user can remove all regular notifications from the tray with the <strong>Clear</strong> button.</li>
 <li>Ongoing notification is used to display the progress of a task. Only the application that posted an ongoing notification can remove it.</li>
</ul>
<p>API functions and data types are defined in the <span style="font-family: Courier New,Courier,monospace">&lt;notification.h&gt;</span> header file, which has to be included in all applications that use the <a href="../../../../org.tizen.mobile.native.apireference/group__NOTIFICATION__MODULE.html">Notification API</a>.</p>
<p>To learn about the Notification API features, see the <a href="../../guide/app/notification.htm">Notifications Programming Guide</a>.</p>

<p>This tutorial consists of the following parts:</p>
<ul>
 <li><a href="#init">Initialization and Prerequisites</a></li>
 <li><a href="#create">Creating a Notification</a>
  <p>Create a notification.</p>
 </li>
 <li><a href="#set">Setting Notification Attributes</a>
  <p>Set attributes for a notification.</p>
 </li>
 <li><a href="#post">Posting a Notification</a>
  <p>Post a notification.</p>
 </li>
 <li><a href="#update">Updating Notification Content</a>
  <p>Update the content of a notification.</p>
 </li>
 <li><a href="#delete">Deleting a Notification</a>
  <p>Delete a notification.</p>
 </li>
</ul>

<h2 id="init" name="init">Initialization and Prerequisites</h2>
<p>To follow this tutorial, place a JPEG image file named &quot;notification_image.jpg&quot; in your device's <span style="font-family: Courier New,Courier,monospace">/tmp</span> directory. The following variables are used in the tutorial code:</p>
<pre class="prettyprint">static const char *image_path = &quot;tmp/notification_image.jpg&quot;;
static notification_h notification = NULL;</pre>

<h2 id="create" name="create">Creating a Notification</h3>
<p>Initialize a notification handle by calling the <span style="font-family: Courier New,Courier,monospace">notification_create()</span> function:</p>
<pre class="prettyprint">notification_h notification_create(notification_type_e type)</pre>

<p>The function takes the following parameters:</p>
<ul>
 <li><span style="font-family: Courier New,Courier,monospace">[in] type</span>: Notification type.</li>
</ul>

<p>The possible values for the <span style="font-family: Courier New,Courier,monospace">type</span> parameter are:</p>
<ul>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_TYPE_NOTI</span>: Create a regular notification.</li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_TYPE_ONGOING</span>: Create an ongoing notification.</li>
</ul>

<p>The following example code creates an ongoing notification and checks whether the initialization was successful:</p>
<pre class="prettyprint">notification = notification_create(NOTIFICATION_TYPE_ONGOING);
if (notification != NULL)
{
&nbsp;&nbsp;&nbsp;// Notification was initialized successfully
}</pre>

<h2 id="set" name="set">Setting Notification Attributes</h3>

<p>You can set the following attributes for a notification:</p>
<ul>
 <li>Notification text</li>
 <li>Timestamp</li>
 <li>Image</li>
 <li>Display options</li>
 <li>LED options</li>
 <li>Properties</li>
</ul>

<h3 id="text" name="text">Setting the Notification Text</h3>

<p>To set the text to display in the notification view, use the <span style="font-family: Courier New,Courier,monospace">notification_set_text()</span> function:</p>

<pre class="prettyprint">notification_set_text (notification_h noti, notification_text_type_e type, const char *text, const char *key, int args_type, ...)</pre>

<p>The function takes the following parameters:</p>
<ul>
 <li><span style="font-family: Courier New,Courier,monospace">[in] noti</span>: Notification handle.</li>
 <li><span style="font-family: Courier New,Courier,monospace">[in] type</span>: Notification text type.</li>
 <li><span style="font-family: Courier New,Courier,monospace">[in] text</span>: Text to display in the notification view.</li>
 <li><span style="font-family: Courier New,Courier,monospace">[in] key</span>: Text key for localization.</li>
 <li><span style="font-family: Courier New,Courier,monospace">[in] args_type</span>: Variable parameter for a type-value pair.</li>
</ul>

<p>The possible values for the <span style="font-family: Courier New,Courier,monospace">type</span> parameter are:</p>
<ul>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_TEXT_TYPE_TITLE</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_TEXT_TYPE_CONTENT</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_TEXT_TYPE_CONTENT_FOR_DISPLAY_OPTION_IS_OFF</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_TEXT_TYPE_EVENT_COUNT</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_TEXT_TYPE_INFO_1</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_TEXT_TYPE_INFO_SUB_1</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_TEXT_TYPE_INFO_2</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_TEXT_TYPE_INFO_SUB_2</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_TEXT_TYPE_INFO_3</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_TEXT_TYPE_INFO_SUB_3</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_TEXT_TYPE_GROUP_TITLE</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_TEXT_TYPE_GROUP_CONTENT</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_TEXT_TYPE_GROUP_CONTENT_FOR_DISPLAY_OPTION_IS_OFF</span></li>
</ul>

<p>The <span style="font-family: Courier New,Courier,monospace">notification_set_text()</span> function sets the title and content string. If the text is formatted data (only d, f, and s are supported), set the type-value pair:</p>
<ul>
 <li>If d, the type is <span style="font-family: Courier New,Courier,monospace">NOTIFICATION_VARIABLE_TYPE_INT</span> and the value is an integer.</li>
 <li>If f, the type is <span style="font-family: Courier New,Courier,monospace">NOTIFICATION_VARIABLE_TYPE_DOUBLE</span> and the value is a double.</li>
 <li>If s, the type is <span style="font-family: Courier New,Courier,monospace">NOTIFICATION_VARIABLE_TYPE_STRING</span> and the value is a string.</li>
</ul>
<p>If the type is <span style="font-family: Courier New,Courier,monospace">NOTIFICATION_VARIABLE_TYPE_COUNT</span>, the notification count is displayed with the text. If the value is <span style="font-family: Courier New,Courier,monospace">NOTIFICATION_COUNT_POS_LEFT</span>, the count is displayed to the left of the text. If the value is <span style="font-family: Courier New,Courier,monospace">NOTIFICATION_COUNT_POS_IN</span>, the count is displayed in the text when the text is of the d format. If the value is <span style="font-family: Courier New,Courier,monospace">NOTIFICATION_COUNT_POS_RIGHT</span>, the count is displayed to the right of the text. Variable parameters should be terminated by <span style="font-family: Courier New,Courier,monospace">NOTIFICATION_VARIABLE_TYPE_NONE</span>.</p>

<p>Check whether the operation was successful by retrieving and comparing the return value of any function to <span style="font-family: Courier New,Courier,monospace">NOTIFICATION_ERROR_NONE</span>:</p>

<pre class="prettyprint">int ret =0;
ret = notification_set_text(notification, NOTIFICATION_TEXT_TYPE_TITLE, &quot;text&quot;, NULL, NOTIFICATION_VARIABLE_TYPE_NONE);
if (ret != NOTIFICATION_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;// Error handling
}</pre>

<h3>Setting the Notification Timestamp</h3>

<p>To set the timestamp to display in the notification text, use the <span style="font-family: Courier New,Courier,monospace">notification_set_time_to_text()</span> function:</p>

<pre class="prettyprint">notification_set_time_to_text (notification_h noti, notification_text_type_e type, time_t time)</pre>

<p>The function takes the following parameters:</p>
<ul>
 <li><span style="font-family: Courier New,Courier,monospace">[in] noti</span>: Notification handle.</li>
 <li><span style="font-family: Courier New,Courier,monospace">[in] type</span>: Notification text type. For information about the possible values, see <a href="#text">Setting the Notification Text</a>.</li>
 <li><span style="font-family: Courier New,Courier,monospace">[in] time_t</span>: Timestamp to display in the notification text.</li>
</ul>

<pre class="prettyprint">ret = notification_set_time_to_text(notification, NOTIFICATION_TEXT_TYPE_CONTENT, time(NULL));
if (ret != NOTIFICATION_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;// Error handling
}</pre>

<h3>Setting the Notification Image</h3>

<p>To set the image to display in the notification view, use the <span style="font-family: Courier New,Courier,monospace">notification_set_image()</span> function:</p>

<pre class="prettyprint">notification_set_image (notification_h noti, notification_image_type_e type, const char *image_path)</pre> 

<p>The function takes the following parameters:</p>
<ul>
 <li><span style="font-family: Courier New,Courier,monospace">[in] noti</span>: Notification handle.</li>
 <li><span style="font-family: Courier New,Courier,monospace">[in] type</span>: Notification image type.</li>
 <li><span style="font-family: Courier New,Courier,monospace">[in] image_path</span>: Absolute path and file name of the image file.</li>
</ul>

<p>The possible values for the <span style="font-family: Courier New,Courier,monospace">type</span> parameter are:</p>
<ul>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_IMAGE_TYPE_ICON</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_IMAGE_TYPE_ICON_FOR_INDICATOR</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_IMAGE_TYPE_ICON_FOR_LOCK</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_IMAGE_TYPE_THUMBNAIL</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_IMAGE_TYPE_THUMBNAIL_FOR_LOCK</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_IMAGE_TYPE_ICON_SUB</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_IMAGE_TYPE_BACKGROUND</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_IMAGE_TYPE_LIST_1</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_IMAGE_TYPE_LIST_2</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_IMAGE_TYPE_LIST_3</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_IMAGE_TYPE_LIST_4</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_IMAGE_TYPE_LIST_5</span></li>
</ul>

<pre class="prettyprint">ret = notification_set_image(notification, NOTIFICATION_IMAGE_TYPE_ICON, image_path);
if (ret != NOTIFICATION_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;// Error handling
}</pre>

<h3>Setting the Notification Display Options</h3>

<p>To set how applications display the notification, use the <span style="font-family: Courier New,Courier,monospace">notification_set_display_applist()</span> function:</p>

<pre class="prettyprint">notification_set_display_applist (notification_h noti, int applist)</pre>

<p>The function takes the following parameters:</p>
<ul>
 <li><span style="font-family: Courier New,Courier,monospace">[in] noti</span>: Notification handle.</li>
 <li><span style="font-family: Courier New,Courier,monospace">[in] applist</span>: Notification display option. You can set multiple options with the &quot;|&quot; pipe operation.</li>
</ul>

<p>The possible values for the <span style="font-family: Courier New,Courier,monospace">applist</span> parameter are:</p>
<ul>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_DISPLAY_APP_NOTIFICATION_TRAY</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_DISPLAY_APP_TICKER</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_DISPLAY_APP_LOCK</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_DISPLAY_APP_INDICATOR</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_DISPLAY_APP_ALL</span></li>
</ul>

<p>You can combine the flags in the function by using the pipe &quot;|&quot; operation:</p>
<pre class="prettyprint">ret = notification_set_display_applist(notification, NOTIFICATION_DISPLAY_APP_NOTIFICATION_TRAY | NOTIFICATION_DISPLAY_APP_TICKER);
if (ret != NOTIFICATION_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;// Error handling
}</pre>

<h3>Setting the LED Options</h3>

<p>To set the LED options for a notification, use the <span style="font-family: Courier New,Courier,monospace">notification_set_led()</span> and <span style="font-family: Courier New,Courier,monospace">notification_set_led_time_period()</span> functions:</p>
<pre class="prettyprint">notification_set_led (notification_h noti, notification_led_op_e operation, int led_argb)</pre>
<p>The function takes the following parameters:</p>
<ul>
 <li><span style="font-family: Courier New,Courier,monospace">[in] noti</span>: Notification handle.</li>
 <li><span style="font-family: Courier New,Courier,monospace">[in] operation</span>: LED notification operation.</li>
 <li><span style="font-family: Courier New,Courier,monospace">[in] led_argb</span>: Notification LED color.</li>
</ul>
<p>The possible values for the <span style="font-family: Courier New,Courier,monospace">operation</span> parameter are:</p>
<ul>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_LED_OP_ON</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_LED_OP_ON_CUSTOM_COLOR</span></li>
</ul>

<pre class="prettyprint">notification_set_led_time_period (notification_h noti, int on_ms, int off_ms)</pre>
<p>The function takes the following parameters:</p>
<ul>
 <li><span style="font-family: Courier New,Courier,monospace">[in] noti</span>: Notification handle.</li>
 <li><span style="font-family: Courier New,Courier,monospace">[in] on_ms</span>: Time for turning on the LED.</li>
 <li><span style="font-family: Courier New,Courier,monospace">[in] off_ms</span>: Time for turning off the LED.</li>
</ul>

<pre class="prettyprint">ret = notification_set_led(notification, NOTIFICATION_LED_OP_ON, 100);
if (ret != NOTIFICATION_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;// Error handling
}
ret = notification_set_led_time_period(notification, 100, 100);
if (ret != NOTIFICATION_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;// Error handling
}</pre>

<h3>Setting Notification Properties</h3>

<p>To set a notification property, use the <span style="font-family: Courier New,Courier,monospace">notification_set_property()</span> function:</p>
<pre class="prettyprint">notification_set_property (notification_h noti, int flags)</pre>

<p>The function takes the following parameters:</p>
<ul>
 <li><span style="font-family: Courier New,Courier,monospace">[in] noti</span>: Notification handle.</li>
 <li><span style="font-family: Courier New,Courier,monospace">[in] flags</span>: Notification property. You can set multiple properties with the &quot;|&quot; pipe operation.</li>
</ul>

<p>The possible values for the <span style="font-family: Courier New,Courier,monospace">flags</span> parameter are:</p>
<ul>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_PROP_DISPLAY_ONLY_SIMMODE</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_PROP_DISABLE_APP_LAUNCH</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_PROP_DISABLE_AUTO_DELETE</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_PROP_LAUNCH_UG</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_PROP_DISABLE_TICKERNOTI</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_PROP_DISABLE_UPDATE_ON_INSERT</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_PROP_DISABLE_UPDATE_ON_DELETE</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">NOTIFICATION_PROP_VOLATILE_DISPLAY</span></li>
</ul>

<pre class="prettyprint">ret = notification_set_property(notification, NOTIFICATION_PROP_DISABLE_APP_LAUNCH);
if (ret != NOTIFICATION_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;// Error handling
}</pre>

<h2 id="post" name="post">Posting a Notification</h3>
<p>To post a notification to the database, use the <span style="font-family: Courier New,Courier,monospace">notification_post()</span> function:</p>
<pre class="prettyprint">notification_post (notification_h noti)</pre>
<p>The function takes the following parameters:</p>
<ul>
 <li><span style="font-family: Courier New,Courier,monospace">[in] noti</span>: Notification handle.</li>
</ul>

<pre class="prettyprint">ret = notification_post(notification);
if (ret != NOTIFICATION_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;// Error handling
}</pre>
    
<h2 id="update" name="update">Updating Notification Content</h3>
<p>To update the content of a notification, use the <span style="font-family: Courier New,Courier,monospace">notification_update()</span> function:</p>
<pre class="prettyprint">notification_update (notification_h noti)</pre>
<p>The function takes the following parameters:</p>
<ul>
 <li><span style="font-family: Courier New,Courier,monospace">[in] noti</span>: Notification handle.</li>
</ul>

<p>The <span style="font-family: Courier New,Courier,monospace">notification_update()</span> works only for ongoing notifications.</p>
<pre class="prettyprint">ret = notification_update (notification);
if (ret != NOTIFICATION_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;// Error handling
}</pre>

<h2 id="delete" name="delete">Deleting a Notification</h3>
<p>To delete a notification from the database, use the <span style="font-family: Courier New,Courier,monospace">notification_delete()</span> function:</p>
<pre class="prettyprint">notification_delete(notification_h noti)</pre>
<p>The function takes the following parameters:</p>
<ul>
 <li><span style="font-family: Courier New,Courier,monospace">[in] noti</span>: Notification handle.</li>
</ul>

<pre class="prettyprint">ret = notification_delete(notification);
if (ret != NOTIFICATION_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;// Error handling
}</pre>
<p>After deleting the notification, free the internal structure data of the notification handle by calling the <span style="font-family: Courier New,Courier,monospace">notification_free()</span> function:</p>
<pre class="prettyprint">notification_free (notification_h noti)</pre>

<p>The function takes the following parameters:</p>
<ul>
 <li><span style="font-family: Courier New,Courier,monospace">[in] noti</span>: Notification handle.</li>
</ul>

<pre class="prettyprint">ret = notification_free(notification);
if (ret != NOTIFICATION_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;// Error handling
}</pre>

<h2>Where to Go Next</h2>
<ul>
 <li><a href="app_tutorial.htm">Application Framework Tutorials</a></li>
 <li><a href="../../guide/app/notification.htm">Notifications Programming Guide</a></li>
 <li><a href="../../../../org.tizen.mobile.native.apireference/group__NOTIFICATION__MODULE.html">Notification API Reference</a></li>
</ul>


  <div id="footer"> 
   <hr size="1" /> 
   <font size="1">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</font> 
  </div> 
  <!--start--> 
  <script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script> 
  <!--end-->  
 </body>
</html>