<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
 <head> 
  <script type="text/javascript" src="../../snippet.js"></script> 
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
  <link href="../../styles.css" rel="StyleSheet" type="text/css" /> 
  <link href="../../snippet.css" rel="StyleSheet" type="text/css" /> 
  <title>Message Box Tutorial</title> 
 </head> 
 <body onload="prettyPrint()"> 
  <!--<div id="banner">
Tizen</div>--> 
  <h1>Message Box Tutorial</h1> 
 

<p>This tutorial demonstrates how to send SMS and MMS messages, and fetch messages from a specified message box.</p>
<p>API functions and data types are defined in the <span style="font-family: Courier New,Courier,monospace;">&lt;messages.h&gt;</span> header. This header file has to be included in all applications that use the <a href="../../../../org.tizen.mobile.native.apireference/group__CAPI__MESSAGING__MESSAGES__MODULE.html">Messages API</a>.</p>

<p>To learn about the Messages API features, see the <a href="../../guide/messaging/messaging.htm">Messaging Programming Guide</a>.</p>


<p>This tutorial consists of the following parts:</p>

<ul><li><a href="#init">Initialization and Prerequisites</a>
<p>Connect to the message service and disconnect after use.</p></li>

<li><a href="#fetching">Fetching Messages from a Specified Message Box</a>
<p>Fetch all SMS or MMS messages from a given message box (such as Inbox or the sent items).</p></li>

<li><a href="#sending">Sending a message (SMS or MMS)</a>
<p>Create and send a message, and add attachments to MMS messages.</p></li></ul>

<h2 id="init" name="init">Initialization and Prerequisites</h2>
<p>The Messages module works like a client-service architecture. In this architecture, a Tizen application is the client side and has to connect to the service before using the Messages API.</p>

<ol><li><p>Establish a connection with the <span style="font-family: Courier New,Courier,monospace;">messages_open_service(messages_service_h *service)</span> function:</p>

<pre class="prettyprint">static messages_service_h service_handle = NULL;
int error_code;

error_code = messages_open_service(&amp;service_handle);

if (error_code != MESSAGES_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling
}</pre></li>

<li><p>When a connection with the Messages service is no longer needed (or the application is exiting), the <span style="font-family: Courier New,Courier,monospace;">messages_close_service()</span> function has to be called for proper connection closing:</p>

<pre class="prettyprint">messages_close_service(service_handle);
service_handle = NULL;</pre></li></ol>


<h2 id="fetching" name="fetching">Fetching Messages from a Specified Message Box</h2>
<p>To fetch messages from a message box, use the <span style="font-family: Courier New,Courier,monospace;">messages_foreach_message()</span> function with the appropriate parameters. One of these parameters is the callback function called for each message matching the search criteria.</p>

<ol><li>Define the message searching callback function.
<ol><li>
<p>The callback function signature has to match the following typedef:</p>
<pre class="prettyprint">typedef bool(* messages_search_cb)(messages_message_h msg, int index, int result_count, int total_count, void *user_data)</pre></li>
<li><p>Within the callback, to print the message content (or show it to the user in any other way), extract its text, address, and type as below:</p>
<pre class="prettyprint">char *message = NULL, *address = NULL;
messages_recipient_type_e rtype;
int error_code = MESSAGES_ERROR_NONE;

error_code = messages_get_text(msg, &amp;message);
if (error_code != MESSAGES_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;fprintf(stderr, &quot;Failed to get message content\n&quot;);
}

error_code = messages_get_address(msg, 0, &amp;address, &amp;rtype);
if (error_code != MESSAGES_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;fprintf(stderr, &quot;Failed to get recipient address\n&quot;);
}

messages_message_type_e mtype = MESSAGES_TYPE_UNKNOWN;
messages_get_message_type(msg, &amp;mtype);</pre></li>

<li><p>For MMS messages, the subject and attachments attributes exist and can be extracted from the found message:</p>
<pre class="prettyprint">if (MESSAGES_TYPE_MMS == mtype) 
{
&nbsp;&nbsp;&nbsp;char *subject = NULL;
&nbsp;&nbsp;&nbsp;error_code = messages_mms_get_subject(msg, &amp;subject);
&nbsp;&nbsp;&nbsp;if (error_code != MESSAGES_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stderr, &quot;Failed to get MMS subject\n&quot;);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;int atcount = 0;
&nbsp;&nbsp;&nbsp;messages_mms_get_attachment_count(msg, &amp;atcount);
}</pre></li>

<li><p>The memory allocated for the message given to the callback function and for all string variables extracted from the message have to be explicitly released before leaving their visibility scope:</p>
<pre class="prettyprint">free(subject);

free(message);
free(address);</pre></li></ol></li>


<li>Call the search function.
<p>With a connection opened and callback prepared, the <span style="font-family: Courier New,Courier,monospace;">messages_foreach_message()</span> function can be called to retrieve all existing messages stored in different mailboxes. The function arguments allow to select only a subset of all available messages based on:</p>
<ul><li>Message box type (inbox, outbox, sent items, drafts, or all of them)</li>
<li>Message type (such as SMS, MMS)</li>
<li>Keyword (for searching based on text and subject)</li>
<li>Address (message recipient address)</li></ul>

<p>The following example shows a simple search for all SMS messages in all message boxes with a callback function named <span style="font-family: Courier New,Courier,monospace;">message_search_callback</span>:</p>
<pre class="prettyprint">int error_code;
error_code = messages_open_service(&amp;g_svc);
if (error_code != MESSAGES_ERROR_NONE) 

{
&nbsp;&nbsp;&nbsp;fprintf(stderr, &quot;Failed to open connection\n&quot;);
}

error_code = messages_foreach_message(g_svc, MESSAGES_MBOX_ALL,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MESSAGES_TYPE_SMS, NULL, NULL, 0, 0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;messages_search_callback, NULL);
if (error_code != MESSAGES_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;fprintf(stderr, &quot;Messages searching failed\n&quot;);
}

messages_close_service(g_svc);</pre></li></ol>
<h2 id="sending" name="sending">Sending a Message (SMS or MMS)</h2>
<p>The Messaging API provides functions to send SMS (Short Message Service) messages and MMS (Multimedia Message Service) messages with attachments (image or video files):</p>
<ol><li>Create a message.
<p>Before sending a message, open a connection to the messaging service.</p>
<p>To create an SMS or an MMS message, use the <span style="font-family: Courier New,Courier,monospace;">messages_create_message()</span> function. Specify the message type (<span style="font-family: Courier New,Courier,monospace;">MESSAGES_TYPE_SMS</span> or <span style="font-family: Courier New,Courier,monospace;">MESSAGES_TYPE_MMS</span>) when creating the message. The example below shows how to create an SMS message:</p>
<pre class="prettyprint">int error_code;
messages_message_h msg_hndl = NULL;

// Create a SMS message handle
error_code = messages_create_message(MESSAGES_TYPE_SMS, &amp;msg_hndl);
if (error_code != MESSAGES_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;fprintf(stderr, &quot;Failed to create message\n&quot;);
}</pre></li>
<li>Define the recipients and message body (message text).
<p>Functions for setting the recipient address and the message body are the same for SMS and MMS, but in this case the message type specification is not needed:</p>
<pre class="prettyprint">error_code = messages_add_address(msg_hndl, &quot;123456789&quot;, MESSAGES_RECIPIENT_TO);
if (error_code != MESSAGES_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;fprintf(stderr, &quot;Failed to add recipient address\n&quot;);
}

error_code = messages_set_text(msg_hndl, __PRETTY_FUNCTION__);
if (error_code != MESSAGES_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;fprintf(stderr, &quot;Failed to set message text\n&quot;);
}</pre></li>

<li>Set a subject and add an attachment.
<ul><li><p>You can set a message subject and add attachments to MMS messages. Set the subject:</p>
<pre class="prettyprint">error_code = messages_mms_set_subject(msg_hndl, &quot;MMS test&quot;);
if (error_code != MESSAGES_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;fprintf(stderr, &quot;Failed to set MMS subject\n&quot;);
}</pre></li>
<li><p>Add attachments to the MMS message with their absolute path in the device file system. When adding the attachment, give the type of the attachment. Possible attachment types are image, audio, and video:</p>
<pre class="prettyprint">error_code = messages_mms_add_attachment(g_message, MESSAGES_MEDIA_IMAGE, &quot;/path/to/image/file&quot;);
if (error_code != MESSAGES_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;fprintf(stderr, &quot;Failed to add attachment to MMS\n&quot;);
}</pre></li></ul></li>

<li>Send the message.
<ol><li><p>SMS and MMS sending is an asynchronous operation, and a callback function is needed to receive the sending operation status. This function has to match the following typedef:</p>
<pre class="prettyprint">typedef void(* messages_sent_cb)(messages_sending_result_e result, void *user_data)</pre></li>
<li><p>Using the first parameter in the callback (result), the messaging service informs you about the sending status. It can be used to determine if sending succeeded or failed:</p>
<pre class="prettyprint">static void sent_msg_cb(messages_sending_result_e result, void *user_data)
{
&nbsp;&nbsp;&nbsp;if (MESSAGES_SENDING_SUCCEEDED == result) 
{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stderr, &quot;Message sending succeeded\n&quot;);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stderr, &quot;Message sending failed\n&quot;);
&nbsp;&nbsp;&nbsp;}
}</pre></li>
<li><p>If the connection to the messaging service is open (<span style="font-family: Courier New,Courier,monospace;">service_handle</span>) and the message itself is successfully created (<span style="font-family: Courier New,Courier,monospace;">msg_hndl</span>), it can be sent using the <span style="font-family: Courier New,Courier,monospace;">messages_send_message()</span> function:</p>
<pre class="prettyprint">error_code = messages_send_message(service_handle, msg_hndl, true, sent_msg_cb, NULL);
if (error_code != MESSAGES_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;fprintf(stderr, &quot;Failed to send message\n&quot;);
}</pre></li></ol></li></ol>



    <h2>Where to Go Next</h2> 
  <ul> 
	<li><a href="messaging_tutorial.htm">Messaging Tutorials</a></li>
	<li><a href="../../guide/messaging/messaging.htm">Messaging Programming Guide</a></li> 
	<li><a href="../../../../org.tizen.mobile.native.apireference/group__CAPI__MESSAGING__MESSAGES__MODULE.html">Messages API Reference</a></li>    
  </ul> 
 

  <div id="footer"> 
   <hr size="1" /> 
   <font size="1">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</font> 
  </div> 
  <!--start--> 
  <script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script> 
  <!--end-->  
 </body>
</html>