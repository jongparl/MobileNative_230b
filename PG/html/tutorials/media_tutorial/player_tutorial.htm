<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
 <head>
  <script type="text/javascript" src="../../snippet.js"></script>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <link href="../../styles.css" rel="StyleSheet" type="text/css" />
  <link href="../../snippet.css" rel="StyleSheet" type="text/css" />
  <title>Player Tutorial</title>
 </head>
 <body onload="prettyPrint()">
  <!--<div id="banner">
Tizen</div>-->
<h1>Player Tutorial</h1>

<p>This tutorial demonstrates how you can play audio and video files.</p>

<p>API functions and data types are defined in the <span style="font-family: Courier New,Courier,monospace">&lt;player.h&gt;</span> header file, which has to be included in all applications that use the <a href="../../../../org.tizen.mobile.native.apireference/group__CAPI__MEDIA__PLAYER__MODULE.html">Player API</a>.</p>

<p>To learn about the Player API features, see the <a href="../../guide/media/player.htm">Audio and Video Player Programming Guide</a>.</p>

<p>This tutorial consists of the following parts:</p>

<ul>
 <li><a href="#init">Initialization and Prerequisites</a></li>
 <li><a href="#play_audio">Playing an Audio File</a>
  <p>Play an audio file.</p>
 </li>
 <li><a href="#play_video">Playing a Video File</a>
  <p>Play a video file.</p>
 </li>
 <li><a href="#release">Releasing Resources</a>
  <p>Release the resources allocated to the player.</p>
 </li>
</ul>

<h2 id="init" name="init">Initialization and Prerequisites</h2>

<ol>

<li>

<p>Create a player handle and pass it to the <span style="font-family: Courier New,Courier,monospace">player_create()</span> function. You need the player handle for defining which file to play and with what playback settings.</p>

<pre class="prettyprint">
#include &lt;player.h&gt;
#include &lt;Elementary.h&gt;
#include &lt;glib.h&gt;
        
#define MP3_SAMPLE = &quot;/opt/usr/media/SampleAudio.mp3&quot;;
#define MP4_SAMPLE = &quot;/opt/usr/media/SampleVideo.mp4&quot;;

typedef struct appdata 
{
&nbsp;&nbsp;&nbsp;player_h player;
} 

static void init_base_player(appdata_s *ad) 
{
&nbsp;&nbsp;&nbsp;int error_code = 0;
&nbsp;&nbsp;&nbsp;error_code = player_create(&amp;ad-&gt;player);
&nbsp;&nbsp;&nbsp;if (error_code != PLAYER_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_ERR(&quot;failed to create&quot;);
&nbsp;&nbsp;&nbsp;// Do setting more for playback, like setting callback, setting_uri and prepare
}

static void create_base_gui(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;// Make window
&nbsp;&nbsp;&nbsp;// Make button
&nbsp;&nbsp;&nbsp;// Add callback to button
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(button_init, &quot;clicked&quot;, init_base_player, ad);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(button_end, &quot;clicked&quot;, release_base_player, ad);                 
&nbsp;&nbsp;&nbsp;// Create evas image object for video surface
}

static void app_create(void *data) 
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;create_base_gui(ad);
&nbsp;&nbsp;&nbsp;return true;
}
</pre>

</li>

<li>

<p>To receive notifications about playback interruptions, register a callback function using the <span style="font-family: Courier New,Courier,monospace">player_set_interrupted_cb()</span> function. The playback is interrupted and the callback triggered when another multimedia application is run. The player state automatically changes to <span style="font-family: Courier New,Courier,monospace">PLAYER_STATE_PAUSED</span> or <span style="font-family: Courier New,Courier,monospace">PLAYER_STATE_IDLE</span> according to the session policy. To get the current state, use the <span style="font-family: Courier New,Courier,monospace">player_get_state()</span> function.</p>

<pre class="prettyprint">static void _player_interrupted_cb(player_interrupted_coded e code, void *data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;player_state_e state;

&nbsp;&nbsp;&nbsp;player_get_state(ad-&gt;player, &amp;state);
&nbsp;&nbsp;&nbsp;_INFO(&quot;current player state = %d&quot;, state);
&nbsp;&nbsp;&nbsp;// If state is PLAYER_STATE_PAUSED, update UI like button
}

static void init_base_player(appdata_s *ad)
{  
&nbsp;&nbsp;&nbsp;// Set interruption callback if application wants to know the point
&nbsp;&nbsp;&nbsp;error_code = player_set_interrupted_cb(g_player, _player_interrupted_cb, ad);
&nbsp;&nbsp;&nbsp;if (error_code != PLAYER_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_ERR(&quot;failed to create&quot;);
}
</pre>

</li>

<li>

<p>To receive a notification when the playback completes, register a callback function by using the <span style="font-family: Courier New,Courier,monospace">player_set_completed_cb()</span> function:</p>

<pre class="prettyprint">static void _player_completed_cb(void *data)
{
&nbsp;&nbsp;&nbsp;_INFO(&quot;Playback End&quot;);
}

static void init_base_player(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;// Set completed callback if application wants to know the point
&nbsp;&nbsp;&nbsp;error_code = player_set_completed_cb(g_player, _player_completed_cb, ad);

&nbsp;&nbsp;&nbsp;if (error_code != PLAYER_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_ERR(&quot;failed to set completed cb&quot;);
}</pre>



</li>

<li>

<p>To receive notifications about player errors during the playback, register a callback function using the <span style="font-family: Courier New,Courier,monospace">player_set_error_cb()</span> function:</p>

<pre class="prettyprint">static void init_base_player(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;error_code = player_set_error_cb(g_player, _player_error_cb, NULL);
&nbsp;&nbsp;&nbsp;if (error_code != PLAYER_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_ERR(&quot;failed to set error cb&quot;);
}</pre>

<p>The following example code implements the <span style="font-family: Courier New,Courier,monospace">_player_error_cb()</span> callback function. The callback is triggered when the player stops working due to an error. The callback tries to change the player state to <span style="font-family: Courier New,Courier,monospace">PLAYER_STATE_READY</span> by calling the <span style="font-family: Courier New,Courier,monospace">player_stop()</span> function. The callback then removes all other callbacks and resets the player by calling the <span style="font-family: Courier New,Courier,monospace">player_unprepare()</span> function. At the end, the player is in the <span style="font-family: Courier New,Courier,monospace">PLAYER_STATE_IDLE</span> state, so you can release the resources allocated to the player.</p>

<pre class="prettyprint">static void _player_error_cb(int error_code, void *user_data)
{
&nbsp;&nbsp;&nbsp;_ERR(&quot;playback failed, error = %x&quot;, error_code);
}
</pre>

<table class="note">
 <tbody>
  <tr>
   <th class="note">Note</th>
  </tr>
  <tr>
   <td class="note">Do not call the <span style="font-family: Courier New,Courier,monospace">player_destroy()</span> function from the called context, as this can cause the <span style="font-family: Courier New,Courier,monospace">PLAYER_ERROR_INVALID_OPERATION</span> error.</td>
  </tr>
 </tbody>
</table>

</li>

</ol>

<h2 id="play_audio" name="play_audio">Playing an Audio File</h2>

<ol>

<li>

<p>Set the audio file path after creating the audio player handler.</p>

<p>To specify the source file to play, use the <span style="font-family: Courier New,Courier,monospace">player_set_uri()</span> function:</p>

<pre class="prettyprint">error_code = player_set_uri(ad-&gt;player, MP3_SAMPLE);
</pre>

</li>

<li>

<p>Prepare the player for playback.</p>

<p>Before you can start the playback, the player has to change its state from <span style="font-family: Courier New,Courier,monospace">PLAYER_STATE_IDLE</span> to <span style="font-family: Courier New,Courier,monospace">PLAYER_STATE_READY</span>. To change the state, use the <span style="font-family: Courier New,Courier,monospace">player_prepare()</span> function:</p>

<pre class="prettyprint">error_code = player_prepare(ad-&gt;player);
</pre>

</li>

<li>

<p>Play the audio file.</p>

<p>To start the playback, use the <span style="font-family: Courier New,Courier,monospace">player_start()</span> function:</p>

<pre class="prettyprint">error_code = player_start(ad-&gt;player);
</pre>

</li>

</ol>

<h2 id="play_video" name="play_video">Playing a Video File</h2>

<ol>

<li>

<p>Set the video file path.</p>

<p>To specify the source file to play, use the <span style="font-family: Courier New,Courier,monospace">player_set_uri()</span> function:</p>

<pre class="prettyprint">error_code = player_set_uri(ad-&gt;player, MP4_SAMPLE);
</pre>

</li>

<li>

<p>Set the display on which the video is played.</p>

<p>To get the correct display handle, use the <span style="font-family: Courier New,Courier,monospace">GET_DISPLAY()</span> function. To set the display, use the <span style="font-family: Courier New,Courier,monospace">player_set_display()</span> function with the display handle.</p>

<pre class="prettyprint">error_code = player_set_display(g_player, PLAYER_DISPLAY_TYPE_OVERLAY, GET_DISPLAY(evas_obj));</pre>

<table class="note">
 <tbody>
  <tr>
   <th class="note">Note</th>
  </tr>
  <tr>
   <td class="note">In case of an overlay surface, when the device orientation changes, the displayed video does not rotate automatically. If you want to change the video orientation according to the device orientation, use the <span style="font-family: Courier New,Courier,monospace">player_set_display_rotation()</span> function within the <span style="font-family: Courier New,Courier,monospace">app_device_orientation_cb()</span> callback function used by the application. In case of an evas surface, the evas object for the video is rotated by the window manager used by the application, not by the <span style="font-family: Courier New,Courier,monospace">player_set_display_rotation()</span> function.</td>
  </tr>
 </tbody>
</table>

</li>

<li>

<p>Prepare the player for playback.</p>

<p>Before you can start the playback, the player has to change its state from <span style="font-family: Courier New,Courier,monospace">PLAYER_STATE_IDLE</span> to <span style="font-family: Courier New,Courier,monospace">PLAYER_STATE_READY</span>. To change the state, use the <span style="font-family: Courier New,Courier,monospace">player_prepare()</span> function:</p>

<pre class="prettyprint">error_code = player_prepare(ad-&gt;player);
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">player_prepare()</span> function works synchronously, so it can be blocked. To prepare the player asynchronously instead, use the <span style="font-family: Courier New,Courier,monospace">player_prepare_async()</span> function:</p>

<pre class="prettyprint">error_code = player_prepare_async(ad-&gt;player, _prepared_cb, ad);</pre>

</li>

<li>

<p>Play the video file:</p>

<ol>

<li>

<p>Ensure that the player state has changed to <span style="font-family: Courier New,Courier,monospace">PLAYER_STATE_READY</span>. To check the state, use the <span style="font-family: Courier New,Courier,monospace">player_get_state()</span> function, and to start the playback, use the <span style="font-family: Courier New,Courier,monospace">player_start()</span> function:</p>

<pre class="prettyprint">player_state_e state;
do 
{
&nbsp;&nbsp;&nbsp;error_code = player_get_state(ad-&gt;player, &amp;state);
&nbsp;&nbsp;&nbsp;if (error_code != PLAYER_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;usleep(1000);
} while (state != PLAYER_STATE_READY);
   
if (error_code == PLAYER_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;error_code = player_start(ad-&gt;player);
}
</pre>

</li>

<li>

<p>To start the playback, use the <span style="font-family: Courier New,Courier,monospace">player_start()</span> function:</p>

<pre class="prettyprint">error_code = player_start(g_player);
</pre>
<p>After a successful call of this function, the player state is set to <span style="font-family: Courier New,Courier,monospace">PLAYER_STATE_PLAYING</span> and the playback of the media content stored in the previously specified file starts. The video file plays until you call the <span style="font-family: Courier New,Courier,monospace">player_stop()</span> or <span style="font-family: Courier New,Courier,monospace">player_pause()</span> function.</p>
</li>

<li>

<p>If you used the <span style="font-family: Courier New,Courier,monospace">player_prepare_async()</span> to prepare the player, use the following callback functions to handle playback:</p>

<pre class="prettyprint">static void _prepared_cb(void *data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;int error_code = 0;
&nbsp;&nbsp;&nbsp;error_code = player_start(ad-&gt;player);
}
</pre>

</li>

</ol>

</li>

</ol>

<h2 id="release" name="release">Releasing Resources</h2>

<p>After you have finished work with the player, reset the player and destroy the player handle by using the <span style="font-family: Courier New,Courier,monospace">player_unprepare()</span> and <span style="font-family: Courier New,Courier,monospace">player_destroy()</span> functions:</p>

<pre class="prettyprint">static void release_base_player(appdata_s *ad) 
{
&nbsp;&nbsp;&nbsp;int error_code = 0;
&nbsp;&nbsp;&nbsp;error_code = player_unprepare(g_player);
&nbsp;&nbsp;&nbsp;if (error_code != PLAYER_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LOGE(&quot;failed to set uri&quot;);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error_code = player_destroy(ad-&gt;player);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;player = NULL;
&nbsp;&nbsp;&nbsp;}
}
</pre>

<h2>Where to Go Next</h2>

<ul>
 <li><a href="media_tutorial.htm">Multimedia Tutorials</a></li>
 <li><a href="../../guide/media/player.htm">Audio and Video Player Programming Guide</a></li>
 <li><a href="../../../../org.tizen.mobile.native.apireference/group__CAPI__MEDIA__PLAYER__MODULE.html">Player API Reference</a></li>
</ul>

  <div id="footer">
   <hr size="1" />
   <font size="1">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</font>
  </div>
  <!--start-->
  <script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
  <!--end-->
 </body>
</html>