<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
 <head> 
  <script type="text/javascript" src="../../snippet.js"></script> 
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
  <link href="../../styles.css" rel="StyleSheet" type="text/css" /> 
  <link href="../../snippet.css" rel="StyleSheet" type="text/css" /> 
  <title>Ecore Events</title> 
 </head> 
 <body onload="prettyPrint()"> 
  <!--<div id="banner">
Tizen</div>--> 
<h1>Ecore Events</h1> 

<p>Ecore events are used for various kinds of low-level event handling, such as key presses, network connections, and communication with sub-processes.</p>  

 

 <h2 id="events" name="events">Ecore Shortcut Events</h2>
 
 <p>The low-level handling of key presses is particularly useful for shortcuts. Instead of adding a signal handler to a specific graphical element, you can add one globally. This guarantees that no matter which widget is currently receiving events, the shortcut is caught.</p> 
 
 <p>The following Ecore events can be used for shortcuts:</p>
 
<pre class="prettyprint">
int ECORE_EVENT_KEY_DOWN;
int ECORE_EVENT_KEY_UP;
int ECORE_EVENT_MOUSE_BUTTON_DOWN;
int ECORE_EVENT_MOUSE_BUTTON_UP;
int ECORE_EVENT_MOUSE_MOVE;
int ECORE_EVENT_MOUSE_WHEEL;
int ECORE_EVENT_MOUSE_IN;
int ECORE_EVENT_MOUSE_OUT;
</pre>

<p>The callbacks receive additional data through the <span style="font-family: Courier New,Courier,monospace;">void *</span> object. The object type depends on the event that has been received:</p>
 
<pre class="prettyprint">
typedef struct _Ecore_Event_Key Ecore_Event_Key;
typedef struct _Ecore_Event_Mouse_Button Ecore_Event_Mouse_Button;
typedef struct _Ecore_Event_Mouse_Wheel Ecore_Event_Mouse_Wheel;
typedef struct _Ecore_Event_Mouse_Move Ecore_Event_Mouse_Move;
</pre>

<h2 id="add" name="add">Managing Event Handlers</h2>
<p>To register a callback for a given event, use the <span style="font-family: Courier New,Courier,monospace;">ecore_event_handler_add()</span> function. Use its first parameter to define the event type (for example, to receive notifications when keys are pressed, use <span style="font-family: Courier New,Courier,monospace;">ECORE_EVENT_KEY_DOWN</span>) and the second parameter to define the callback function.</p>
 
<p>The first 2 parameters of the callback function are the same as in the <span style="font-family: Courier New,Courier,monospace;">ecore_event_handler_add()</span> function. The final parameter is the type of the object, which depends on the value of the <span style="font-family: Courier New,Courier,monospace;">type</span> parameter. Possible types are <span style="font-family: Courier New,Courier,monospace;">Ecore_Event_Key</span>, <span style="font-family: Courier New,Courier,monospace;">Ecore_Event_Mouse_Button</span>, <span style="font-family: Courier New,Courier,monospace;">Ecore_Event_Mouse_Wheel</span>, and <span style="font-family: Courier New,Courier,monospace;">Ecore_Event_Mouse_Move</span>.</p>

<p>The callback function returns <span style="font-family: Courier New,Courier,monospace;">ECORE_CALLBACK_PASS_ON</span> to enable additional callbacks for the event, or <span style="font-family: Courier New,Courier,monospace;">ECORE_CALLBACK_DONE</span> to disable additional callbacks.</p>

<p>The following example shows how to track the <strong>Ctrl</strong> key presses and set a global variable to <span style="font-family: Courier New,Courier,monospace;">EINA_TRUE</span> when the <strong>Ctrl</strong> key is pressed:</p>
 
<pre class="prettyprint">
Eina_Bool ctrl_pressed = EINA_FALSE;
static Eina_Bool
_key_down_cb(void *data EINA_UNUSED, int type EINA_UNUSED, void *ev)
{
&nbsp;&nbsp;&nbsp;// The callback is used with the ECORE_EVENT_KEY_DOWN signal: the
&nbsp;&nbsp;&nbsp;// parameter &quot;void *ev&quot; is therefore of actual type Ecore_Event_Key
&nbsp;&nbsp;&nbsp;// The following makes its fields accessible
&nbsp;&nbsp;&nbsp;Ecore_Event_Key *event = ev;
&nbsp;&nbsp;&nbsp;// Test whether the key that is pressed is Ctrl
&nbsp;&nbsp;&nbsp;if (!strcmp(&quot;Control_L&quot;, event-&gt;key))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// If it is, scroll to that piece of information
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctrl_pressed = EINA_TRUE;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;// Let the event continue to other callbacks which have not been called yet
&nbsp;&nbsp;&nbsp;return ECORE_CALLBACK_PASS_ON;
}

ecore_event_handler_add(ECORE_EVENT_KEY_DOWN, _key_down_cb, NULL);
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace;">ecore_event_handler_add()</span> function returns a pointer to the event handler which can be used to remove the handler, when it is no longer needed. To remove an event handler, call the <span style="font-family: Courier New,Courier,monospace;">ecore_event_handler_del()</span> function:</p>
 
<pre class="prettyprint">
void* ecore_event_handler_del(Ecore_Event_Handler *event_handler)
</pre>


<h2 id="send" name="send">Sending Events to the Main Loop</h2>

<p>You can send events to the main loop manually, for example, to handle actions of various origins through the same code path.</p>

<p>To send an event, use the <span style="font-family: Courier New,Courier,monospace;">ecore_event_add()</span> function:</p>
 
<pre class="prettyprint">
Ecore_Event* ecore_event_add(int type, void *ev, Ecore_End_Cb func_free, void *data)
</pre>

<p>The third parameter defines a callback function, such as:</p>
 
<pre class="prettyprint">
void* some_func_free(void *user_data, void *func_data);
</pre>

<h2 id="create" name="create">Creating Event Types</h2>

<p>You can create your own event types, for example, to allow you to use a single code path.</p>

<p>To create an event type, use the <span style="font-family: Courier New,Courier,monospace;">ecore_event_type_new()</span> function. The function generates a new unique identifier which you can use as the <span style="font-family: Courier New,Courier,monospace;">type</span> parameter in the event handler functions.</p>

<h2 id="examples" name="examples">Examples</h2>

<p>The following examples show how you can use Ecore events.</p>

<p>The following code snippet defines a callback on the <span style="font-family: Courier New,Courier,monospace;">KEY_DOWN</span> event that prints a key name, key, string, and modifiers:</p>

<pre class="prettyprint">
#include &lt;Elementary.h&gt;
struct modifier_value_to_name
{
&nbsp;&nbsp;&nbsp;unsigned int value;
&nbsp;&nbsp;&nbsp;const char *name;
};
struct modifier_value_to_name modifier_to_name[] =
{
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.value = ECORE_EVENT_MODIFIER_SHIFT, .name = &quot;MODIFIER_SHIFT&quot;
&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.value = ECORE_EVENT_MODIFIER_CTRL, .name = &quot;MODIFIER_CTRL&quot;
&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.value = ECORE_EVENT_MODIFIER_ALT, .name = &quot;MODIFIER_ALT&quot;
&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.value = ECORE_EVENT_MODIFIER_WIN, .name = &quot;MODIFIER_WIN&quot;
&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.value = ECORE_EVENT_MODIFIER_ALTGR, .name = &quot;MODIFIER_ALTGR&quot;
&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.value = ECORE_EVENT_LOCK_SCROLL, .name = &quot;LOCK_SCROLL&quot;
&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.value = ECORE_EVENT_LOCK_NUM, .name = &quot;LOCK_NUM&quot;
&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.value = ECORE_EVENT_LOCK_CAPS, .name = &quot;LOCK_CAPS&quot;
&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.value = ECORE_EVENT_LOCK_SHIFT, .name = &quot;LOCK_SHIFT&quot;
&nbsp;&nbsp;&nbsp;}
};
static void
_print_modifiers(unsigned int modifiers)
{
&nbsp;&nbsp;&nbsp;size_t i;
&nbsp;&nbsp;&nbsp;size_t len = sizeof(modifier_to_name) / sizeof(struct modifier_value_to_name);
&nbsp;&nbsp;&nbsp;Eina_Bool found_one = EINA_FALSE;
&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; len; i++)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (modifiers &amp; modifier_to_name[i].value)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stdout, &quot; modifier: %s\n&quot;, modifier_to_name[i].name);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;found_one = EINA_TRUE;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (!found_one)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stdout, &quot; modifier: &lt;none&gt;\n&quot;);
&nbsp;&nbsp;&nbsp;}
}
static Eina_Bool
_key_down_callback(void *data EINA_UNUSED, int type EINA_UNUSED, void *ev)
{
&nbsp;&nbsp;&nbsp;Ecore_Event_Key *event = ev;
&nbsp;&nbsp;&nbsp;fprintf(stdout, &quot;Key pressed:\n&quot;);
&nbsp;&nbsp;&nbsp;fprintf(stdout, &quot; keyname: %s\n&quot;, event-&gt;keyname);
&nbsp;&nbsp;&nbsp;fprintf(stdout, &quot; key: %s\n&quot;, event-&gt;key);
&nbsp;&nbsp;&nbsp;fprintf(stdout, &quot; string: %s\n&quot;, event-&gt;string);
&nbsp;&nbsp;&nbsp;_print_modifiers(event-&gt;modifiers);
&nbsp;&nbsp;&nbsp;fflush(stdout);
&nbsp;&nbsp;&nbsp;return ECORE_CALLBACK_PASS_ON;
}
EAPI_MAIN int
elm_main(int argc, char **argv)
{
&nbsp;&nbsp;&nbsp;Evas_Object *window;
&nbsp;&nbsp;&nbsp;elm_init(argc, argv);
&nbsp;&nbsp;&nbsp;window = elm_win_add(NULL, &quot;Evas object event test&quot;, ELM_WIN_BASIC);
&nbsp;&nbsp;&nbsp;evas_object_resize(window, 400, 400);
&nbsp;&nbsp;&nbsp;ecore_event_handler_add(ECORE_EVENT_KEY_DOWN, _key_down_callback, NULL);
&nbsp;&nbsp;&nbsp;evas_object_show(window);
&nbsp;&nbsp;&nbsp;elm_run();
&nbsp;&nbsp;&nbsp;elm_shutdown();
&nbsp;&nbsp;&nbsp;return 0;
}
ELM_MAIN()
</pre>

<p>The above callback generates the following possible (commented) output:</p>

<pre class="prettyprint">
# Press the &#39;a&#39; key
Key pressed:
&nbsp;&nbsp;&nbsp;keyname: a
&nbsp;&nbsp;&nbsp;key: a
&nbsp;&nbsp;&nbsp;string: a
&nbsp;&nbsp;&nbsp;modifier: &lt;none&gt;
# Press the left shift key
Key pressed:
&nbsp;&nbsp;&nbsp;keyname: Shift_L
&nbsp;&nbsp;&nbsp;key: Shift_L
&nbsp;&nbsp;&nbsp;string: (null)
&nbsp;&nbsp;&nbsp;modifier: &lt;none&gt;
# Without releasing the shift key, press the &#39;a&#39; key
Key pressed:
&nbsp;&nbsp;&nbsp;keyname: a
&nbsp;&nbsp;&nbsp;key: A
&nbsp;&nbsp;&nbsp;string: A
&nbsp;&nbsp;&nbsp;modifier: MODIFIER_SHIFT
# Release the shift key
# Press the left control key
Key pressed:
&nbsp;&nbsp;&nbsp;keyname: Control_L
&nbsp;&nbsp;&nbsp;key: Control_L
&nbsp;&nbsp;&nbsp;string: (null)
&nbsp;&nbsp;&nbsp;modifier: &lt;none&gt;
# Without releasing the shift key, press the &#39;a&#39; key
Key pressed:
&nbsp;&nbsp;&nbsp;keyname: a
&nbsp;&nbsp;&nbsp;key: a
&nbsp;&nbsp;&nbsp;string: ^A # This is actually the keycode for Ctrl+A and not a two-character string
&nbsp;&nbsp;&nbsp;modifier: MODIFIER_CTRL
# Release the control key
# Press and release the Caps Lock key
Key pressed:
&nbsp;&nbsp;&nbsp;keyname: Caps_Lock
&nbsp;&nbsp;&nbsp;key: Caps_Lock
&nbsp;&nbsp;&nbsp;string: (null)
&nbsp;&nbsp;&nbsp;modifier: &lt;none&gt;
# Press the &#39;a&#39; key
Key pressed:
&nbsp;&nbsp;&nbsp;keyname: a
&nbsp;&nbsp;&nbsp;key: A
&nbsp;&nbsp;&nbsp;string: A
&nbsp;&nbsp;&nbsp;modifier: LOCK_CAPS
&nbsp;&nbsp;&nbsp;modifier: LOCK_SHIFT
</pre>

<p>The following code snippet defines a callback on the <span style="font-family: Courier New,Courier,monospace;">KEY_UP</span> event that prints a key name, key, string, and modifiers:</p>

<pre class="prettyprint">
#include &lt;stdio.h&gt;
#include &lt;Eina.h&gt;
#include &lt;Evas.h&gt;
#include &lt;Ecore.h&gt;
#include &lt;Ecore_Evas.h&gt;
#include &lt;Ecore_Input.h&gt;
typedef struct
{
&nbsp;&nbsp;&nbsp;Eina_List *seq;
&nbsp;&nbsp;&nbsp;Eina_Bool composing;
}
Data;
// Remove every element in the sequence list and turn the composing off
static void
_data_reset(Data *d)
{
&nbsp;&nbsp;&nbsp;char *str;
&nbsp;&nbsp;&nbsp;EINA_LIST_FREE(d-&gt;seq, str)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eina_stringshare_del(str);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;d-&gt;composing = EINA_FALSE;
}
// Return true if the given key is a modifier
static Eina_Bool
_is_modifier(const char *key)
{
&nbsp;&nbsp;&nbsp;return 
&nbsp;&nbsp;&nbsp;(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// This tests for Shift_L and Shift_R
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(!strncmp(key, &quot;Shift&quot;, 5))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// This tests for Control_L and Control_R
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| (!strncmp(key, &quot;Control&quot;, 7))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// This tests for Alt and its variants
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| (!strncmp(key, &quot;Alt&quot;, 3))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| (!strncmp(key, &quot;Meta&quot;, 4))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| (!strncmp(key, &quot;Super&quot;, 5))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| (!strncmp(key, &quot;Hyper&quot;, 5))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| (!strncmp(key, &quot;Scroll_Lock&quot;, 11))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| (!strncmp(key, &quot;Num_Lock&quot;, 8))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|| (!strncmp(key, &quot;Caps_Lock&quot;, 9))
&nbsp;&nbsp;&nbsp;);
}
static void
_handle_compose(Data *d, Evas_Event_Key_Up *ev)
{
&nbsp;&nbsp;&nbsp;Data *d;
&nbsp;&nbsp;&nbsp;char *compres = NULL;
&nbsp;&nbsp;&nbsp;char *string = NULL;
&nbsp;&nbsp;&nbsp;Ecore_Compose_State state;
&nbsp;&nbsp;&nbsp;Eina_Bool free_string = EINA_FALSE;
&nbsp;&nbsp;&nbsp;if (d-&gt;composing == NULL)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_data_reset(d);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d-&gt;seq = eina_list_append(d-&gt;seq, eina_stringshare_add(ev-&gt;key));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state = ecore_compose_get(d-&gt;seq, &amp;compres);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d-&gt;composing = (state == ECORE_COMPOSE_MIDDLE);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!d-&gt;composing)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_data_reset(d);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( ! _is_modifier(ev-&gt;key))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d-&gt;seq = eina_list_append(d-&gt;seq, eina_stringshare_add(ev-&gt;key));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state = ecore_compose_get(d-&gt;seq, &amp;compres);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (state)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case ECORE_COMPOSE_NONE:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_data_reset(d);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case ECORE_COMPOSE_DONE:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_data_reset(d);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (compres != NULL)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string = compres;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free_string = EINA_TRUE;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (string != NULL)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot; ** string: &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;%s &quot;, string);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;%zu &quot;, strlen(string));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;0x%hhx%hhX\n&quot;, string[1], string[0]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (free_string)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(string);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
static void
_key_up_cb(void *data, Evas *e EINA_UNUSED, Evas_Object *obj EINA_UNUSED, void *event)
{
&nbsp;&nbsp;&nbsp;Evas_Event_Key_Up *ev;
&nbsp;&nbsp;&nbsp;int alt;
&nbsp;&nbsp;&nbsp;int shift;
&nbsp;&nbsp;&nbsp;int ctrl;
&nbsp;&nbsp;&nbsp;ev = (Evas_Event_Key_Up *)event;
&nbsp;&nbsp;&nbsp;alt = evas_key_modifier_is_set(ev-&gt;modifiers, &quot;Alt&quot;);
&nbsp;&nbsp;&nbsp;shift = evas_key_modifier_is_set(ev-&gt;modifiers, &quot;Shift&quot;);
&nbsp;&nbsp;&nbsp;ctrl = evas_key_modifier_is_set(ev-&gt;modifiers, &quot;Control&quot;);
&nbsp;&nbsp;&nbsp;// Print details on the key being unpressed
&nbsp;&nbsp;&nbsp;printf(&quot;up: &quot;);
&nbsp;&nbsp;&nbsp;printf(&quot;keyname: %s &quot;), ev-&gt;keyname;
&nbsp;&nbsp;&nbsp;printf(&quot;key: %s &quot;, ev-&gt;key);
&nbsp;&nbsp;&nbsp;printf(&quot;string: %s &quot;, ev-&gt;compose);
&nbsp;&nbsp;&nbsp;printf(&quot;%d &quot;, (ev-&gt;compose) ? *(ev-&gt;compose) : -1);
&nbsp;&nbsp;&nbsp;printf(&quot;(%d:%d:%d)\n&quot;, alt, shift, ctrl);
&nbsp;&nbsp;&nbsp;if (!alt &amp;&amp; !shift &amp;&amp; !strcmp(ev-&gt;key, &quot;q&quot;)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ecore_main_loop_quit();
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;_handle_compose((Data*) data, ev);
}
static void
_del(Ecore_Evas *ee EINA_UNUSED)
{
&nbsp;&nbsp;&nbsp;ecore_main_loop_quit();
}
int main(int argc, char* argv[])
{
&nbsp;&nbsp;&nbsp;Ecore_Evas *ee;
&nbsp;&nbsp;&nbsp;Evas *evas;
&nbsp;&nbsp;&nbsp;Evas_Object *o;
&nbsp;&nbsp;&nbsp;d = calloc(1, sizeof(Data));
&nbsp;&nbsp;&nbsp;if (!ecore_event_init())
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (!ecore_evas_init())
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;ee = ecore_evas_new(NULL, 10, 10, 0, 0, NULL);
&nbsp;&nbsp;&nbsp;if (!ee)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return -1;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;ecore_evas_callback_delete_request_set(ee, _del);
&nbsp;&nbsp;&nbsp;evas = ecore_evas_get(ee);
&nbsp;&nbsp;&nbsp;o = evas_object_rectangle_add(evas);
&nbsp;&nbsp;&nbsp;evas_object_color_set(o, 255, 0, 0, 255);
&nbsp;&nbsp;&nbsp;evas_object_move(o, 0, 0);
&nbsp;&nbsp;&nbsp;evas_object_resize(o, 480, 480);
&nbsp;&nbsp;&nbsp;evas_object_focus_set(o, EINA_TRUE);
&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(o, EVAS_CALLBACK_KEY_UP, _key_up_cb, d);
&nbsp;&nbsp;&nbsp;evas_object_show(o);
&nbsp;&nbsp;&nbsp;ecore_evas_resize(ee, 480, 480);
&nbsp;&nbsp;&nbsp;ecore_evas_show(ee);
&nbsp;&nbsp;&nbsp;ecore_main_loop_begin();
&nbsp;&nbsp;&nbsp;ecore_event_shutdown();
&nbsp;&nbsp;&nbsp;ecore_evas_shutdown();
&nbsp;&nbsp;&nbsp;return 0;
}
</pre>


<p>The following code snippet defines callbacks on the <span style="font-family: Courier New,Courier,monospace;">MOUSE_BUTTON_DOWN/UP</span>, <span style="font-family: Courier New,Courier,monospace;">MOUSE_WHEEL</span>, and <span style="font-family: Courier New,Courier,monospace;">MOUSE_MOVE</span> events that print information about the events:</p>

<pre class="prettyprint">
#include &lt;Elementary.h&gt;
static Eina_Bool
_mouse_button_cb(void *data EINA_UNUSED, int type EINA_UNUSED, void *ev)
{
&nbsp;&nbsp;&nbsp;Ecore_Event_Mouse_Button *mouse_button_event = ev;
&nbsp;&nbsp;&nbsp;fprintf(stdout, &quot;Mouse button event:\n&quot;);
&nbsp;&nbsp;&nbsp;if (type == ECORE_EVENT_MOUSE_BUTTON_DOWN)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stdout, &quot; button: DOWN\n&quot;);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// ECORE_EVENT_MOUSE_BUTTON_UP
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stdout, &quot; button: UP\n&quot;);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;fprintf(stdout, &quot;Mouse button event:\n&quot;);
&nbsp;&nbsp;&nbsp;fprintf(stdout, &quot; buttons: %u\n&quot;, mouse_button_event-&gt;buttons);
&nbsp;&nbsp;&nbsp;fprintf(stdout, &quot; double click: %u\n&quot;, mouse_button_event-&gt;double_click);
&nbsp;&nbsp;&nbsp;fprintf(stdout, &quot; triple click: %u\n&quot;, mouse_button_event-&gt;triple_click);
&nbsp;&nbsp;&nbsp;fprintf(stdout, &quot; x: %d\n&quot;, mouse_button_event-&gt;x);
&nbsp;&nbsp;&nbsp;fprintf(stdout, &quot; y: %d\n&quot;, mouse_button_event-&gt;y);
&nbsp;&nbsp;&nbsp;fprintf(stdout, &quot; root x: %d\n&quot;, mouse_button_event-&gt;root.x);
&nbsp;&nbsp;&nbsp;fprintf(stdout, &quot; root y: %d\n&quot;, mouse_button_event-&gt;root.y);
&nbsp;&nbsp;&nbsp;// _print_modifiers(mouse_button_event-&gt;modifiers);
&nbsp;&nbsp;&nbsp;fflush(stdout);
&nbsp;&nbsp;&nbsp;return ECORE_CALLBACK_PASS_ON;
}
static Eina_Bool
_mouse_wheel_cb(void *data EINA_UNUSED, int type EINA_UNUSED, void *ev)
{
&nbsp;&nbsp;&nbsp;Ecore_Event_Mouse_Wheel *mouse_wheel_event = ev;
&nbsp;&nbsp;&nbsp;fprintf(stdout, &quot;Mouse wheel event:\n&quot;);
&nbsp;&nbsp;&nbsp;fprintf(stdout, &quot; x: %d\n&quot;, mouse_wheel_event-&gt;x);
&nbsp;&nbsp;&nbsp;fprintf(stdout, &quot; y: %d\n&quot;, mouse_wheel_event-&gt;y);
&nbsp;&nbsp;&nbsp;fprintf(stdout, &quot; z: %d\n&quot;, mouse_wheel_event-&gt;z);
&nbsp;&nbsp;&nbsp;fprintf(stdout, &quot; root x: %d\n&quot;, mouse_wheel_event-&gt;root.x);
&nbsp;&nbsp;&nbsp;fprintf(stdout, &quot; root y: %d\n&quot;, mouse_wheel_event-&gt;root.y);
&nbsp;&nbsp;&nbsp;// _print_modifiers(mouse_wheel_event-&gt;modifiers);
&nbsp;&nbsp;&nbsp;fflush(stdout);
&nbsp;&nbsp;&nbsp;return ECORE_CALLBACK_PASS_ON;
}
static Eina_Bool
_mouse_move_cb(void *data EINA_UNUSED, int type EINA_UNUSED, void *ev)
{
&nbsp;&nbsp;&nbsp;Ecore_Event_Mouse_Move *mouse_move_event = ev;
&nbsp;&nbsp;&nbsp;fprintf(stdout, &quot;Mouse move event:\n&quot;);
&nbsp;&nbsp;&nbsp;fprintf(stdout, &quot; x: %d\n&quot;, mouse_move_event-&gt;x);
&nbsp;&nbsp;&nbsp;fprintf(stdout, &quot; y: %d\n&quot;, mouse_move_event-&gt;y);
&nbsp;&nbsp;&nbsp;fprintf(stdout, &quot; root x: %d\n&quot;, mouse_move_event-&gt;root.x);
&nbsp;&nbsp;&nbsp;fprintf(stdout, &quot; root y: %d\n&quot;, mouse_move_event-&gt;root.y);
&nbsp;&nbsp;&nbsp;// _print_modifiers(mouse_move_event-&gt;modifiers);
&nbsp;&nbsp;&nbsp;fflush(stdout);
&nbsp;&nbsp;&nbsp;return ECORE_CALLBACK_PASS_ON;
}
EAPI_MAIN int
elm_main(int argc, char **argv)
{
&nbsp;&nbsp;&nbsp;Evas_Object *window;
&nbsp;&nbsp;&nbsp;elm_init(argc, argv);
&nbsp;&nbsp;&nbsp;window = elm_win_add(NULL, &quot;Evas object event test&quot;, ELM_WIN_BASIC);
&nbsp;&nbsp;&nbsp;evas_object_resize(window, 400, 400);
&nbsp;&nbsp;&nbsp;ecore_event_handler_add(ECORE_EVENT_MOUSE_BUTTON_DOWN, _mouse_button_cb, NULL);
&nbsp;&nbsp;&nbsp;ecore_event_handler_add(ECORE_EVENT_MOUSE_BUTTON_UP, _mouse_button_cb, NULL);
&nbsp;&nbsp;&nbsp;ecore_event_handler_add(ECORE_EVENT_MOUSE_MOVE, _mouse_move_cb, NULL);
&nbsp;&nbsp;&nbsp;ecore_event_handler_add(ECORE_EVENT_MOUSE_WHEEL, _mouse_wheel_cb, NULL);
&nbsp;&nbsp;&nbsp;evas_object_show(window);
&nbsp;&nbsp;&nbsp;elm_run();
&nbsp;&nbsp;&nbsp;elm_shutdown();
&nbsp;&nbsp;&nbsp;return 0;
}
ELM_MAIN()
</pre>

<p>The above callbacks generate the following possible output:</p>

<pre class="prettyprint">
Mouse button event:
&nbsp;&nbsp;&nbsp;button: DOWN
&nbsp;&nbsp;&nbsp;buttons: 1
&nbsp;&nbsp;&nbsp;double click: 0
&nbsp;&nbsp;&nbsp;triple click: 0
&nbsp;&nbsp;&nbsp;x: 203
&nbsp;&nbsp;&nbsp;y: 188
&nbsp;&nbsp;&nbsp;root x: 204
&nbsp;&nbsp;&nbsp;root y: 507
Mouse move event:
&nbsp;&nbsp;&nbsp;x: 203
&nbsp;&nbsp;&nbsp;y: 188
&nbsp;&nbsp;&nbsp;root x: 204
&nbsp;&nbsp;&nbsp;root y: 507
Mouse button event:
&nbsp;&nbsp;&nbsp;button: UP
&nbsp;&nbsp;&nbsp;buttons: 1
&nbsp;&nbsp;&nbsp;double click: 0
&nbsp;&nbsp;&nbsp;triple click: 0
&nbsp;&nbsp;&nbsp;x: 203
&nbsp;&nbsp;&nbsp;y: 188
&nbsp;&nbsp;&nbsp;root x: 204
&nbsp;&nbsp;&nbsp;root y: 507
Mouse move event:
&nbsp;&nbsp;&nbsp;x: 203
&nbsp;&nbsp;&nbsp;y: 188
&nbsp;&nbsp;&nbsp;root x: 204
&nbsp;&nbsp;&nbsp;root y: 507
Mouse button event:
&nbsp;&nbsp;&nbsp;button: DOWN
&nbsp;&nbsp;&nbsp;buttons: 1
&nbsp;&nbsp;&nbsp;double click: 1
&nbsp;&nbsp;&nbsp;triple click: 0
&nbsp;&nbsp;&nbsp;x: 203
&nbsp;&nbsp;&nbsp;y: 188
&nbsp;&nbsp;&nbsp;root x: 204
&nbsp;&nbsp;&nbsp;root y: 507
Mouse move event:
&nbsp;&nbsp;&nbsp;x: 203
&nbsp;&nbsp;&nbsp;y: 188
&nbsp;&nbsp;&nbsp;root x: 204
&nbsp;&nbsp;&nbsp;root y: 507
Mouse button event:
&nbsp;&nbsp;&nbsp;button: UP
&nbsp;&nbsp;&nbsp;buttons: 1
&nbsp;&nbsp;&nbsp;double click: 1
&nbsp;&nbsp;&nbsp;triple click: 0
&nbsp;&nbsp;&nbsp;x: 203
&nbsp;&nbsp;&nbsp;y: 188
&nbsp;&nbsp;&nbsp;root x: 204
&nbsp;&nbsp;&nbsp;root y: 507
Mouse wheel event:
&nbsp;&nbsp;&nbsp;x: 203
&nbsp;&nbsp;&nbsp;y: 188
&nbsp;&nbsp;&nbsp;z: 1
&nbsp;&nbsp;&nbsp;root x: 204
&nbsp;&nbsp;&nbsp;root y: 507
</pre>

  <h2>Where to Go Next</h2> 
  <ul> 
	<li><a href="events_guide.htm">Event Handling</a></li>  
	  </ul> 
 
  <div id="footer"> 
   <hr size="1" /> 
   <font size="1">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</font> 
  </div> 

  <script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script> 
 
 </body>
</html>