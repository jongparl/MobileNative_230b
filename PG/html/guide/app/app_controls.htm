 <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
 <head> 
  <script type="text/javascript" src="../../snippet.js"></script> 
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
  <link href="../../styles.css" rel="StyleSheet" type="text/css" /> 
  <link href="../../snippet.css" rel="StyleSheet" type="text/css" /> 
  <title>Launching Applications</title> 
 </head> 
 <body onload="prettyPrint()"> 
 
<h1>Launching Applications</h1>
 
<p>An application can be launched by the user from the Launcher or by another application.</p>
<p>Regardless of how an application is launched, the application framework starts the application by creating a new process and calling the entry point of the application. Like a conventional Linux application, the main function of the application is its entry point. In the Tizen application, the main task is to hand over control to the application framework by calling the <span style="font-family: Courier New,Courier,monospace">app_main()</span> function:</p>
  
<pre class="prettyprint">
bool app_create(void *user_data)
{
&nbsp;&nbsp;&nbsp;// Take necessary actions before the main event loop starts
&nbsp;&nbsp;&nbsp;// Initialize UI resources and application data
&nbsp;&nbsp;&nbsp;// If this function returns true, the application main loop starts
&nbsp;&nbsp;&nbsp;// If this function returns false, the application terminates
&nbsp;&nbsp;&nbsp;return true;
}

void app_control(app_control_h app_control, void *user_data)
{
&nbsp;&nbsp;&nbsp;// Handle the launch request
}

void app_pause(void *user_data)
{
&nbsp;&nbsp;&nbsp;// Take necessary actions when application becomes invisible
}

void app_resume(void *user_data)
{
&nbsp;&nbsp;&nbsp;// Take necessary actions when application becomes visible
}

void app_terminate(void *user_data)
{
&nbsp;&nbsp;&nbsp;// Release all resources
}

int main(int argc, char *argv[])
{
&nbsp;&nbsp;&nbsp;struct appdata ad;
 
&nbsp;&nbsp;&nbsp;app_event_callback_s event_callback;
     
&nbsp;&nbsp;&nbsp;event_callback.create = app_create;
&nbsp;&nbsp;&nbsp;event_callback.terminate = app_terminate;
&nbsp;&nbsp;&nbsp;event_callback.pause = app_pause;
&nbsp;&nbsp;&nbsp;event_callback.resume = app_resume;
&nbsp;&nbsp;&nbsp;event_callback.app_control = app_control;
&nbsp;&nbsp;&nbsp;event_callback.low_memory = NULL;
&nbsp;&nbsp;&nbsp;event_callback.low_battery = NULL;
&nbsp;&nbsp;&nbsp;event_callback.device_orientation = NULL;
&nbsp;&nbsp;&nbsp;event_callback.language_changed = NULL;
&nbsp;&nbsp;&nbsp;event_callback.region_format_changed = NULL;
     
&nbsp;&nbsp;&nbsp;memset(&amp;ad, 0x0, sizeof(struct appdata));
 
&nbsp;&nbsp;&nbsp;return app_main(&amp;argc, &amp;argv, &amp;event_callback, &amp;ad);
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">app_main()</span> function initializes the application and starts the main loop. It takes 4 parameters and uses them to initialize the application. The <span style="font-family: Courier New,Courier,monospace">argc</span> and <span style="font-family: Courier New,Courier,monospace">argv</span> parameters contain the values from the application framework, and you must never change their values. The third parameter is a state transition handler that is responsible for managing the state transitions the application goes through while it is running. The fourth parameter is application data to be passed to each state handler.</p>
<p>When the <span style="font-family: Courier New,Courier,monospace">app_main()</span> is first invoked, the application moves from the ready state to the created state. The application has to initialize itself. During this transition, the application framework calls the application&#39;s <span style="font-family: Courier New,Courier,monospace">app_create_cb()</span> state transition callback just before the application enters the main loop. Within the registered callback, you must initialize the application resources and create the main window.</p>
<p>If the <span style="font-family: Courier New,Courier,monospace">app_create_cb()</span> callback function returns <span style="font-family: Courier New,Courier,monospace">false</span>, the application moves to the terminated state. If it returns <span style="font-family: Courier New,Courier,monospace">true</span>, the application enters the main loop.</p>

 <h2 id="options" name="options">Handling the Launch Options</h2>
<p>The application framework calls the application&#39;s <span style="font-family: Courier New,Courier,monospace">app_control_cb()</span> callback just after the application enters the main loop. This callback is passed to the <span style="font-family: Courier New,Courier,monospace">app_control</span> containing the reason why the application was launched. For example, the application can be launched to open a file to handle the request that has been sent by other application. In all of these cases, the application is responsible for checking the content of the <span style="font-family: Courier New,Courier,monospace">app_control</span> and responding appropriately. The content of the <span style="font-family: Courier New,Courier,monospace">app_control</span> can be empty, if the application is launched by the user from the Launcher.<p>

<pre class="prettyprint">static void app_control(app_control_h app_control, void *user_data)
{
&nbsp;&nbsp;&nbsp;struct appdata *ad = (struct appdata *)user_data;
&nbsp;&nbsp;&nbsp;char *operation;
&nbsp;&nbsp;&nbsp;char *uri;
&nbsp;&nbsp;&nbsp;char *mime_type;
 
&nbsp;&nbsp;&nbsp;app_control_get_operation(app_control, operation);
 
&nbsp;&nbsp;&nbsp;if (!strcmp(operation, APP_CONTROL_OPERATION_VIEW))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app_control_get_uri(app_control, &amp;uri);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app_control_get_mime(app_control, &amp;mime_type);
 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (uri &amp;&amp; !strcmp(mime_type, &quot;image/jpg&quot;))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display_image_file(ad, uri); // Display a specific image file
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
 
&nbsp;&nbsp;&nbsp;if (ad-&gt;win)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_win_activate(ad->win);
}
</pre>

<h2 id="controls" name="controls">Application Controls</h2>
<p>The App control API provides functions for launching other applications with a specific operation, URI, and MIME type. The requesting application can get a result back from the launched application.</p>
<p>To launch an application with the App control API, create an <span style="font-family: Courier New,Courier,monospace">app_control</span> handle and add information to that handle. You can set the following information:</p>
<ul>
   <li>Operation: Action to be performed by the app control.</li>
   <li>URI: Data itself to be performed.</li>
   <li>MIME type: Specific type of the URI.</li>
   <li>Application ID: ID of the application to be launched.</li>
   <li>Extra data: Key-value pairs to provide additional information for the launch request and the result of the request.</li>
</ul>
<p>The operation is mandatory information for sending the launch request. The app control API provides several functions to get and set the above information to the <span style="font-family: Courier New,Courier,monospace">app_control</span> handle.</p>
<p>To launch an application with the app control API, use one of the following methods:</p>
<ul>	
   <li><a href="#explicit">Explicit launch</a>: Launch the application with the application ID.</li>
   <li><a href="#implicit">Implicit launch</a>: Launch the application with an operation, URI, or MIME type.</li>
</ul>
<p>The application launched by the app control can return the result to the caller application.<p>

<p>You can <a href="exporting_application_service_functionality.htm">export your application functionality</a> to allow other applications to launch your application.</p>

<h3 id="explicit" name="explicit">Explicit Launch</h3>

<p>When you request an explicit launch:</p>

<ul>
   <li>If the underlying application launcher framework finds an application matched with the given application ID in the installed application list, it launches the application in a new process. If the matched application is not found, the framework returns the <span style="font-family: Courier New,Courier,monospace">APP_CONTROL_ERROR_APP_NOT_FOUND</span> result. Additional information (such as operation, URI, or MIME type) is not be used to select an application for an explicit launch.</li>
   <li>If the operation setting in the <span style="font-family: Courier New,Courier,monospace">app_control</span> handle is set to <span style="font-family: Courier New,Courier,monospace">APP_CONTROL_OPERATION_DEFAULT</span>, the application ID must be set. Otherwise the <span style="font-family: Courier New,Courier,monospace">APP_CONTROL_ERROR_INVALID_PARAMETER</span> result is returned.</li>
</ul>
<p>The following code example launches a calculator application explicitly with the application ID:</p>
<pre class="prettyprint">
#include &lt;app.h&gt;
#include &lt;dlog.h&gt;
 
#define TAG "MY_TAG"

app_control_h app_control;
 
app_control_create(&amp;app_control);
app_control_set_operation(app_control, APP_CONTROL_OPERATION_DEFAULT);
app_control_set_app_id(app_control, &quot;org.tizen.calculator&quot;);
 
if (app_control_send_launch_request(app_control, NULL, NULL) == APP_CONTROL_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, TAG, &quot;Succeeded to launch a calculator app.&quot;);
} 
else 
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, TAG, &quot;Failed to launch a calculator app.&quot;);
}
 
app_control_destroy(app_control);
</pre>

<h3 id="implicit" name="explicit">Implicit Launch</h3>

<p>When you request an implicit launch:</p>

<ul>
<li>Only 3 data categories are used to determine which application can be launched: Operation, URI scheme, and MIME type.</li>
<li>The application launcher framework iterates the desktop files of installed applications on the device to find applications where the 3 categories are exactly matched.</li>
<li>If only one application is matched for the given categories, that application is launched. If multiple matching  applications are found, the application selector is shown and the user can select the proper application.</li>
<li>Each app control requires a different combination of the 3 categories. For some, only one category is necessary (for example, URI), for others, all 3 can be needed. Check the app control list and required data in the API Reference to determine the needed categories.</li>
</ul>
<p>To allow the application launcher framework to find and select matching applications, each application must describe its operation, URI, or MIME type correctly. The application can have multiple combinations of the operation, URI, and MIME type:</p>

  
<pre class="prettyprint">
X-SLP-SVC=[operation1]:[URI1]:[MIME1];[operation2]:[URI2]:[MIME2]
</pre>

<p>In the category description:</p>

<ul>
<li>Each app control description is separated by a semicolon (;).</li>
<li>Blank is not allowed between fields.</li>
<li>Operation is a mandatory field.</li>
<li>URI and MIME field can be NULL.</li>
</ul>

<p>The following code example launches a camera application with the operation and MIME type:</p>

<pre class="prettyprint">
#include &lt;app.h&gt;
#include &lt;dlog.h&gt;

#define TAG "MY_TAG"

app_control_h app_control;
 
app_control_create(&amp;app_control);
app_control_set_operation(app_control, APP_CONTROL_OPERATION_CREATE_CONTENT);
app_control_set_mime(app_control, &quot;image/jpg&quot;);
if (app_control_send_launch_request(app_control, NULL, NULL) == APP_CONTROL_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, TAG, &quot;Succeeded to launch a viewer app.&quot;);
} 
else 
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, TAG, &quot;Failed to launch a viewer app.&quot;);
}
 
app_control_destroy(app_control);
</pre>

<p>The following code example launches a gallery application with the operation, URI, and MIME type:</p>

<pre class="prettyprint">
#include &lt;app.h&gt;
#include &lt;dlog.h&gt;

#define TAG "MY_TAG"
 
app_control_h app_control;
 
app_control_create(&amp;app_control);
app_control_set_operation(app_control, APP_CONTROL_OPERATION_VIEW);
app_control_set_uri(app_control, &quot;file:///home/myhome/Photos/1_photo.jpg&quot;);
app_control_set_mime(app_control, &quot;image/*&quot;);
 
if (app_control_send_launch_request(app_control, NULL, NULL) == APP_CONTROL_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, TAG, &quot;Succeeded to launch a viewer app.&quot;);
} 
else 
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, TAG, &quot;Failed to launch a viewer app.&quot;);
}
 
app_control_destroy(app_control);
</pre>

<h3 id="results" name="results">Getting the App Control Results</h3>
<p>The app control result from the requested application is delivered to the caller application in the <span style="font-family: Courier New,Courier,monospace">app_control</span> handle with extra data. For some cases, the App control API provides pre-defined extra data keys.</p>
<p>If you cannot find a proper key, you can define your own key. However, the customized key must be shared between the caller and callee applications.</p>

<p>The following code example gets the result of an app control request by implementing an <span style="font-family: Courier New,Courier,monospace">app_control</span> result callback:</p>

<pre class="prettyprint">
#include &lt;app.h&gt;
#include &lt;dlog.h&gt;
 
#define TAG "MY_TAG"
 
// Callback function to get result
static void app_control_result(app_control_h request, app_control_h reply, app_control_result_e result, void *user_data) 
{
&nbsp;&nbsp;&nbsp;char *value;
 
&nbsp;&nbsp;&nbsp;if (result == APP_CONTROL_RESULT_SUCCEEDED) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (app_control_get_extra_data(reply, APP_CONTROL_DATA_SELECTED, &amp;value) == APP_CONTROL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, TAG, &quot;[app_control_result_cb] Succeeded: value(%s)&quot;, value);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, TAG, &quot;[app_control_result_cb] Failed&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
 
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, TAG, &quot;[app_control_result_cb] APP_CONTROL_RESULT_FAILED.&quot;);
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>The following code example requests the launch of another application:</p>

<pre class="prettyprint">
#include &lt;app.h&gt;
#include &lt;dlog.h&gt;

#define TAG "MY_TAG"

app_control_h app_control;
 
app_control_create(&amp;app_control);
 
app_control_set_operation(app_control, APP_CONTROL_OPERATION_CREATE_CONTENT);
app_control_set_mime(app_control, &quot;text/plain&quot;);
 
if (app_control_send_launch_request(app_control, app_control_result, NULL) == APP_CONTROL_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, TAG, &quot;Succeeded: the application is launched.&quot;);
} 
else 
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, TAG, &quot;Failed to launch an application.&quot;);
}
 
app_control_destroy(app_control);
</pre>

<p>The following code example implements an <span style="font-family: Courier New,Courier,monospace">app_control</span> callback in the callee application:</p>

<pre class="prettyprint">
static void app_control(app_control_h app_control, void* user_data) 
{
&nbsp;&nbsp;&nbsp;struct appdata *ad = (struct appdata *)user_data;
&nbsp;&nbsp;&nbsp;char *operation;
&nbsp;&nbsp;&nbsp;char *mime;
&nbsp;&nbsp;&nbsp;app_control_h reply;
&nbsp;&nbsp;&nbsp;char *app_id;
 
&nbsp;&nbsp;&nbsp;app_control_get_operation(app_control, &amp;operation);
 
&nbsp;&nbsp;&nbsp;if (!strcmp(operation, APP_CONTROL_OPERATION_CREATE_CONTENT)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app_control_get_mime(app_control, &mime);
 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!strcmp(mime, &quot;text/plain&quot;)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app_control_create(&reply);
 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app_get_app_id(&amp;app_id);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app_control_add_extra_data(reply, APP_CONTROL_DATA_SELECTED, app_id);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app_control_reply_to_launch_request(reply, app_control, APP_CONTROL_RESULT_SUCCEEDED);
 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app_control_destroy(reply);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre>

<h2>Where to Go Next</h2>
<ul>
<li><a href="fundamentals.htm">Application Fundamentals</a></li>
<li><a href="../../tutorials/app_tutorial/app_start_tutorial.htm">App Control Tutorial</a></li>
</ul>

  <div id="footer"> 
   <hr size="1" /> 
   <font size="1">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</font> 
  </div> 
  <!--start--> 
  <script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script> 
  <!--end-->  
 </body>
</html>